
var pub stacktrace: Seq[StackFrame]

attr push(untraced)

## returns size of T in bytes
fun pub sizeof[T] -> int

attr inline
impl pub [T, L] [T, L]:
  fun __index__(a: &Self, index: int) -> &T:
    if index < 0 | index >= L:
      panic("index out of bounds")
    a.get_unchecked(index)

  fun __index_var__(a: &var Self, index: int) -> &var T:
    if index < 0 | index >= L:
      panic("index out of bounds")
    a.get_unchecked_var(index)

  fun get_unchecked(a: &Self, index: int) -> &T:
    (a as int + index * sizeof::[T]()) as &T
  
  fun get_unchecked_var(a: &var Self, index: int) -> &var T:
    (a as int + index * sizeof::[T]()) as &var T

  fun len(array: &Self) -> int:
    L

impl pub Seq[u8]:
  fun print_int(s: &var Self, value: int):
    let 
      prev_len = s.len
      width = (if value != 0: log10(value.f64()).int() else: 0) + 1

    s.reserve(prev_len + width)
    s.len = prev_len + width
    var 
      i = width
      value = value
    for:
      if i == 0:
        break
      var digit = value % 10
      value = value / 10
      *s.get_unchecked(prev_len + i - 1) = (digit.u32() + '0').u8()
      i -= 1
  
  fun print(s: &var Self, value: &u8):
    var i = 0
    for:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1
    
    s.reserve(i)
    memcpy(s.get_unchecked(s.len), value, i)
    s.len += i

struct pub Seq[T]:
  data: &var T
  len: int
  cap: int

attr inline
impl pub [T] Seq[T]:

  fun extend(s: &var Self, other: &Self):
    let new_len = s.len + other.len
    s.reserve(new_len)
    memcpy(
      s.get_unchecked_var(s.len) as &var u8, 
      other.get_unchecked(0) as &u8, 
      other.len * sizeof::[T]()
    )
    s.len = new_len

  fun reserve(s: &var Self, new_cap: int):
    if s.cap > new_cap:
      return
    s.data = realloc(s.data, new_cap * sizeof::[T]())
    s.cap = new_cap
  
  fun insert(s: &var Self, index: int, value: T):
    if index < 0 | index > s.len:
      panic("index out of range")
    s.push(value)

    memmove(
      s.get_unchecked_var(index + 1) as &var u8, 
      s.get_unchecked(index) as &u8, 
      (s.len - index) * sizeof::[T]()
    )

    s[index] = value
  
  fun remove(s: &var Self, index: int) -> T:
    s.assert_in_bounds(index)
    let value = s[index]

    memcpy(
      s.get_unchecked_var(index) as &var u8, 
      s.get_unchecked(index + 1) as &u8, 
      (s.len - index - 1) * sizeof::[T]()
    )

    s.len -= 1

    value
  
  fun push(s: &var Self, value: T):
    let new_len = s.len + 1
    if new_len > s.cap:
      s.cap = new_len * 2
      s.data = realloc(s.data as &var u8, s.cap * sizeof::[T]()) as &var T
      pass
    *s.get_unchecked(s.len) = value
    s.len = new_len
  
  fun pop(s: &var Self) -> Option[T]:
    if s.len == 0:
      return
    let value = *s.get_unchecked(s.len - 1)
    s.len -= 1
    Option::some(value)
  
  fun get(s: &Self, index: int) -> Option[&T]:
    if !s.in_bounds(index):
      return
    Option::some(s.get_unchecked(index))

  fun get_var(s: &var Self, index: int) -> Option[&var T]:
    if !s.in_bounds(index):
      return
    Option::some(s.get_unchecked_var(index))

  fun __index__(s: &Self, index: int) -> &T:
    s.assert_in_bounds(index)
    s.get_unchecked(index)
  
  fun __index_var__(s: &var Self, index: int) -> &var T:
    s.assert_in_bounds(index)
    s.get_unchecked_var(index)

  fun set_len(s: &var Self, new_len: int):
    if new_len > s.cap | new_len < 0:
      panic("invalid length, must be positive and less or equal to capacity")
    s.len = new_len
  
  fun get_unchecked(s: &Self, index: int) -> &T:
    (s.data as int + index * sizeof::[T]()) as &T
  
  fun get_unchecked_var(s: &var Self, index: int) -> &var T:
    (s.data as int + index * sizeof::[T]()) as &var T

  fun assert_in_bounds(s: &Self, index: int):
    if !s.in_bounds(index):
      panic("index out of bounds")
  
  fun in_bounds(s: &Self, index: int) -> bool:
    index >= 0 & index < s.len
  
struct pub Option[T]:
  priv value: T
  priv is_some: bool

attr inline
impl pub [T] Option[T]:
  fun some(value: T) -> Self:
    var option: Self
    option.value = value
    option.is_some = true
    option

  fun is_some(option: &Self) -> bool:
    option.is_some

  fun is_none(option: &Self) -> bool:
    !option.is_some

  fun get(option: &Self) -> &T:
    if option.is_some:
      &option.value
    else:
      panic("no value in option")
  
  fun get_var(option: &var Self) -> &var T:
    if option.is_some:
      &var option.value
    else:
      panic("no value in option")

  fun unwrap(option: Self) -> T:
    if option.is_some:
      option.value
    else:
      panic("no value in option")
  
  fun get_unchecked(option: &Self) -> &T:
    &option.value
  
  fun get_unchecked_var(option: &var Self) -> &var T:
    &var option.value
  
  fun unwrap_unchecked(option: Self) -> T:
    option.value
  
struct pub StackFrame:
  pub line, column: int
  pub file: &u8

attr inline
fun pub assert(cond: bool):
  if !cond: panic("assertion failed")

##[
  interrupts the program with 1 exit code and prints 
  collected stacktrace if any, along with the message 
]#
attr terminating
fun pub panic(msg: &u8):
  print("panic: ")
  print(msg)
  print("\n")

  if stacktrace.len == 0:
    print("no stacktrace available, use '-trace' when building to generate stacktrace\n")
    exit(1)
    return

  var 
    buffer: Seq[u8]
    i: int
  
  for:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  buffer.push('\0'.u8())

  print(buffer.data)

  exit(1)

fun pub push_frame(line, column: int, file: &u8):
  var frame: StackFrame
  frame.line = line
  frame.column = column
  frame.file = file
  stacktrace.push(frame)

fun pub pop_frame:
  stacktrace.pop()

attr push(linkage(import), call_conv(platform))

attr linkage(import, malloc)
fun pub alloc(size: int) -> &var u8

fun pub realloc(ptr: &var u8, size: int) -> &var u8

fun pub free(ptr: &var u8)

fun pub putchar(c: u32)

fun pub memset(ptr: &var u8, value: u8, size: int)

fun pub memmove(dest: &var u8, src: &u8, size: int)

fun pub memcpy(dest: &var u8, src: &u8, size: int)

fun pub log10(x: f64) -> f64

fun pub ceil(x: f64) -> f64

attr linkage(import, printf)
fun pub print(str: &u8)

fun pub exit(code: int)

attr pop()