use 
  hello "main/module"

struct Bogus

break

struct Focus:
  a, b, c: Bogus
  priv f: &Focus
  pub embed gro: Gro

struct Gro:
  s, t, u: i32

struct IntOption:
  gua: (Gro, Bogus, (int, int), (Focus, Focus, (int,)))
  o: hello::Option[int]

struct SomeArray:
  a: [int, 8 * 10]

struct Interface:
  value: uint
  add: fun(uint)
  sub: fun(uint)
  mul: fun(uint)
  div: fun(uint)
  get: fun -> uint

struct Cool: 
  g: Goof[Interface]
  f: StackFrame

bound Empty

impl Empty for f32

bound Bound embed Empty + Empty:
  fun setter(s: &var Self, b: int)
  fun call_conv windows_fastcall
  fun mul(s: &var Self, b: int) -> int
  fun div(b, c: int) -> int
  fun get(s: &Self) -> (int, int)

impl f32:
  fun something_implemented(s: &var Self, b: int):
    pass

impl Bound for int:
  setter = something_implemented
  
  fun call_conv windows_fastcall:
    pass
  
  fun mul(s: &var Self, b: int) -> int:
    return *s *= b
  
  fun div(b, c: int) -> int:
    return b / c
  
  fun get(s: &Self) -> (int, int):
    return (*s, *s)