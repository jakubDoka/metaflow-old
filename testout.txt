Ok(Arguments { _filename: "file", hash: ID(0), flags: ["flag", "flag"], field_flags: [("flag", "value")], args: ["arg", "arg"] })
Ok(Arguments { _filename: "file", hash: ID(0), flags: [], field_flags: [], args: ["string value"] })
|> 2:1:text_code.mf
| var something = [1, 2, 3]
| ^
|> 2:4:text_code.mf
| var something = [1, 2, 3]
| ^^^
|> 2:14:text_code.mf
| var something = [1, 2, 3]
|     ^^^^^^^^^
|> 2:16:text_code.mf
| var something = [1, 2, 3]
|               ^
|> 2:18:text_code.mf
| var something = [1, 2, 3]
|                 ^
|> 2:19:text_code.mf
| var something = [1, 2, 3]
|                  ^
|> 2:20:text_code.mf
| var something = [1, 2, 3]
|                   ^
|> 2:22:text_code.mf
| var something = [1, 2, 3]
|                     ^
|> 2:23:text_code.mf
| var something = [1, 2, 3]
|                      ^
|> 2:25:text_code.mf
| var something = [1, 2, 3]
|                        ^
|> 2:26:text_code.mf
| var something = [1, 2, 3]
|                         ^
|> 3:1:text_code.mf
| let hello = "hello"
| ^
|> 3:4:text_code.mf
| let hello = "hello"
| ^^^
|> 3:10:text_code.mf
| let hello = "hello"
|     ^^^^^
|> 3:12:text_code.mf
| let hello = "hello"
|           ^
|> 3:20:text_code.mf
| let hello = "hello"
|             ^^^^^^^
|> 4:2:text_code.mf
| 
| ^
|> 5:1:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
| ^
|> 5:4:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
| ^^^
|> 5:21:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|     ^^^^^^^^^^^^^^^^
|> 5:22:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                     ^
|> 5:23:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                      ^
|> 5:24:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                       ^
|> 5:28:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                         ^^^
|> 5:29:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                            ^
|> 5:31:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                              ^
|> 5:32:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                               ^
|> 5:36:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                 ^^^
|> 5:37:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                    ^
|> 5:40:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                      ^^
|> 5:44:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                         ^^^
|> 5:45:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                            ^
|> 6:3:text_code.mf
|   return a + b
| ^^
|> 6:9:text_code.mf
|   return a + b
|   ^^^^^^
|> 6:11:text_code.mf
|   return a + b
|          ^
|> 6:13:text_code.mf
|   return a + b
|            ^
|> 6:15:text_code.mf
|   return a + b
|              ^
|> 7:2:text_code.mf
| 
| ^
|> 8:1:text_code.mf
| ## doc comment
| ^
|> 8:16:text_code.mf
| ## doc comment
| ^^^^^^^^^^^^^^
|> 9:1:text_code.mf
| fun something -> fun(int, int) -> int:
| ^
|> 9:4:text_code.mf
| fun something -> fun(int, int) -> int:
| ^^^
|> 9:14:text_code.mf
| fun something -> fun(int, int) -> int:
|     ^^^^^^^^^
|> 9:17:text_code.mf
| fun something -> fun(int, int) -> int:
|               ^^
|> 9:21:text_code.mf
| fun something -> fun(int, int) -> int:
|                  ^^^
|> 9:22:text_code.mf
| fun something -> fun(int, int) -> int:
|                     ^
|> 9:25:text_code.mf
| fun something -> fun(int, int) -> int:
|                      ^^^
|> 9:26:text_code.mf
| fun something -> fun(int, int) -> int:
|                         ^
|> 9:30:text_code.mf
| fun something -> fun(int, int) -> int:
|                           ^^^
|> 9:31:text_code.mf
| fun something -> fun(int, int) -> int:
|                              ^
|> 9:34:text_code.mf
| fun something -> fun(int, int) -> int:
|                                ^^
|> 9:38:text_code.mf
| fun something -> fun(int, int) -> int:
|                                   ^^^
|> 9:39:text_code.mf
| fun something -> fun(int, int) -> int:
|                                      ^
|> 10:3:text_code.mf
|   # ignored comment
| ^^
|> 11:3:text_code.mf
|   return #[ even more ignored comment ]# pointed_function
| ^^
|> 11:9:text_code.mf
|   return #[ even more ignored comment ]# pointed_function
|   ^^^^^^
|> 11:58:text_code.mf
|   return #[ even more ignored comment ]# pointed_function
|                                          ^^^^^^^^^^^^^^^^
|> 12:2:text_code.mf
| 
| ^
|> 13:1:text_code.mf
| ##[
| ^
|> 15:3:text_code.mf
| ##[
|   multiline doc comment
| ]#
| ^^^^^^^^^^^^^^^^^^^^^^^
|> 16:1:text_code.mf
| struct Scope
| ^
|> 16:7:text_code.mf
| struct Scope
| ^^^^^^
|> 16:13:text_code.mf
| struct Scope
|        ^^^^^
|> 17:2:text_code.mf
| 
| ^
|> 18:1:text_code.mf
| impl Scope:
| ^
|> 18:5:text_code.mf
| impl Scope:
| ^^^^
|> 18:11:text_code.mf
| impl Scope:
|      ^^^^^
|> 18:12:text_code.mf
| impl Scope:
|           ^
|> 19:3:text_code.mf
|   fun new -> Self:
| ^^
|> 19:6:text_code.mf
|   fun new -> Self:
|   ^^^
|> 19:10:text_code.mf
|   fun new -> Self:
|       ^^^
|> 19:13:text_code.mf
|   fun new -> Self:
|           ^^
|> 19:18:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 19:19:text_code.mf
|   fun new -> Self:
|                  ^
|> 20:5:text_code.mf
|     return
| ^^^^
|> 20:11:text_code.mf
|     return
|     ^^^^^^
|> 21:4:text_code.mf
|   
| ^^^
|> 22:3:text_code.mf
|   fun do_nothing(s: Self):
| ^^
|> 22:6:text_code.mf
|   fun do_nothing(s: Self):
|   ^^^
|> 22:17:text_code.mf
|   fun do_nothing(s: Self):
|       ^^^^^^^^^^
|> 22:18:text_code.mf
|   fun do_nothing(s: Self):
|                 ^
|> 22:19:text_code.mf
|   fun do_nothing(s: Self):
|                  ^
|> 22:20:text_code.mf
|   fun do_nothing(s: Self):
|                   ^
|> 22:25:text_code.mf
|   fun do_nothing(s: Self):
|                     ^^^^
|> 22:26:text_code.mf
|   fun do_nothing(s: Self):
|                         ^
|> 22:27:text_code.mf
|   fun do_nothing(s: Self):
|                          ^
|> 23:5:text_code.mf
|     pass
| ^^^^
|> 23:9:text_code.mf
|     pass
|     ^^^^
|> 24:2:text_code.mf
| 
| ^
|> 25:1:text_code.mf
| struct Template[T]
| ^
|> 25:7:text_code.mf
| struct Template[T]
| ^^^^^^
|> 25:16:text_code.mf
| struct Template[T]
|        ^^^^^^^^
|> 25:17:text_code.mf
| struct Template[T]
|                ^
|> 25:18:text_code.mf
| struct Template[T]
|                 ^
|> 25:19:text_code.mf
| struct Template[T]
|                  ^
|> 26:2:text_code.mf
| 
| ^
|> 27:1:text_code.mf
| impl[T] Template[T]:
| ^
|> 27:5:text_code.mf
| impl[T] Template[T]:
| ^^^^
|> 27:6:text_code.mf
| impl[T] Template[T]:
|     ^
|> 27:7:text_code.mf
| impl[T] Template[T]:
|      ^
|> 27:8:text_code.mf
| impl[T] Template[T]:
|       ^
|> 27:17:text_code.mf
| impl[T] Template[T]:
|         ^^^^^^^^
|> 27:18:text_code.mf
| impl[T] Template[T]:
|                 ^
|> 27:19:text_code.mf
| impl[T] Template[T]:
|                  ^
|> 27:20:text_code.mf
| impl[T] Template[T]:
|                   ^
|> 27:21:text_code.mf
| impl[T] Template[T]:
|                    ^
|> 28:3:text_code.mf
|   fun new -> Self:
| ^^
|> 28:6:text_code.mf
|   fun new -> Self:
|   ^^^
|> 28:10:text_code.mf
|   fun new -> Self:
|       ^^^
|> 28:13:text_code.mf
|   fun new -> Self:
|           ^^
|> 28:18:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 28:19:text_code.mf
|   fun new -> Self:
|                  ^
|> 29:5:text_code.mf
|     return
| ^^^^
|> 29:11:text_code.mf
|     return
|     ^^^^^^
|> 30:4:text_code.mf
|   
| ^^^
|> 31:3:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
| ^^
|> 31:6:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|   ^^^
|> 31:17:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|       ^^^^^^^^^^
|> 31:18:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                 ^
|> 31:19:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                  ^
|> 31:20:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                   ^
|> 31:25:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                     ^^^^
|> 31:26:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                         ^
|> 31:32:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                           ^^^^^
|> 31:33:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                ^
|> 31:35:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                  ^
|> 31:36:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                   ^
|> 31:39:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                     ^^
|> 31:41:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                        ^
|> 31:42:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                         ^
|> 32:5:text_code.mf
|     value
| ^^^^
|> 32:10:text_code.mf
|     value
|     ^^^^^
|> 33:2:text_code.mf
| 
| ^
|> 34:1:text_code.mf
| fun use_chain:
| ^
|> 34:4:text_code.mf
| fun use_chain:
| ^^^
|> 34:14:text_code.mf
| fun use_chain:
|     ^^^^^^^^^
|> 34:15:text_code.mf
| fun use_chain:
|              ^
|> 35:3:text_code.mf
|   module::Type::method::[param]()
| ^^
|> 35:9:text_code.mf
|   module::Type::method::[param]()
|   ^^^^^^
|> 35:11:text_code.mf
|   module::Type::method::[param]()
|         ^^
|> 35:15:text_code.mf
|   module::Type::method::[param]()
|           ^^^^
|> 35:17:text_code.mf
|   module::Type::method::[param]()
|               ^^
|> 35:23:text_code.mf
|   module::Type::method::[param]()
|                 ^^^^^^
|> 35:25:text_code.mf
|   module::Type::method::[param]()
|                       ^^
|> 35:26:text_code.mf
|   module::Type::method::[param]()
|                         ^
|> 35:31:text_code.mf
|   module::Type::method::[param]()
|                          ^^^^^
|> 35:32:text_code.mf
|   module::Type::method::[param]()
|                               ^
|> 35:33:text_code.mf
|   module::Type::method::[param]()
|                                ^
|> 35:34:text_code.mf
|   module::Type::method::[param]()
|                                 ^
|> 36:2:text_code.mf
| 
| ^
|> 37:1:text_code.mf
| fun flo: pass
| ^
|> 37:4:text_code.mf
| fun flo: pass
| ^^^
|> 37:8:text_code.mf
| fun flo: pass
|     ^^^
|> 37:9:text_code.mf
| fun flo: pass
|        ^
|> 37:14:text_code.mf
| fun flo: pass
|          ^^^^
|> 38:2:text_code.mf
| 
| ^
|> 39:1:text_code.mf
| fun foo(): pass
| ^
|> 39:4:text_code.mf
| fun foo(): pass
| ^^^
|> 39:8:text_code.mf
| fun foo(): pass
|     ^^^
|> 39:9:text_code.mf
| fun foo(): pass
|        ^
|> 39:10:text_code.mf
| fun foo(): pass
|         ^
|> 39:11:text_code.mf
| fun foo(): pass
|          ^
|> 39:16:text_code.mf
| fun foo(): pass
|            ^^^^
|> 40:2:text_code.mf
| 
| ^
|> 41:1:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^
|> 41:4:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^^^
|> 41:8:text_code.mf
| fun goo(a: i8, b: i8): pass
|     ^^^
|> 41:9:text_code.mf
| fun goo(a: i8, b: i8): pass
|        ^
|> 41:10:text_code.mf
| fun goo(a: i8, b: i8): pass
|         ^
|> 41:11:text_code.mf
| fun goo(a: i8, b: i8): pass
|          ^
|> 41:14:text_code.mf
| fun goo(a: i8, b: i8): pass
|            ^^
|> 41:15:text_code.mf
| fun goo(a: i8, b: i8): pass
|              ^
|> 41:17:text_code.mf
| fun goo(a: i8, b: i8): pass
|                ^
|> 41:18:text_code.mf
| fun goo(a: i8, b: i8): pass
|                 ^
|> 41:21:text_code.mf
| fun goo(a: i8, b: i8): pass
|                   ^^
|> 41:22:text_code.mf
| fun goo(a: i8, b: i8): pass
|                     ^
|> 41:23:text_code.mf
| fun goo(a: i8, b: i8): pass
|                      ^
|> 41:28:text_code.mf
| fun goo(a: i8, b: i8): pass
|                        ^^^^
|> 42:2:text_code.mf
| 
| ^
|> 43:1:text_code.mf
| fun loo:
| ^
|> 43:4:text_code.mf
| fun loo:
| ^^^
|> 43:8:text_code.mf
| fun loo:
|     ^^^
|> 43:9:text_code.mf
| fun loo:
|        ^
|> 44:3:text_code.mf
|   noo::loo::[i8]()
| ^^
|> 44:6:text_code.mf
|   noo::loo::[i8]()
|   ^^^
|> 44:8:text_code.mf
|   noo::loo::[i8]()
|      ^^
|> 44:11:text_code.mf
|   noo::loo::[i8]()
|        ^^^
|> 44:13:text_code.mf
|   noo::loo::[i8]()
|           ^^
|> 44:14:text_code.mf
|   noo::loo::[i8]()
|             ^
|> 44:16:text_code.mf
|   noo::loo::[i8]()
|              ^^
|> 44:17:text_code.mf
|   noo::loo::[i8]()
|                ^
|> 44:18:text_code.mf
|   noo::loo::[i8]()
|                 ^
|> 44:19:text_code.mf
|   noo::loo::[i8]()
|                  ^
|> 45:2:text_code.mf
| 
| ^
|> 46:3:text_code.mf
|   let array = [1, 2, 3]
| ^^
|> 46:6:text_code.mf
|   let array = [1, 2, 3]
|   ^^^
|> 46:12:text_code.mf
|   let array = [1, 2, 3]
|       ^^^^^
|> 46:14:text_code.mf
|   let array = [1, 2, 3]
|             ^
|> 46:16:text_code.mf
|   let array = [1, 2, 3]
|               ^
|> 46:17:text_code.mf
|   let array = [1, 2, 3]
|                ^
|> 46:18:text_code.mf
|   let array = [1, 2, 3]
|                 ^
|> 46:20:text_code.mf
|   let array = [1, 2, 3]
|                   ^
|> 46:21:text_code.mf
|   let array = [1, 2, 3]
|                    ^
|> 46:23:text_code.mf
|   let array = [1, 2, 3]
|                      ^
|> 46:24:text_code.mf
|   let array = [1, 2, 3]
|                       ^
|> 47:3:text_code.mf
|   array[0] = 3
| ^^
|> 47:8:text_code.mf
|   array[0] = 3
|   ^^^^^
|> 47:9:text_code.mf
|   array[0] = 3
|        ^
|> 47:10:text_code.mf
|   array[0] = 3
|         ^
|> 47:11:text_code.mf
|   array[0] = 3
|          ^
|> 47:13:text_code.mf
|   array[0] = 3
|            ^
|> 47:15:text_code.mf
|   array[0] = 3
|              ^
|> 48:3:text_code.mf
|   array[2] = always[1]
| ^^
|> 48:8:text_code.mf
|   array[2] = always[1]
|   ^^^^^
|> 48:9:text_code.mf
|   array[2] = always[1]
|        ^
|> 48:10:text_code.mf
|   array[2] = always[1]
|         ^
|> 48:11:text_code.mf
|   array[2] = always[1]
|          ^
|> 48:13:text_code.mf
|   array[2] = always[1]
|            ^
|> 48:20:text_code.mf
|   array[2] = always[1]
|              ^^^^^^
|> 48:21:text_code.mf
|   array[2] = always[1]
|                    ^
|> 48:22:text_code.mf
|   array[2] = always[1]
|                     ^
|> 48:23:text_code.mf
|   array[2] = always[1]
|                      ^
|> 49:3:text_code.mf
|   array[1] = 1
| ^^
|> 49:8:text_code.mf
|   array[1] = 1
|   ^^^^^
|> 49:9:text_code.mf
|   array[1] = 1
|        ^
|> 49:10:text_code.mf
|   array[1] = 1
|         ^
|> 49:11:text_code.mf
|   array[1] = 1
|          ^
|> 49:13:text_code.mf
|   array[1] = 1
|            ^
|> 49:15:text_code.mf
|   array[1] = 1
|              ^
|> 50:2:text_code.mf
| 
| ^
|> 51:3:text_code.mf
|   pass
| ^^
|> 51:7:text_code.mf
|   pass
|   ^^^^
|> 52:2:text_code.mf
| 
| ^
|> 53:1:text_code.mf
| fun main -> i64:
| ^
|> 53:4:text_code.mf
| fun main -> i64:
| ^^^
|> 53:9:text_code.mf
| fun main -> i64:
|     ^^^^
|> 53:12:text_code.mf
| fun main -> i64:
|          ^^
|> 53:16:text_code.mf
| fun main -> i64:
|             ^^^
|> 53:17:text_code.mf
| fun main -> i64:
|                ^
|> 54:3:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
| ^^
|> 54:9:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|   ^^^^^^
|> 54:12:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|          ^^
|> 54:14:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|             ^
|> 54:16:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|               ^
|> 54:18:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                 ^
|> 54:20:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                   ^
|> 54:22:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                     ^
|> 54:24:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                       ^
|> 54:26:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                         ^
|> 54:28:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                           ^
|> 55:2:text_code.mf
| 
| ^
|> 56:1:text_code.mf
| fun operator_stress_test -> i64:
| ^
|> 56:4:text_code.mf
| fun operator_stress_test -> i64:
| ^^^
|> 56:25:text_code.mf
| fun operator_stress_test -> i64:
|     ^^^^^^^^^^^^^^^^^^^^
|> 56:28:text_code.mf
| fun operator_stress_test -> i64:
|                          ^^
|> 56:32:text_code.mf
| fun operator_stress_test -> i64:
|                             ^^^
|> 56:33:text_code.mf
| fun operator_stress_test -> i64:
|                                ^
|> 57:3:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
| ^^
|> 57:9:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|   ^^^^^^
|> 57:12:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|          ^^
|> 57:14:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|             ^
|> 57:16:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|               ^
|> 57:18:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                 ^
|> 57:20:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                   ^
|> 57:22:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                     ^
|> 57:24:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                       ^
|> 57:26:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                         ^
|> 57:28:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                           ^
|> 57:30:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                             ^
|> 57:32:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                               ^
|> 57:34:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                 ^
|> 57:36:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                   ^
|> 57:39:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                     ^^
|> 57:41:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                        ^
|> 57:44:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                          ^^
|> 57:46:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                             ^
|> 57:50:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                               ^^^
|> 57:53:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                   ^^
|> 57:57:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                      ^^^
|> 57:60:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                          ^^
|> 58:2:text_code.mf
| 
| ^
|> 59:1:text_code.mf
| fun conditional -> i64:
| ^
|> 59:4:text_code.mf
| fun conditional -> i64:
| ^^^
|> 59:16:text_code.mf
| fun conditional -> i64:
|     ^^^^^^^^^^^
|> 59:19:text_code.mf
| fun conditional -> i64:
|                 ^^
|> 59:23:text_code.mf
| fun conditional -> i64:
|                    ^^^
|> 59:24:text_code.mf
| fun conditional -> i64:
|                       ^
|> 60:3:text_code.mf
|   if false:
| ^^
|> 60:5:text_code.mf
|   if false:
|   ^^
|> 60:11:text_code.mf
|   if false:
|      ^^^^^
|> 60:12:text_code.mf
|   if false:
|           ^
|> 61:5:text_code.mf
|     return 10
| ^^^^
|> 61:11:text_code.mf
|     return 10
|     ^^^^^^
|> 61:14:text_code.mf
|     return 10
|            ^^
|> 62:3:text_code.mf
|   elif true:
| ^^
|> 62:7:text_code.mf
|   elif true:
|   ^^^^
|> 62:12:text_code.mf
|   elif true:
|        ^^^^
|> 62:13:text_code.mf
|   elif true:
|            ^
|> 63:5:text_code.mf
|     return if true: 10 else: 20
| ^^^^
|> 63:11:text_code.mf
|     return if true: 10 else: 20
|     ^^^^^^
|> 63:14:text_code.mf
|     return if true: 10 else: 20
|            ^^
|> 63:19:text_code.mf
|     return if true: 10 else: 20
|               ^^^^
|> 63:20:text_code.mf
|     return if true: 10 else: 20
|                   ^
|> 63:23:text_code.mf
|     return if true: 10 else: 20
|                     ^^
|> 63:28:text_code.mf
|     return if true: 10 else: 20
|                        ^^^^
|> 63:29:text_code.mf
|     return if true: 10 else: 20
|                            ^
|> 63:32:text_code.mf
|     return if true: 10 else: 20
|                              ^^
|> 64:3:text_code.mf
|   else:
| ^^
|> 64:7:text_code.mf
|   else:
|   ^^^^
|> 64:8:text_code.mf
|   else:
|       ^
|> 65:5:text_code.mf
|     return 0
| ^^^^
|> 65:11:text_code.mf
|     return 0
|     ^^^^^^
|> 65:13:text_code.mf
|     return 0
|            ^
|> 66:2:text_code.mf
| 
| ^
|> 67:1:text_code.mf
| attr inline = always, call_conv = cold
| ^
|> 67:5:text_code.mf
| attr inline = always, call_conv = cold
| ^^^^
|> 67:12:text_code.mf
| attr inline = always, call_conv = cold
|      ^^^^^^
|> 67:14:text_code.mf
| attr inline = always, call_conv = cold
|             ^
|> 67:21:text_code.mf
| attr inline = always, call_conv = cold
|               ^^^^^^
|> 67:22:text_code.mf
| attr inline = always, call_conv = cold
|                     ^
|> 67:32:text_code.mf
| attr inline = always, call_conv = cold
|                       ^^^^^^^^^
|> 67:34:text_code.mf
| attr inline = always, call_conv = cold
|                                 ^
|> 67:39:text_code.mf
| attr inline = always, call_conv = cold
|                                   ^^^^
|> 68:1:text_code.mf
| fun inline_fn -> u32:
| ^
|> 68:4:text_code.mf
| fun inline_fn -> u32:
| ^^^
|> 68:14:text_code.mf
| fun inline_fn -> u32:
|     ^^^^^^^^^
|> 68:17:text_code.mf
| fun inline_fn -> u32:
|               ^^
|> 68:21:text_code.mf
| fun inline_fn -> u32:
|                  ^^^
|> 68:22:text_code.mf
| fun inline_fn -> u32:
|                     ^
|> 69:3:text_code.mf
|   return 10
| ^^
|> 69:9:text_code.mf
|   return 10
|   ^^^^^^
|> 69:12:text_code.mf
|   return 10
|          ^^
|> 70:2:text_code.mf
| 
| ^
|> 71:1:text_code.mf
| fun fib(v: i64) -> i64:
| ^
|> 71:4:text_code.mf
| fun fib(v: i64) -> i64:
| ^^^
|> 71:8:text_code.mf
| fun fib(v: i64) -> i64:
|     ^^^
|> 71:9:text_code.mf
| fun fib(v: i64) -> i64:
|        ^
|> 71:10:text_code.mf
| fun fib(v: i64) -> i64:
|         ^
|> 71:11:text_code.mf
| fun fib(v: i64) -> i64:
|          ^
|> 71:15:text_code.mf
| fun fib(v: i64) -> i64:
|            ^^^
|> 71:16:text_code.mf
| fun fib(v: i64) -> i64:
|               ^
|> 71:19:text_code.mf
| fun fib(v: i64) -> i64:
|                 ^^
|> 71:23:text_code.mf
| fun fib(v: i64) -> i64:
|                    ^^^
|> 71:24:text_code.mf
| fun fib(v: i64) -> i64:
|                       ^
|> 72:3:text_code.mf
|   return if v == 0 | v == 1:
| ^^
|> 72:9:text_code.mf
|   return if v == 0 | v == 1:
|   ^^^^^^
|> 72:12:text_code.mf
|   return if v == 0 | v == 1:
|          ^^
|> 72:14:text_code.mf
|   return if v == 0 | v == 1:
|             ^
|> 72:17:text_code.mf
|   return if v == 0 | v == 1:
|               ^^
|> 72:19:text_code.mf
|   return if v == 0 | v == 1:
|                  ^
|> 72:21:text_code.mf
|   return if v == 0 | v == 1:
|                    ^
|> 72:23:text_code.mf
|   return if v == 0 | v == 1:
|                      ^
|> 72:26:text_code.mf
|   return if v == 0 | v == 1:
|                        ^^
|> 72:28:text_code.mf
|   return if v == 0 | v == 1:
|                           ^
|> 72:29:text_code.mf
|   return if v == 0 | v == 1:
|                            ^
|> 73:5:text_code.mf
|     1
| ^^^^
|> 73:6:text_code.mf
|     1
|     ^
|> 74:3:text_code.mf
|   else:
| ^^
|> 74:7:text_code.mf
|   else:
|   ^^^^
|> 74:8:text_code.mf
|   else:
|       ^
|> 75:5:text_code.mf
|     fib(v - 1) + fib(v - 2)
| ^^^^
|> 75:8:text_code.mf
|     fib(v - 1) + fib(v - 2)
|     ^^^
|> 75:9:text_code.mf
|     fib(v - 1) + fib(v - 2)
|        ^
|> 75:10:text_code.mf
|     fib(v - 1) + fib(v - 2)
|         ^
|> 75:12:text_code.mf
|     fib(v - 1) + fib(v - 2)
|           ^
|> 75:14:text_code.mf
|     fib(v - 1) + fib(v - 2)
|             ^
|> 75:15:text_code.mf
|     fib(v - 1) + fib(v - 2)
|              ^
|> 75:17:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                ^
|> 75:21:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                  ^^^
|> 75:22:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                     ^
|> 75:23:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                      ^
|> 75:25:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                        ^
|> 75:27:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                          ^
|> 75:28:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                           ^
|> 76:2:text_code.mf
| 
| ^
|> 77:1:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^
|> 77:4:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^^^
|> 77:13:text_code.mf
| fun fib_loop(v: i64) -> i64:
|     ^^^^^^^^
|> 77:14:text_code.mf
| fun fib_loop(v: i64) -> i64:
|             ^
|> 77:15:text_code.mf
| fun fib_loop(v: i64) -> i64:
|              ^
|> 77:16:text_code.mf
| fun fib_loop(v: i64) -> i64:
|               ^
|> 77:20:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                 ^^^
|> 77:21:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                    ^
|> 77:24:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                      ^^
|> 77:28:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                         ^^^
|> 77:29:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                            ^
|> 78:3:text_code.mf
|   var a, b, c = 1
| ^^
|> 78:6:text_code.mf
|   var a, b, c = 1
|   ^^^
|> 78:8:text_code.mf
|   var a, b, c = 1
|       ^
|> 78:9:text_code.mf
|   var a, b, c = 1
|        ^
|> 78:11:text_code.mf
|   var a, b, c = 1
|          ^
|> 78:12:text_code.mf
|   var a, b, c = 1
|           ^
|> 78:14:text_code.mf
|   var a, b, c = 1
|             ^
|> 78:16:text_code.mf
|   var a, b, c = 1
|               ^
|> 78:18:text_code.mf
|   var a, b, c = 1
|                 ^
|> 79:3:text_code.mf
|   loop'a:
| ^^
|> 79:7:text_code.mf
|   loop'a:
|   ^^^^
|> 79:9:text_code.mf
|   loop'a:
|       ^^
|> 79:10:text_code.mf
|   loop'a:
|         ^
|> 80:5:text_code.mf
|     c = a + b
| ^^^^
|> 80:6:text_code.mf
|     c = a + b
|     ^
|> 80:8:text_code.mf
|     c = a + b
|       ^
|> 80:10:text_code.mf
|     c = a + b
|         ^
|> 80:12:text_code.mf
|     c = a + b
|           ^
|> 80:14:text_code.mf
|     c = a + b
|             ^
|> 81:5:text_code.mf
|     a = b
| ^^^^
|> 81:6:text_code.mf
|     a = b
|     ^
|> 81:8:text_code.mf
|     a = b
|       ^
|> 81:10:text_code.mf
|     a = b
|         ^
|> 82:5:text_code.mf
|     b = c
| ^^^^
|> 82:6:text_code.mf
|     b = c
|     ^
|> 82:8:text_code.mf
|     b = c
|       ^
|> 82:10:text_code.mf
|     b = c
|         ^
|> 83:5:text_code.mf
|     v = v - 1
| ^^^^
|> 83:6:text_code.mf
|     v = v - 1
|     ^
|> 83:8:text_code.mf
|     v = v - 1
|       ^
|> 83:10:text_code.mf
|     v = v - 1
|         ^
|> 83:12:text_code.mf
|     v = v - 1
|           ^
|> 83:14:text_code.mf
|     v = v - 1
|             ^
|> 84:5:text_code.mf
|     if v == 0:
| ^^^^
|> 84:7:text_code.mf
|     if v == 0:
|     ^^
|> 84:9:text_code.mf
|     if v == 0:
|        ^
|> 84:12:text_code.mf
|     if v == 0:
|          ^^
|> 84:14:text_code.mf
|     if v == 0:
|             ^
|> 84:15:text_code.mf
|     if v == 0:
|              ^
|> 85:7:text_code.mf
|       break'a
| ^^^^^^
|> 85:12:text_code.mf
|       break'a
|       ^^^^^
|> 85:14:text_code.mf
|       break'a
|            ^^
|> 86:3:text_code.mf
|   return c
| ^^
|> 86:9:text_code.mf
|   return c
|   ^^^^^^
|> 86:11:text_code.mf
|   return c
|          ^
|> 87:2:text_code.mf
| 
| ^
|> 88:1:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^
|> 88:4:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^^^
|> 88:20:text_code.mf
| fun unary_operators(a: i64) -> i64:
|     ^^^^^^^^^^^^^^^
|> 88:21:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                    ^
|> 88:22:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                     ^
|> 88:23:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                      ^
|> 88:27:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                        ^^^
|> 88:28:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                           ^
|> 88:31:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                             ^^
|> 88:35:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                ^^^
|> 88:36:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                   ^
|> 89:3:text_code.mf
|   return -a + ~a + !a + ++a + --a
| ^^
|> 89:9:text_code.mf
|   return -a + ~a + !a + ++a + --a
|   ^^^^^^
|> 89:11:text_code.mf
|   return -a + ~a + !a + ++a + --a
|          ^
|> 89:12:text_code.mf
|   return -a + ~a + !a + ++a + --a
|           ^
|> 89:14:text_code.mf
|   return -a + ~a + !a + ++a + --a
|             ^
|> 89:16:text_code.mf
|   return -a + ~a + !a + ++a + --a
|               ^
|> 89:17:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                ^
|> 89:19:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                  ^
|> 89:21:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                    ^
|> 89:22:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                     ^
|> 89:24:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                       ^
|> 89:27:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                         ^^
|> 89:28:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                           ^
|> 89:30:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                             ^
|> 89:33:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                               ^^
|> 89:34:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                                 ^
|> 90:2:text_code.mf
| 
| ^
|> 91:1:text_code.mf
| struct Foo:
| ^
|> 91:7:text_code.mf
| struct Foo:
| ^^^^^^
|> 91:11:text_code.mf
| struct Foo:
|        ^^^
|> 91:12:text_code.mf
| struct Foo:
|           ^
|> 92:3:text_code.mf
|   a, b, c: int
| ^^
|> 92:4:text_code.mf
|   a, b, c: int
|   ^
|> 92:5:text_code.mf
|   a, b, c: int
|    ^
|> 92:7:text_code.mf
|   a, b, c: int
|      ^
|> 92:8:text_code.mf
|   a, b, c: int
|       ^
|> 92:10:text_code.mf
|   a, b, c: int
|         ^
|> 92:11:text_code.mf
|   a, b, c: int
|          ^
|> 92:15:text_code.mf
|   a, b, c: int
|            ^^^
|> 93:2:text_code.mf
| 
| ^
|> 94:1:text_code.mf
| struct Goo:
| ^
|> 94:7:text_code.mf
| struct Goo:
| ^^^^^^
|> 94:11:text_code.mf
| struct Goo:
|        ^^^
|> 94:12:text_code.mf
| struct Goo:
|           ^
|> 95:3:text_code.mf
|   embed foo: Foo
| ^^
|> 95:8:text_code.mf
|   embed foo: Foo
|   ^^^^^
|> 95:12:text_code.mf
|   embed foo: Foo
|         ^^^
|> 95:13:text_code.mf
|   embed foo: Foo
|            ^
|> 95:17:text_code.mf
|   embed foo: Foo
|              ^^^
|> 96:3:text_code.mf
|   gva: int
| ^^
|> 96:6:text_code.mf
|   gva: int
|   ^^^
|> 96:7:text_code.mf
|   gva: int
|      ^
|> 96:11:text_code.mf
|   gva: int
|        ^^^
|> 97:2:text_code.mf
| 
| ^
|> 98:1:text_code.mf
| fun strings -> i64:
| ^
|> 98:4:text_code.mf
| fun strings -> i64:
| ^^^
|> 98:12:text_code.mf
| fun strings -> i64:
|     ^^^^^^^
|> 98:15:text_code.mf
| fun strings -> i64:
|             ^^
|> 98:19:text_code.mf
| fun strings -> i64:
|                ^^^
|> 98:20:text_code.mf
| fun strings -> i64:
|                   ^
|> 99:3:text_code.mf
|   var hello = "hello"
| ^^
|> 99:6:text_code.mf
|   var hello = "hello"
|   ^^^
|> 99:12:text_code.mf
|   var hello = "hello"
|       ^^^^^
|> 99:14:text_code.mf
|   var hello = "hello"
|             ^
|> 99:22:text_code.mf
|   var hello = "hello"
|               ^^^^^^^
|> 100:3:text_code.mf
|   return 0
| ^^
|> 100:9:text_code.mf
|   return 0
|   ^^^^^^
|> 100:11:text_code.mf
|   return 0
|          ^
|> 101:2:text_code.mf
| 
| ^
|> 102:1:text_code.mf
| fun mutable_ref(a: &Foo):
| ^
|> 102:4:text_code.mf
| fun mutable_ref(a: &Foo):
| ^^^
|> 102:16:text_code.mf
| fun mutable_ref(a: &Foo):
|     ^^^^^^^^^^^
|> 102:17:text_code.mf
| fun mutable_ref(a: &Foo):
|                ^
|> 102:18:text_code.mf
| fun mutable_ref(a: &Foo):
|                 ^
|> 102:19:text_code.mf
| fun mutable_ref(a: &Foo):
|                  ^
|> 102:21:text_code.mf
| fun mutable_ref(a: &Foo):
|                    ^
|> 102:24:text_code.mf
| fun mutable_ref(a: &Foo):
|                     ^^^
|> 102:25:text_code.mf
| fun mutable_ref(a: &Foo):
|                        ^
|> 102:26:text_code.mf
| fun mutable_ref(a: &Foo):
|                         ^
|> 103:3:text_code.mf
|   a.a = 10
| ^^
|> 103:4:text_code.mf
|   a.a = 10
|   ^
|> 103:5:text_code.mf
|   a.a = 10
|    ^
|> 103:6:text_code.mf
|   a.a = 10
|     ^
|> 103:8:text_code.mf
|   a.a = 10
|       ^
|> 103:11:text_code.mf
|   a.a = 10
|         ^^
|> 104:3:text_code.mf
|   a.b = 20
| ^^
|> 104:4:text_code.mf
|   a.b = 20
|   ^
|> 104:5:text_code.mf
|   a.b = 20
|    ^
|> 104:6:text_code.mf
|   a.b = 20
|     ^
|> 104:8:text_code.mf
|   a.b = 20
|       ^
|> 104:11:text_code.mf
|   a.b = 20
|         ^^
|> 105:3:text_code.mf
|   a.c = 30
| ^^
|> 105:4:text_code.mf
|   a.c = 30
|   ^
|> 105:5:text_code.mf
|   a.c = 30
|    ^
|> 105:6:text_code.mf
|   a.c = 30
|     ^
|> 105:8:text_code.mf
|   a.c = 30
|       ^
|> 105:11:text_code.mf
|   a.c = 30
|         ^^
|> 106:2:text_code.mf
| 
| ^
|> 107:1:text_code.mf
| fun some_string -> &u8:
| ^
|> 107:4:text_code.mf
| fun some_string -> &u8:
| ^^^
|> 107:16:text_code.mf
| fun some_string -> &u8:
|     ^^^^^^^^^^^
|> 107:19:text_code.mf
| fun some_string -> &u8:
|                 ^^
|> 107:21:text_code.mf
| fun some_string -> &u8:
|                    ^
|> 107:23:text_code.mf
| fun some_string -> &u8:
|                     ^^
|> 107:24:text_code.mf
| fun some_string -> &u8:
|                       ^
|> 108:3:text_code.mf
|   "
| ^^
|> 110:4:text_code.mf
|   "
| hello there
|   "
| ^^^^^^^^^^^
===global===
None
None
VarStatement(None, true) "var something = [1, 2, 3]":
 VarAssign "something = [1, 2, 3]":
  Group "something":
   Ident "something"
  None
  Group "=":
   Array "[":
    Lit "1"
    Lit "2"
    Lit "3"
===global===
None
None
VarStatement(None, false) "let hello = \"hello\"":
 VarAssign "hello = \"hello\"":
  Group "hello":
   Ident "hello"
  None
  Group "=":
   Lit "\"hello\""
===type===
Group "":
 Comment "##[\r\n  multiline doc comment\r\n]#"
StructDeclaration(None) "struct":
 Ident "Scope"
 None
===type===
None
StructDeclaration(None) "struct":
 Instantiation "Template[T]":
  Ident "Template"
  Ident "T"
 None
===type===
None
StructDeclaration(None) "struct":
 Ident "Foo"
 Group ":":
  StructField(None, false) "a, b, c: int":
   Ident "a"
   Ident "b"
   Ident "c"
   Ident "int"
===type===
None
StructDeclaration(None) "struct":
 Ident "Goo"
 Group ":":
  StructField(None, true) "foo: Foo":
   Ident "foo"
   Ident "Foo"
  StructField(None, false) "gva: int":
   Ident "gva"
   Ident "int"
===fun===
None
None
Fun(None) "fun pointed_function(a: Int, b: Int) -> int:\r\n  return a + b":
 FunHeader(Normal) "fun pointed_function(a: Int, b: Int) -> int":
  Ident "pointed_function"
  FunArgument(false) "a: Int":
   Ident "a"
   Ident "Int"
  FunArgument(false) "b: Int":
   Ident "b"
   Ident "Int"
  Ident "int"
  None
 Group ":":
  ReturnStatement "return a + b":
   BinaryOp "a + b":
    Ident "+"
    Ident "a"
    Ident "b"
===fun===
None
Group "":
 Comment "## doc comment\r"
Fun(None) "fun something -> fun(int, int) -> int:\r\n  # ignored comment\r\n  return #[ even more ignored comment ]# pointed_function":
 FunHeader(Normal) "fun something -> fun(int, int) -> int":
  Ident "something"
  FunHeader(Normal) "fun(int, int) -> int":
   None
   Ident "int"
   Ident "int"
   Ident "int"
   None
  None
 Group ":":
  ReturnStatement "return #[ even more ignored comment ]# pointed_function":
   Ident "pointed_function"
===fun===
Impl(None) "impl":
 None
 Ident "Scope"
None
Fun(None) "fun new -> Self:\r\n    return":
 FunHeader(Normal) "fun new -> Self":
  Ident "new"
  Ident "Self"
  None
 Group ":":
  ReturnStatement "return":
   None
===fun===
Impl(None) "impl":
 None
 Ident "Scope"
None
Fun(None) "fun do_nothing(s: Self):\r\n    pass":
 FunHeader(Normal) "fun do_nothing(s: Self)":
  Ident "do_nothing"
  FunArgument(false) "s: Self":
   Ident "s"
   Ident "Self"
  None
  None
 Group ":":
  Pass "pass"
===fun===
Impl(None) "impl":
 Group "[":
  Ident "T"
 Instantiation "Template[T]":
  Ident "Template"
  Ident "T"
None
Fun(None) "fun new -> Self:\r\n    return":
 FunHeader(Normal) "fun new -> Self":
  Ident "new"
  Ident "Self"
  None
 Group ":":
  ReturnStatement "return":
   None
===fun===
Impl(None) "impl":
 Group "[":
  Ident "T"
 Instantiation "Template[T]":
  Ident "Template"
  Ident "T"
None
Fun(None) "fun do_nothing(s: Self, value: T) -> T:\r\n    value":
 FunHeader(Normal) "fun do_nothing(s: Self, value: T) -> T":
  Ident "do_nothing"
  FunArgument(false) "s: Self":
   Ident "s"
   Ident "Self"
  FunArgument(false) "value: T":
   Ident "value"
   Ident "T"
  Ident "T"
  None
 Group ":":
  Ident "value"
===fun===
None
None
Fun(None) "fun use_chain:\r\n  module::Type::method::[param]()":
 FunHeader(Normal) "fun use_chain":
  Ident "use_chain"
  None
  None
 Group ":":
  Call(false) "module::Type::method::[param]()":
   Instantiation "module::Type::method::[param]":
    Path "module::Type::method":
     Ident "module"
     Ident "Type"
     Ident "method"
    Ident "param"
===fun===
None
None
Fun(None) "fun flo: pass":
 FunHeader(Normal) "fun flo":
  Ident "flo"
  None
  None
 Group ":":
  Pass "pass"
===fun===
None
None
Fun(None) "fun foo(): pass":
 FunHeader(Normal) "fun foo()":
  Ident "foo"
  None
  None
 Group ":":
  Pass "pass"
===fun===
None
None
Fun(None) "fun goo(a: i8, b: i8): pass":
 FunHeader(Normal) "fun goo(a: i8, b: i8)":
  Ident "goo"
  FunArgument(false) "a: i8":
   Ident "a"
   Ident "i8"
  FunArgument(false) "b: i8":
   Ident "b"
   Ident "i8"
  None
  None
 Group ":":
  Pass "pass"
===fun===
None
None
Fun(None) "fun loo:\r\n  noo::loo::[i8]()\r\n\r\n  let array = [1, 2, 3]\r\n  array[0] = 3\r\n  array[2] = always[1]\r\n  array[1] = 1\r\n\r\n  pass":
 FunHeader(Normal) "fun loo":
  Ident "loo"
  None
  None
 Group ":":
  Call(false) "noo::loo::[i8]()":
   Instantiation "noo::loo::[i8]":
    Path "noo::loo":
     Ident "noo"
     Ident "loo"
    Ident "i8"
  VarStatement(None, false) "let array = [1, 2, 3]":
   VarAssign "array = [1, 2, 3]":
    Group "array":
     Ident "array"
    None
    Group "=":
     Array "[":
      Lit "1"
      Lit "2"
      Lit "3"
  BinaryOp "array[0] = 3":
   Ident "="
   Index "array[0]":
    Ident "array"
    Lit "0"
   Lit "3"
  BinaryOp "array[2] = always[1]":
   Ident "="
   Index "array[2]":
    Ident "array"
    Lit "2"
   Index "always[1]":
    Ident "always"
    Lit "1"
  BinaryOp "array[1] = 1":
   Ident "="
   Index "array[1]":
    Ident "array"
    Lit "1"
   Lit "1"
  Pass "pass"
===fun===
None
None
Fun(None) "fun main -> i64:\r\n  return 10 + 4 - 2 * 1 + 8":
 FunHeader(Normal) "fun main -> i64":
  Ident "main"
  Ident "i64"
  None
 Group ":":
  ReturnStatement "return 10 + 4 - 2 * 1 + 8":
   BinaryOp "10 + 4 - 2 * 1 + 8":
    Ident "-"
    BinaryOp "10 + 4":
     Ident "+"
     Lit "10"
     Lit "4"
    BinaryOp "2 * 1 + 8":
     Ident "+"
     BinaryOp "2 * 1":
      Ident "*"
      Lit "2"
      Lit "1"
     Lit "8"
===fun===
None
None
Fun(None) "fun operator_stress_test -> i64:\r\n  return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
 FunHeader(Normal) "fun operator_stress_test -> i64":
  Ident "operator_stress_test"
  Ident "i64"
  None
 Group ":":
  ReturnStatement "return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
   BinaryOp "10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
    Ident "+"
    Lit "10"
    BinaryOp "2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
     Ident "|"
     BinaryOp "2 * 1 - 9":
      Ident "-"
      BinaryOp "2 * 1":
       Ident "*"
       Lit "2"
       Lit "1"
      Lit "9"
     BinaryOp "4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
      Ident "^"
      BinaryOp "4 & 1":
       Ident "&"
       Lit "4"
       Lit "1"
      BinaryOp "2 >> 1 << 7 min 20 max 10":
       Ident "max"
       BinaryOp "2 >> 1 << 7 min 20":
        Ident "min"
        BinaryOp "2 >> 1 << 7":
         Ident "<<"
         BinaryOp "2 >> 1":
          Ident ">>"
          Lit "2"
          Lit "1"
         Lit "7"
        Lit "20"
       Lit "10"
===fun===
None
None
Fun(None) "fun conditional -> i64:\r\n  if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
 FunHeader(Normal) "fun conditional -> i64":
  Ident "conditional"
  Ident "i64"
  None
 Group ":":
  IfExpr "if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
   Lit "false"
   Group ":":
    ReturnStatement "return 10":
     Lit "10"
   Group "elif":
    IfExpr "elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
     Lit "true"
     Group ":":
      ReturnStatement "return if true: 10 else: 20":
       IfExpr "if true: 10 else: 20":
        Lit "true"
        Group ":":
         Lit "10"
        Group ":":
         Lit "20"
     Group ":":
      ReturnStatement "return 0":
       Lit "0"
===fun===
None
Group "":
 AttributeAssign "inline = always":
  Ident "inline"
  Ident "always"
 AttributeAssign "call_conv = cold":
  Ident "call_conv"
  Ident "cold"
Fun(None) "fun inline_fn -> u32:\r\n  return 10":
 FunHeader(Normal) "fun inline_fn -> u32":
  Ident "inline_fn"
  Ident "u32"
  None
 Group ":":
  ReturnStatement "return 10":
   Lit "10"
===fun===
None
None
Fun(None) "fun fib(v: i64) -> i64:\r\n  return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
 FunHeader(Normal) "fun fib(v: i64) -> i64":
  Ident "fib"
  FunArgument(false) "v: i64":
   Ident "v"
   Ident "i64"
  Ident "i64"
  None
 Group ":":
  ReturnStatement "return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
   IfExpr "if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
    BinaryOp "v == 0 | v == 1":
     Ident "|"
     BinaryOp "v == 0":
      Ident "=="
      Ident "v"
      Lit "0"
     BinaryOp "v == 1":
      Ident "=="
      Ident "v"
      Lit "1"
    Group ":":
     Lit "1"
    Group ":":
     BinaryOp "fib(v - 1) + fib(v - 2)":
      Ident "+"
      Call(false) "fib(v - 1)":
       Ident "fib"
       BinaryOp "v - 1":
        Ident "-"
        Ident "v"
        Lit "1"
      Call(false) "fib(v - 2)":
       Ident "fib"
       BinaryOp "v - 2":
        Ident "-"
        Ident "v"
        Lit "2"
===fun===
None
None
Fun(None) "fun fib_loop(v: i64) -> i64:\r\n  var a, b, c = 1\r\n  loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r\n  return c":
 FunHeader(Normal) "fun fib_loop(v: i64) -> i64":
  Ident "fib_loop"
  FunArgument(false) "v: i64":
   Ident "v"
   Ident "i64"
  Ident "i64"
  None
 Group ":":
  VarStatement(None, true) "var a, b, c = 1":
   VarAssign "a, b, c = 1":
    Group "a":
     Ident "a"
     Ident "b"
     Ident "c"
    None
    Group "=":
     Lit "1"
     Ident "a"
     Ident "a"
  Loop "loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a":
   Ident "'a"
   Group ":":
    BinaryOp "c = a + b":
     Ident "="
     Ident "c"
     BinaryOp "a + b":
      Ident "+"
      Ident "a"
      Ident "b"
    BinaryOp "a = b":
     Ident "="
     Ident "a"
     Ident "b"
    BinaryOp "b = c":
     Ident "="
     Ident "b"
     Ident "c"
    BinaryOp "v = v - 1":
     Ident "="
     Ident "v"
     BinaryOp "v - 1":
      Ident "-"
      Ident "v"
      Lit "1"
    IfExpr "if v == 0:\r\n      break'a":
     BinaryOp "v == 0":
      Ident "=="
      Ident "v"
      Lit "0"
     Group ":":
      Break "break'a":
       Ident "'a"
       None
     None
  ReturnStatement "return c":
   Ident "c"
===fun===
None
None
Fun(None) "fun unary_operators(a: i64) -> i64:\r\n  return -a + ~a + !a + ++a + --a":
 FunHeader(Normal) "fun unary_operators(a: i64) -> i64":
  Ident "unary_operators"
  FunArgument(false) "a: i64":
   Ident "a"
   Ident "i64"
  Ident "i64"
  None
 Group ":":
  ReturnStatement "return -a + ~a + !a + ++a + --a":
   BinaryOp "-a + ~a + !a + ++a + --a":
    Ident "+"
    BinaryOp "-a + ~a + !a + ++a":
     Ident "+"
     BinaryOp "-a + ~a + !a":
      Ident "+"
      BinaryOp "-a + ~a":
       Ident "+"
       UnaryOp "-a":
        Ident "-"
        Ident "a"
       UnaryOp "~a":
        Ident "~"
        Ident "a"
      UnaryOp "!a":
       Ident "!"
       Ident "a"
     UnaryOp "++a":
      Ident "++"
      Ident "a"
    UnaryOp "--a":
     Ident "--"
     Ident "a"
===fun===
None
None
Fun(None) "fun strings -> i64:\r\n  var hello = \"hello\"\r\n  return 0":
 FunHeader(Normal) "fun strings -> i64":
  Ident "strings"
  Ident "i64"
  None
 Group ":":
  VarStatement(None, true) "var hello = \"hello\"":
   VarAssign "hello = \"hello\"":
    Group "hello":
     Ident "hello"
    None
    Group "=":
     Lit "\"hello\""
  ReturnStatement "return 0":
   Lit "0"
===fun===
None
None
Fun(None) "fun mutable_ref(a: &Foo):\r\n  a.a = 10\r\n  a.b = 20\r\n  a.c = 30":
 FunHeader(Normal) "fun mutable_ref(a: &Foo)":
  Ident "mutable_ref"
  FunArgument(false) "a: &Foo":
   Ident "a"
   Ref "&Foo":
    Ident "Foo"
  None
  None
 Group ":":
  BinaryOp "a.a = 10":
   Ident "="
   DotExpr "a.a":
    Ident "a"
    Ident "a"
   Lit "10"
  BinaryOp "a.b = 20":
   Ident "="
   DotExpr "a.b":
    Ident "a"
    Ident "b"
   Lit "20"
  BinaryOp "a.c = 30":
   Ident "="
   DotExpr "a.c":
    Ident "a"
    Ident "c"
   Lit "30"
===fun===
None
None
Fun(None) "fun some_string -> &u8:\r\n  \"\r\nhello there\r\n  \"":
 FunHeader(Normal) "fun some_string -> &u8":
  Ident "some_string"
  Ref "&u8":
   Ident "u8"
  None
 Group ":":
  Lit "\"\r\nhello there\r\n  \""
compiled code in 0.0034331s
output:
ok
ok
ok
ok
ok
ok
ok
ok
Hello, World!ok
ok
ok
ok
ok
ok
ok
ok

:end
