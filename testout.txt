Ok(Arguments { filename: "file", flags: ["flag", "flag"], field_flags: [("flag", "value")], args: ["arg", "arg"] })
Ok(Arguments { filename: "file", flags: [], field_flags: [], args: ["string value"] })
Token { kind: Fun, value: "fun", line_data: LineData { line: 1, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "flo", line_data: LineData { line: 1, column: 4, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 1, column: 7, file_name: "test_code.pmh" } }
Token { kind: Pass, value: "pass", line_data: LineData { line: 1, column: 9, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 1, column: 14, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 2, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, value: "fun", line_data: LineData { line: 3, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "foo", line_data: LineData { line: 3, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, value: "(", line_data: LineData { line: 3, column: 7, file_name: "test_code.pmh" } }
Token { kind: RPar, value: ")", line_data: LineData { line: 3, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 3, column: 9, file_name: "test_code.pmh" } }
Token { kind: Pass, value: "pass", line_data: LineData { line: 3, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 3, column: 16, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 4, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, value: "fun", line_data: LineData { line: 5, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "goo", line_data: LineData { line: 5, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, value: "(", line_data: LineData { line: 5, column: 7, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "a", line_data: LineData { line: 5, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 5, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i8", line_data: LineData { line: 5, column: 11, file_name: "test_code.pmh" } }
Token { kind: Comma, value: ",", line_data: LineData { line: 5, column: 13, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "b", line_data: LineData { line: 5, column: 15, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 5, column: 16, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i8", line_data: LineData { line: 5, column: 18, file_name: "test_code.pmh" } }
Token { kind: RPar, value: ")", line_data: LineData { line: 5, column: 20, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 5, column: 21, file_name: "test_code.pmh" } }
Token { kind: Pass, value: "pass", line_data: LineData { line: 5, column: 23, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 5, column: 28, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 6, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, value: "fun", line_data: LineData { line: 7, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "loo", line_data: LineData { line: 7, column: 4, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 7, column: 7, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 7, column: 9, file_name: "test_code.pmh" } }
Token { kind: Pass, value: "pass", line_data: LineData { line: 8, column: 2, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 8, column: 7, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 9, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, value: "fun", line_data: LineData { line: 10, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "main", line_data: LineData { line: 10, column: 4, file_name: "test_code.pmh" } }
Token { kind: RArrow, value: "->", line_data: LineData { line: 10, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i64", line_data: LineData { line: 10, column: 12, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 10, column: 15, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 10, column: 17, file_name: "test_code.pmh" } }
Token { kind: Return, value: "return", line_data: LineData { line: 11, column: 2, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), value: "10", line_data: LineData { line: 11, column: 9, file_name: "test_code.pmh" } }
Token { kind: Op, value: "+", line_data: LineData { line: 11, column: 12, file_name: "test_code.pmh" } }
Token { kind: Int(4, 64), value: "4", line_data: LineData { line: 11, column: 14, file_name: "test_code.pmh" } }
Token { kind: Op, value: "-", line_data: LineData { line: 11, column: 16, file_name: "test_code.pmh" } }
Token { kind: Int(2, 64), value: "2", line_data: LineData { line: 11, column: 18, file_name: "test_code.pmh" } }
Token { kind: Op, value: "*", line_data: LineData { line: 11, column: 20, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), value: "1", line_data: LineData { line: 11, column: 22, file_name: "test_code.pmh" } }
Token { kind: Op, value: "+", line_data: LineData { line: 11, column: 24, file_name: "test_code.pmh" } }
Token { kind: Int(8, 64), value: "8", line_data: LineData { line: 11, column: 26, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 11, column: 28, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 12, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, value: "fun", line_data: LineData { line: 13, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "operator_stress_test", line_data: LineData { line: 13, column: 4, file_name: "test_code.pmh" } }
Token { kind: RArrow, value: "->", line_data: LineData { line: 13, column: 25, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i64", line_data: LineData { line: 13, column: 28, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 13, column: 31, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 13, column: 33, file_name: "test_code.pmh" } }
Token { kind: Return, value: "return", line_data: LineData { line: 14, column: 2, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), value: "10", line_data: LineData { line: 14, column: 9, file_name: "test_code.pmh" } }
Token { kind: Op, value: "+", line_data: LineData { line: 14, column: 12, file_name: "test_code.pmh" } }
Token { kind: Int(2, 64), value: "2", line_data: LineData { line: 14, column: 14, file_name: "test_code.pmh" } }
Token { kind: Op, value: "*", line_data: LineData { line: 14, column: 16, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), value: "1", line_data: LineData { line: 14, column: 18, file_name: "test_code.pmh" } }
Token { kind: Op, value: "-", line_data: LineData { line: 14, column: 20, file_name: "test_code.pmh" } }
Token { kind: Int(9, 64), value: "9", line_data: LineData { line: 14, column: 22, file_name: "test_code.pmh" } }
Token { kind: Op, value: "|", line_data: LineData { line: 14, column: 24, file_name: "test_code.pmh" } }
Token { kind: Int(4, 64), value: "4", line_data: LineData { line: 14, column: 26, file_name: "test_code.pmh" } }
Token { kind: Op, value: "&", line_data: LineData { line: 14, column: 28, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), value: "1", line_data: LineData { line: 14, column: 30, file_name: "test_code.pmh" } }
Token { kind: Op, value: "^", line_data: LineData { line: 14, column: 32, file_name: "test_code.pmh" } }
Token { kind: Int(2, 64), value: "2", line_data: LineData { line: 14, column: 34, file_name: "test_code.pmh" } }
Token { kind: Op, value: ">>", line_data: LineData { line: 14, column: 36, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), value: "1", line_data: LineData { line: 14, column: 39, file_name: "test_code.pmh" } }
Token { kind: Op, value: "<<", line_data: LineData { line: 14, column: 41, file_name: "test_code.pmh" } }
Token { kind: Int(7, 64), value: "7", line_data: LineData { line: 14, column: 44, file_name: "test_code.pmh" } }
Token { kind: Op, value: "min", line_data: LineData { line: 14, column: 46, file_name: "test_code.pmh" } }
Token { kind: Int(20, 64), value: "20", line_data: LineData { line: 14, column: 50, file_name: "test_code.pmh" } }
Token { kind: Op, value: "max", line_data: LineData { line: 14, column: 53, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), value: "10", line_data: LineData { line: 14, column: 57, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 14, column: 60, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 15, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, value: "fun", line_data: LineData { line: 16, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "conditional", line_data: LineData { line: 16, column: 4, file_name: "test_code.pmh" } }
Token { kind: RArrow, value: "->", line_data: LineData { line: 16, column: 16, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i64", line_data: LineData { line: 16, column: 19, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 16, column: 22, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 16, column: 24, file_name: "test_code.pmh" } }
Token { kind: If, value: "if", line_data: LineData { line: 17, column: 2, file_name: "test_code.pmh" } }
Token { kind: Bool(false), value: "false", line_data: LineData { line: 17, column: 5, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 17, column: 10, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 17, column: 12, file_name: "test_code.pmh" } }
Token { kind: Return, value: "return", line_data: LineData { line: 18, column: 4, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), value: "10", line_data: LineData { line: 18, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 18, column: 14, file_name: "test_code.pmh" } }
Token { kind: Elif, value: "elif", line_data: LineData { line: 19, column: 2, file_name: "test_code.pmh" } }
Token { kind: Bool(true), value: "true", line_data: LineData { line: 19, column: 7, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 19, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 19, column: 13, file_name: "test_code.pmh" } }
Token { kind: Return, value: "return", line_data: LineData { line: 20, column: 4, file_name: "test_code.pmh" } }
Token { kind: If, value: "if", line_data: LineData { line: 20, column: 11, file_name: "test_code.pmh" } }
Token { kind: Bool(true), value: "true", line_data: LineData { line: 20, column: 14, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 20, column: 18, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), value: "10", line_data: LineData { line: 20, column: 20, file_name: "test_code.pmh" } }
Token { kind: Else, value: "else", line_data: LineData { line: 20, column: 23, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 20, column: 27, file_name: "test_code.pmh" } }
Token { kind: Int(20, 64), value: "20", line_data: LineData { line: 20, column: 29, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 20, column: 32, file_name: "test_code.pmh" } }
Token { kind: Else, value: "else", line_data: LineData { line: 21, column: 2, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 21, column: 6, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 21, column: 8, file_name: "test_code.pmh" } }
Token { kind: Return, value: "return", line_data: LineData { line: 22, column: 4, file_name: "test_code.pmh" } }
Token { kind: Int(0, 64), value: "0", line_data: LineData { line: 22, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 22, column: 13, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 23, column: 1, file_name: "test_code.pmh" } }
Token { kind: Attr, value: "attr", line_data: LineData { line: 24, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "inline", line_data: LineData { line: 24, column: 5, file_name: "test_code.pmh" } }
Token { kind: Op, value: "=", line_data: LineData { line: 24, column: 12, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "always", line_data: LineData { line: 24, column: 14, file_name: "test_code.pmh" } }
Token { kind: Comma, value: ",", line_data: LineData { line: 24, column: 20, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "call_conv", line_data: LineData { line: 24, column: 22, file_name: "test_code.pmh" } }
Token { kind: Op, value: "=", line_data: LineData { line: 24, column: 32, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "cold", line_data: LineData { line: 24, column: 34, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 24, column: 39, file_name: "test_code.pmh" } }
Token { kind: Fun, value: "fun", line_data: LineData { line: 25, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "inline_fn", line_data: LineData { line: 25, column: 4, file_name: "test_code.pmh" } }
Token { kind: RArrow, value: "->", line_data: LineData { line: 25, column: 14, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "u32", line_data: LineData { line: 25, column: 17, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 25, column: 20, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 25, column: 22, file_name: "test_code.pmh" } }
Token { kind: Return, value: "return", line_data: LineData { line: 26, column: 2, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), value: "10", line_data: LineData { line: 26, column: 9, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 26, column: 12, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 27, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, value: "fun", line_data: LineData { line: 28, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "fib", line_data: LineData { line: 28, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, value: "(", line_data: LineData { line: 28, column: 7, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "v", line_data: LineData { line: 28, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 28, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i64", line_data: LineData { line: 28, column: 11, file_name: "test_code.pmh" } }
Token { kind: RPar, value: ")", line_data: LineData { line: 28, column: 14, file_name: "test_code.pmh" } }
Token { kind: RArrow, value: "->", line_data: LineData { line: 28, column: 16, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i64", line_data: LineData { line: 28, column: 19, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 28, column: 22, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 28, column: 24, file_name: "test_code.pmh" } }
Token { kind: Return, value: "return", line_data: LineData { line: 29, column: 2, file_name: "test_code.pmh" } }
Token { kind: If, value: "if", line_data: LineData { line: 29, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "v", line_data: LineData { line: 29, column: 12, file_name: "test_code.pmh" } }
Token { kind: Op, value: "==", line_data: LineData { line: 29, column: 14, file_name: "test_code.pmh" } }
Token { kind: Int(0, 64), value: "0", line_data: LineData { line: 29, column: 17, file_name: "test_code.pmh" } }
Token { kind: Op, value: "|", line_data: LineData { line: 29, column: 19, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "v", line_data: LineData { line: 29, column: 21, file_name: "test_code.pmh" } }
Token { kind: Op, value: "==", line_data: LineData { line: 29, column: 23, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), value: "1", line_data: LineData { line: 29, column: 26, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 29, column: 27, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 29, column: 29, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), value: "1", line_data: LineData { line: 30, column: 4, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 30, column: 6, file_name: "test_code.pmh" } }
Token { kind: Else, value: "else", line_data: LineData { line: 31, column: 2, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 31, column: 6, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 31, column: 8, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "fib", line_data: LineData { line: 32, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, value: "(", line_data: LineData { line: 32, column: 7, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "v", line_data: LineData { line: 32, column: 8, file_name: "test_code.pmh" } }
Token { kind: Op, value: "-", line_data: LineData { line: 32, column: 10, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), value: "1", line_data: LineData { line: 32, column: 12, file_name: "test_code.pmh" } }
Token { kind: RPar, value: ")", line_data: LineData { line: 32, column: 13, file_name: "test_code.pmh" } }
Token { kind: Op, value: "+", line_data: LineData { line: 32, column: 15, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "fib", line_data: LineData { line: 32, column: 17, file_name: "test_code.pmh" } }
Token { kind: LPar, value: "(", line_data: LineData { line: 32, column: 20, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "v", line_data: LineData { line: 32, column: 21, file_name: "test_code.pmh" } }
Token { kind: Op, value: "-", line_data: LineData { line: 32, column: 23, file_name: "test_code.pmh" } }
Token { kind: Int(2, 64), value: "2", line_data: LineData { line: 32, column: 25, file_name: "test_code.pmh" } }
Token { kind: RPar, value: ")", line_data: LineData { line: 32, column: 26, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 32, column: 28, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 33, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, value: "fun", line_data: LineData { line: 34, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "fib_loop", line_data: LineData { line: 34, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, value: "(", line_data: LineData { line: 34, column: 12, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "v", line_data: LineData { line: 34, column: 13, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 34, column: 14, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i64", line_data: LineData { line: 34, column: 16, file_name: "test_code.pmh" } }
Token { kind: RPar, value: ")", line_data: LineData { line: 34, column: 19, file_name: "test_code.pmh" } }
Token { kind: RArrow, value: "->", line_data: LineData { line: 34, column: 21, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i64", line_data: LineData { line: 34, column: 24, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 34, column: 27, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 34, column: 29, file_name: "test_code.pmh" } }
Token { kind: Var, value: "var", line_data: LineData { line: 35, column: 2, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "a", line_data: LineData { line: 35, column: 6, file_name: "test_code.pmh" } }
Token { kind: Comma, value: ",", line_data: LineData { line: 35, column: 7, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "b", line_data: LineData { line: 35, column: 9, file_name: "test_code.pmh" } }
Token { kind: Comma, value: ",", line_data: LineData { line: 35, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "c", line_data: LineData { line: 35, column: 12, file_name: "test_code.pmh" } }
Token { kind: Op, value: "=", line_data: LineData { line: 35, column: 14, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), value: "1", line_data: LineData { line: 35, column: 16, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 35, column: 18, file_name: "test_code.pmh" } }
Token { kind: Loop, value: "loop", line_data: LineData { line: 36, column: 2, file_name: "test_code.pmh" } }
Token { kind: Label, value: "'a", line_data: LineData { line: 36, column: 6, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 36, column: 8, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 36, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "c", line_data: LineData { line: 37, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, value: "=", line_data: LineData { line: 37, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "a", line_data: LineData { line: 37, column: 8, file_name: "test_code.pmh" } }
Token { kind: Op, value: "+", line_data: LineData { line: 37, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "b", line_data: LineData { line: 37, column: 12, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 37, column: 14, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "a", line_data: LineData { line: 38, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, value: "=", line_data: LineData { line: 38, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "b", line_data: LineData { line: 38, column: 8, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 38, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "b", line_data: LineData { line: 39, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, value: "=", line_data: LineData { line: 39, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "c", line_data: LineData { line: 39, column: 8, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 39, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "v", line_data: LineData { line: 40, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, value: "=", line_data: LineData { line: 40, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "v", line_data: LineData { line: 40, column: 8, file_name: "test_code.pmh" } }
Token { kind: Op, value: "-", line_data: LineData { line: 40, column: 10, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), value: "1", line_data: LineData { line: 40, column: 12, file_name: "test_code.pmh" } }
Token { kind: Indent(2), value: "\n    ", line_data: LineData { line: 40, column: 14, file_name: "test_code.pmh" } }
Token { kind: If, value: "if", line_data: LineData { line: 41, column: 4, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "v", line_data: LineData { line: 41, column: 7, file_name: "test_code.pmh" } }
Token { kind: Op, value: "==", line_data: LineData { line: 41, column: 9, file_name: "test_code.pmh" } }
Token { kind: Int(0, 64), value: "0", line_data: LineData { line: 41, column: 12, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 41, column: 13, file_name: "test_code.pmh" } }
Token { kind: Indent(3), value: "\n      ", line_data: LineData { line: 41, column: 15, file_name: "test_code.pmh" } }
Token { kind: Break, value: "break", line_data: LineData { line: 42, column: 6, file_name: "test_code.pmh" } }
Token { kind: Label, value: "'a", line_data: LineData { line: 42, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 42, column: 14, file_name: "test_code.pmh" } }
Token { kind: Return, value: "return", line_data: LineData { line: 43, column: 2, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "c", line_data: LineData { line: 43, column: 9, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 43, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 44, column: 1, file_name: "test_code.pmh" } }
Token { kind: Struct, value: "struct", line_data: LineData { line: 45, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "Foo", line_data: LineData { line: 45, column: 7, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 45, column: 10, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 45, column: 12, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "a", line_data: LineData { line: 46, column: 2, file_name: "test_code.pmh" } }
Token { kind: Comma, value: ",", line_data: LineData { line: 46, column: 3, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "b", line_data: LineData { line: 46, column: 5, file_name: "test_code.pmh" } }
Token { kind: Comma, value: ",", line_data: LineData { line: 46, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "c", line_data: LineData { line: 46, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 46, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i64", line_data: LineData { line: 46, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 46, column: 15, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n", line_data: LineData { line: 47, column: 1, file_name: "test_code.pmh" } }
Token { kind: Struct, value: "struct", line_data: LineData { line: 48, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "Goo", line_data: LineData { line: 48, column: 7, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 48, column: 10, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 48, column: 12, file_name: "test_code.pmh" } }
Token { kind: Embed, value: "embed", line_data: LineData { line: 49, column: 2, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "foo", line_data: LineData { line: 49, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 49, column: 11, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "Foo", line_data: LineData { line: 49, column: 13, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 49, column: 17, file_name: "test_code.pmh" } }
Token { kind: Attr, value: "attr", line_data: LineData { line: 50, column: 2, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "something", line_data: LineData { line: 50, column: 7, file_name: "test_code.pmh" } }
Token { kind: Indent(1), value: "\n  ", line_data: LineData { line: 50, column: 17, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "gva", line_data: LineData { line: 51, column: 2, file_name: "test_code.pmh" } }
Token { kind: Colon, value: ":", line_data: LineData { line: 51, column: 5, file_name: "test_code.pmh" } }
Token { kind: Ident, value: "i64", line_data: LineData { line: 51, column: 7, file_name: "test_code.pmh" } }
Token { kind: Indent(0), value: "\n\r", line_data: LineData { line: 51, column: 11, file_name: "test_code.pmh" } }
Group 'fun' "fun":
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "flo"
   None end of file ""
  Group ':' ":"
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "foo"
   None end of file ""
  Group ':' ":"
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "goo"
   FunctionArgument(false) identifier "a":
    Identifier identifier "a"
    Identifier identifier "i8"
   FunctionArgument(false) identifier "b":
    Identifier identifier "b"
    Identifier identifier "i8"
   None end of file ""
  Group ':' ":"
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "loo"
   None end of file ""
  Group ':' ":"
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "main"
   Identifier identifier "i64"
  Group ':' ":":
   ReturnStatement 'return' "return":
    BinaryOperation operator "-":
     Identifier operator "-"
     BinaryOperation operator "+":
      Identifier operator "+"
      Literal integer "10"
      Literal integer "4"
     BinaryOperation operator "+":
      Identifier operator "+"
      BinaryOperation operator "*":
       Identifier operator "*"
       Literal integer "2"
       Literal integer "1"
      Literal integer "8"
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "operator_stress_test"
   Identifier identifier "i64"
  Group ':' ":":
   ReturnStatement 'return' "return":
    BinaryOperation operator "+":
     Identifier operator "+"
     Literal integer "10"
     BinaryOperation operator "|":
      Identifier operator "|"
      BinaryOperation operator "-":
       Identifier operator "-"
       BinaryOperation operator "*":
        Identifier operator "*"
        Literal integer "2"
        Literal integer "1"
       Literal integer "9"
      BinaryOperation operator "^":
       Identifier operator "^"
       BinaryOperation operator "&":
        Identifier operator "&"
        Literal integer "4"
        Literal integer "1"
       BinaryOperation operator "max":
        Identifier operator "max"
        BinaryOperation operator "min":
         Identifier operator "min"
         BinaryOperation operator "<<":
          Identifier operator "<<"
          BinaryOperation operator ">>":
           Identifier operator ">>"
           Literal integer "2"
           Literal integer "1"
          Literal integer "7"
         Literal integer "20"
        Literal integer "10"
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "conditional"
   Identifier identifier "i64"
  Group ':' ":":
   IfExpression 'if' "if":
    Literal boolean "false"
    Group ':' ":":
     ReturnStatement 'return' "return":
      Literal integer "10"
    Group 'elif' "elif":
     IfExpression 'elif' "elif":
      Literal boolean "true"
      Group ':' ":":
       ReturnStatement 'return' "return":
        IfExpression 'if' "if":
         Literal boolean "true"
         Group ':' ":":
          Literal integer "10"
         Group ':' ":":
          Literal integer "20"
      Group ':' ":":
       ReturnStatement 'return' "return":
        Literal integer "0"
 Attribute 'attr' "attr":
  AttributeAssign identifier "inline":
   Identifier identifier "always"
  AttributeAssign identifier "call_conv":
   Identifier identifier "cold"
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "inline_fn"
   Identifier identifier "u32"
  Group ':' ":":
   ReturnStatement 'return' "return":
    Literal integer "10"
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "fib"
   FunctionArgument(false) identifier "v":
    Identifier identifier "v"
    Identifier identifier "i64"
   Identifier identifier "i64"
  Group ':' ":":
   ReturnStatement 'return' "return":
    IfExpression 'if' "if":
     BinaryOperation operator "|":
      Identifier operator "|"
      BinaryOperation operator "==":
       Identifier operator "=="
       Identifier identifier "v"
       Literal integer "0"
      BinaryOperation operator "==":
       Identifier operator "=="
       Identifier identifier "v"
       Literal integer "1"
     Group ':' ":":
      Literal integer "1"
     Group ':' ":":
      BinaryOperation operator "+":
       Identifier operator "+"
       Call '(' "(":
        Identifier identifier "fib"
        BinaryOperation operator "-":
         Identifier operator "-"
         Identifier identifier "v"
         Literal integer "1"
       Call '(' "(":
        Identifier identifier "fib"
        BinaryOperation operator "-":
         Identifier operator "-"
         Identifier identifier "v"
         Literal integer "2"
 Function 'fun' "fun":
  FunctionHeader 'fun' "fun":
   Identifier identifier "fib_loop"
   FunctionArgument(false) identifier "v":
    Identifier identifier "v"
    Identifier identifier "i64"
   Identifier identifier "i64"
  Group ':' ":":
   VarStatement(true) 'var' "var":
    VarAssign identifier "a":
     Group identifier "a":
      Identifier identifier "a"
      Identifier identifier "b"
      Identifier identifier "c"
     None end of file ""
     Group operator "=":
      Literal integer "1"
      Identifier identifier "a"
      Identifier identifier "a"
   Loop 'loop' "loop":
    Identifier 'label' "'a"
    Group ':' ":":
     BinaryOperation operator "=":
      Identifier operator "="
      Identifier identifier "c"
      BinaryOperation operator "+":
       Identifier operator "+"
       Identifier identifier "a"
       Identifier identifier "b"
     BinaryOperation operator "=":
      Identifier operator "="
      Identifier identifier "a"
      Identifier identifier "b"
     BinaryOperation operator "=":
      Identifier operator "="
      Identifier identifier "b"
      Identifier identifier "c"
     BinaryOperation operator "=":
      Identifier operator "="
      Identifier identifier "v"
      BinaryOperation operator "-":
       Identifier operator "-"
       Identifier identifier "v"
       Literal integer "1"
     IfExpression 'if' "if":
      BinaryOperation operator "==":
       Identifier operator "=="
       Identifier identifier "v"
       Literal integer "0"
      Group ':' ":":
       Break 'break' "break":
        Identifier 'label' "'a"
        None end of file ""
      None end of file ""
   ReturnStatement 'return' "return":
    Identifier identifier "c"
 StructDeclaration 'struct' "struct":
  Identifier identifier "Foo"
  Group ':' ":":
   StructField(false) identifier "a":
    Identifier identifier "a"
    Identifier identifier "b"
    Identifier identifier "c"
    Identifier identifier "i64"
 StructDeclaration 'struct' "struct":
  Identifier identifier "Goo"
  Group ':' ":":
   StructField(true) identifier "foo":
    Identifier identifier "foo"
    Identifier identifier "Foo"
   Attribute 'attr' "attr":
    AttributeElement identifier "something"
   StructField(false) identifier "gva":
    Identifier identifier "gva"
    Identifier identifier "i64"

0>v0
function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 0
    return v0
}

1>v0
1>v1
function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 1
    v1 = iconst.i64 1
    v2 = isub v0, v1
    return v2
}

1>v0
1>v1
function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 1
    v1 = iconst.i64 1
    v2 = iadd v0, v1
    return v2
}

1>v0
1>v1
0>v3
1>v5
function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 1
    v1 = iconst.i64 1
    v2 = icmp eq v0, v1
    brnz v2, block1
    jump block2

block1:
    v3 = iconst.i64 0
    jump block3(v3)

block2:
    v5 = iconst.i64 1
    jump block3(v5)

block3(v4: i64):
    return v4
}

10>v0
function u0:0() -> i32 fast {
    sig0 = (i32) -> i32 fast
    sig1 = (i32) -> i32 fast
    fn0 = colocated u0:2 sig0
    fn1 = colocated u0:0 sig1

block0:
    v0 = iconst.i32 10
    v1 = call fn0(v0)
    v2 = call fn1(v0)
    v3 = isub v1, v2
    return v3
}

1>v1
1>v5
1>v8
function u0:0(i32) -> i32 fast {
    sig0 = (i32) windows_fastcall
    fn0 = u0:1 sig0

block0(v0: i32):
    v1 = iconst.i32 1
    jump block1(v1, v1, v0)

block1(v2: i32, v3: i32, v6: i32):
    v10 -> v3
    v4 = iadd v2, v3
    v11 -> v4
    v13 -> v4
    v5 = iconst.i32 1
    v7 = isub v6, v5
    v12 -> v7
    call fn0(v7)
    v8 = iconst.i32 1
    v9 = icmp eq v7, v8
    brnz v9, block3
    jump block4

block3:
    jump block2

block4:
    jump block1(v10, v11, v12)

block2:
    return v13
}

2>v1
1>v3
1>v5
2>v8
function u0:0(i32) -> i32 fast {
    sig0 = (i32) -> i32 fast
    fn0 = colocated u0:0 sig0

block0(v0: i32):
    v1 = iconst.i32 2
    v2 = icmp slt v0, v1
    brnz v2, block1
    jump block2

block1:
    v3 = iconst.i32 1
    jump block3(v3)

block2:
    v5 = iconst.i32 1
    v6 = isub.i32 v0, v5
    v7 = call fn0(v6)
    v8 = iconst.i32 2
    v9 = isub.i32 v0, v8
    v10 = call fn0(v9)
    v11 = iadd v7, v10
    jump block3(v11)

block3(v4: i32):
    return v4
}

0>v6
function u0:0() -> i64 fast {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 24
    ss2 = explicit_slot 32

block0:
    v0 = stack_addr.i64 ss0
    v1 = iconst.i64 0
    store v1, v0
    store v1, v0+8
    v2 = stack_addr.i64 ss1
    v3 = iconst.i64 0
    store v3, v2
    store v3, v2+8
    store v3, v2+16
    v4 = stack_addr.i64 ss2
    v5 = iconst.i64 0
    store v5, v4
    store v5, v4+8
    store v5, v4+16
    store v5, v4+24
    v6 = iconst.i64 0
    return v6
}

