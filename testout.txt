Ok(Arguments { filename: "file", flags: ["flag", "flag"], field_flags: [("flag", "value")], args: ["arg", "arg"] })
Ok(Arguments { filename: "file", flags: [], field_flags: [], args: ["string value"] })
Dummy1
[(Dummy(1), 0)]
0
Dummy(1)
[]
[(Dummy(1), 0)]
|> 2:1:text_code.mf
| var something = [1, 2, 3]
| ^
|> 2:4:text_code.mf
| var something = [1, 2, 3]
| ^^^
|> 2:14:text_code.mf
| var something = [1, 2, 3]
|     ^^^^^^^^^
|> 2:16:text_code.mf
| var something = [1, 2, 3]
|               ^
|> 2:18:text_code.mf
| var something = [1, 2, 3]
|                 ^
|> 2:19:text_code.mf
| var something = [1, 2, 3]
|                  ^
|> 2:20:text_code.mf
| var something = [1, 2, 3]
|                   ^
|> 2:22:text_code.mf
| var something = [1, 2, 3]
|                     ^
|> 2:23:text_code.mf
| var something = [1, 2, 3]
|                      ^
|> 2:25:text_code.mf
| var something = [1, 2, 3]
|                        ^
|> 2:26:text_code.mf
| var something = [1, 2, 3]
|                         ^
|> 3:1:text_code.mf
| let hello = "hello"
| ^
|> 3:4:text_code.mf
| let hello = "hello"
| ^^^
|> 3:10:text_code.mf
| let hello = "hello"
|     ^^^^^
|> 3:12:text_code.mf
| let hello = "hello"
|           ^
|> 3:20:text_code.mf
| let hello = "hello"
|             ^^^^^^^
|> 4:2:text_code.mf
| 
| ^
|> 5:2:text_code.mf
| 
| ^
|> 6:1:text_code.mf
| ## doc comment
| ^
|> 6:16:text_code.mf
| ## doc comment
| ^^^^^^^^^^^^^^
|> 7:1:text_code.mf
| fun something -> fun(int, int) -> int:
| ^
|> 7:4:text_code.mf
| fun something -> fun(int, int) -> int:
| ^^^
|> 7:14:text_code.mf
| fun something -> fun(int, int) -> int:
|     ^^^^^^^^^
|> 7:17:text_code.mf
| fun something -> fun(int, int) -> int:
|               ^^
|> 7:21:text_code.mf
| fun something -> fun(int, int) -> int:
|                  ^^^
|> 7:22:text_code.mf
| fun something -> fun(int, int) -> int:
|                     ^
|> 7:25:text_code.mf
| fun something -> fun(int, int) -> int:
|                      ^^^
|> 7:26:text_code.mf
| fun something -> fun(int, int) -> int:
|                         ^
|> 7:30:text_code.mf
| fun something -> fun(int, int) -> int:
|                           ^^^
|> 7:31:text_code.mf
| fun something -> fun(int, int) -> int:
|                              ^
|> 7:34:text_code.mf
| fun something -> fun(int, int) -> int:
|                                ^^
|> 7:38:text_code.mf
| fun something -> fun(int, int) -> int:
|                                   ^^^
|> 7:39:text_code.mf
| fun something -> fun(int, int) -> int:
|                                      ^
|> 8:3:text_code.mf
|   # ignored commend
| ^^
|> 9:3:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
| ^^
|> 9:9:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|   ^^^^^^
|> 9:13:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|          ^^^
|> 9:14:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|             ^
|> 9:15:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|              ^
|> 9:16:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|               ^
|> 9:18:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                 ^
|> 9:19:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                  ^
|> 9:55:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                                                    ^^^
|> 9:56:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                                                       ^
|> 9:59:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                                                         ^^
|> 9:63:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                                                            ^^^
|> 9:64:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                                                               ^
|> 9:66:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                                                                 ^
|> 9:68:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                                                                   ^
|> 9:70:text_code.mf
|   return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b
|                                                                     ^
|> 10:2:text_code.mf
| 
| ^
|> 11:1:text_code.mf
| ##[
| ^
|> 13:3:text_code.mf
| ##[
|   multiline doc comment
| ]#
| ^^^^^^^^^^^^^^^^^^^^^^^
|> 14:1:text_code.mf
| struct Scope
| ^
|> 14:7:text_code.mf
| struct Scope
| ^^^^^^
|> 14:13:text_code.mf
| struct Scope
|        ^^^^^
|> 15:2:text_code.mf
| 
| ^
|> 16:1:text_code.mf
| impl Scope:
| ^
|> 16:5:text_code.mf
| impl Scope:
| ^^^^
|> 16:11:text_code.mf
| impl Scope:
|      ^^^^^
|> 16:12:text_code.mf
| impl Scope:
|           ^
|> 17:3:text_code.mf
|   fun new -> Self:
| ^^
|> 17:6:text_code.mf
|   fun new -> Self:
|   ^^^
|> 17:10:text_code.mf
|   fun new -> Self:
|       ^^^
|> 17:13:text_code.mf
|   fun new -> Self:
|           ^^
|> 17:18:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 17:19:text_code.mf
|   fun new -> Self:
|                  ^
|> 18:5:text_code.mf
|     return
| ^^^^
|> 18:11:text_code.mf
|     return
|     ^^^^^^
|> 19:4:text_code.mf
|   
| ^^^
|> 20:3:text_code.mf
|   fun do_nothing(s: Self):
| ^^
|> 20:6:text_code.mf
|   fun do_nothing(s: Self):
|   ^^^
|> 20:17:text_code.mf
|   fun do_nothing(s: Self):
|       ^^^^^^^^^^
|> 20:18:text_code.mf
|   fun do_nothing(s: Self):
|                 ^
|> 20:19:text_code.mf
|   fun do_nothing(s: Self):
|                  ^
|> 20:20:text_code.mf
|   fun do_nothing(s: Self):
|                   ^
|> 20:25:text_code.mf
|   fun do_nothing(s: Self):
|                     ^^^^
|> 20:26:text_code.mf
|   fun do_nothing(s: Self):
|                         ^
|> 20:27:text_code.mf
|   fun do_nothing(s: Self):
|                          ^
|> 21:5:text_code.mf
|     pass
| ^^^^
|> 21:9:text_code.mf
|     pass
|     ^^^^
|> 22:2:text_code.mf
| 
| ^
|> 23:1:text_code.mf
| struct Template[T]
| ^
|> 23:7:text_code.mf
| struct Template[T]
| ^^^^^^
|> 23:16:text_code.mf
| struct Template[T]
|        ^^^^^^^^
|> 23:17:text_code.mf
| struct Template[T]
|                ^
|> 23:18:text_code.mf
| struct Template[T]
|                 ^
|> 23:19:text_code.mf
| struct Template[T]
|                  ^
|> 24:2:text_code.mf
| 
| ^
|> 25:1:text_code.mf
| impl[T] Template[T]:
| ^
|> 25:5:text_code.mf
| impl[T] Template[T]:
| ^^^^
|> 25:6:text_code.mf
| impl[T] Template[T]:
|     ^
|> 25:7:text_code.mf
| impl[T] Template[T]:
|      ^
|> 25:8:text_code.mf
| impl[T] Template[T]:
|       ^
|> 25:17:text_code.mf
| impl[T] Template[T]:
|         ^^^^^^^^
|> 25:18:text_code.mf
| impl[T] Template[T]:
|                 ^
|> 25:19:text_code.mf
| impl[T] Template[T]:
|                  ^
|> 25:20:text_code.mf
| impl[T] Template[T]:
|                   ^
|> 25:21:text_code.mf
| impl[T] Template[T]:
|                    ^
|> 26:3:text_code.mf
|   fun new -> Self:
| ^^
|> 26:6:text_code.mf
|   fun new -> Self:
|   ^^^
|> 26:10:text_code.mf
|   fun new -> Self:
|       ^^^
|> 26:13:text_code.mf
|   fun new -> Self:
|           ^^
|> 26:18:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 26:19:text_code.mf
|   fun new -> Self:
|                  ^
|> 27:5:text_code.mf
|     return
| ^^^^
|> 27:11:text_code.mf
|     return
|     ^^^^^^
|> 28:4:text_code.mf
|   
| ^^^
|> 29:3:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
| ^^
|> 29:6:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|   ^^^
|> 29:17:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|       ^^^^^^^^^^
|> 29:18:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                 ^
|> 29:19:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                  ^
|> 29:20:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                   ^
|> 29:25:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                     ^^^^
|> 29:26:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                         ^
|> 29:32:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                           ^^^^^
|> 29:33:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                ^
|> 29:35:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                  ^
|> 29:36:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                   ^
|> 29:39:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                     ^^
|> 29:41:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                        ^
|> 29:42:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                         ^
|> 30:5:text_code.mf
|     value
| ^^^^
|> 30:10:text_code.mf
|     value
|     ^^^^^
|> 31:2:text_code.mf
| 
| ^
|> 32:1:text_code.mf
| fun use_chain:
| ^
|> 32:4:text_code.mf
| fun use_chain:
| ^^^
|> 32:14:text_code.mf
| fun use_chain:
|     ^^^^^^^^^
|> 32:15:text_code.mf
| fun use_chain:
|              ^
|> 33:3:text_code.mf
|   module::Type::method::[param]()
| ^^
|> 33:9:text_code.mf
|   module::Type::method::[param]()
|   ^^^^^^
|> 33:11:text_code.mf
|   module::Type::method::[param]()
|         ^^
|> 33:15:text_code.mf
|   module::Type::method::[param]()
|           ^^^^
|> 33:17:text_code.mf
|   module::Type::method::[param]()
|               ^^
|> 33:23:text_code.mf
|   module::Type::method::[param]()
|                 ^^^^^^
|> 33:25:text_code.mf
|   module::Type::method::[param]()
|                       ^^
|> 33:26:text_code.mf
|   module::Type::method::[param]()
|                         ^
|> 33:31:text_code.mf
|   module::Type::method::[param]()
|                          ^^^^^
|> 33:32:text_code.mf
|   module::Type::method::[param]()
|                               ^
|> 33:33:text_code.mf
|   module::Type::method::[param]()
|                                ^
|> 33:34:text_code.mf
|   module::Type::method::[param]()
|                                 ^
|> 34:2:text_code.mf
| 
| ^
|> 35:1:text_code.mf
| fun flo: pass
| ^
|> 35:4:text_code.mf
| fun flo: pass
| ^^^
|> 35:8:text_code.mf
| fun flo: pass
|     ^^^
|> 35:9:text_code.mf
| fun flo: pass
|        ^
|> 35:14:text_code.mf
| fun flo: pass
|          ^^^^
|> 36:2:text_code.mf
| 
| ^
|> 37:1:text_code.mf
| fun foo(): pass
| ^
|> 37:4:text_code.mf
| fun foo(): pass
| ^^^
|> 37:8:text_code.mf
| fun foo(): pass
|     ^^^
|> 37:9:text_code.mf
| fun foo(): pass
|        ^
|> 37:10:text_code.mf
| fun foo(): pass
|         ^
|> 37:11:text_code.mf
| fun foo(): pass
|          ^
|> 37:16:text_code.mf
| fun foo(): pass
|            ^^^^
|> 38:2:text_code.mf
| 
| ^
|> 39:1:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^
|> 39:4:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^^^
|> 39:8:text_code.mf
| fun goo(a: i8, b: i8): pass
|     ^^^
|> 39:9:text_code.mf
| fun goo(a: i8, b: i8): pass
|        ^
|> 39:10:text_code.mf
| fun goo(a: i8, b: i8): pass
|         ^
|> 39:11:text_code.mf
| fun goo(a: i8, b: i8): pass
|          ^
|> 39:14:text_code.mf
| fun goo(a: i8, b: i8): pass
|            ^^
|> 39:15:text_code.mf
| fun goo(a: i8, b: i8): pass
|              ^
|> 39:17:text_code.mf
| fun goo(a: i8, b: i8): pass
|                ^
|> 39:18:text_code.mf
| fun goo(a: i8, b: i8): pass
|                 ^
|> 39:21:text_code.mf
| fun goo(a: i8, b: i8): pass
|                   ^^
|> 39:22:text_code.mf
| fun goo(a: i8, b: i8): pass
|                     ^
|> 39:23:text_code.mf
| fun goo(a: i8, b: i8): pass
|                      ^
|> 39:28:text_code.mf
| fun goo(a: i8, b: i8): pass
|                        ^^^^
|> 40:2:text_code.mf
| 
| ^
|> 41:1:text_code.mf
| fun loo:
| ^
|> 41:4:text_code.mf
| fun loo:
| ^^^
|> 41:8:text_code.mf
| fun loo:
|     ^^^
|> 41:9:text_code.mf
| fun loo:
|        ^
|> 42:3:text_code.mf
|   noo::loo::[i8]()
| ^^
|> 42:6:text_code.mf
|   noo::loo::[i8]()
|   ^^^
|> 42:8:text_code.mf
|   noo::loo::[i8]()
|      ^^
|> 42:11:text_code.mf
|   noo::loo::[i8]()
|        ^^^
|> 42:13:text_code.mf
|   noo::loo::[i8]()
|           ^^
|> 42:14:text_code.mf
|   noo::loo::[i8]()
|             ^
|> 42:16:text_code.mf
|   noo::loo::[i8]()
|              ^^
|> 42:17:text_code.mf
|   noo::loo::[i8]()
|                ^
|> 42:18:text_code.mf
|   noo::loo::[i8]()
|                 ^
|> 42:19:text_code.mf
|   noo::loo::[i8]()
|                  ^
|> 43:2:text_code.mf
| 
| ^
|> 44:3:text_code.mf
|   let array = [1, 2, 3]
| ^^
|> 44:6:text_code.mf
|   let array = [1, 2, 3]
|   ^^^
|> 44:12:text_code.mf
|   let array = [1, 2, 3]
|       ^^^^^
|> 44:14:text_code.mf
|   let array = [1, 2, 3]
|             ^
|> 44:16:text_code.mf
|   let array = [1, 2, 3]
|               ^
|> 44:17:text_code.mf
|   let array = [1, 2, 3]
|                ^
|> 44:18:text_code.mf
|   let array = [1, 2, 3]
|                 ^
|> 44:20:text_code.mf
|   let array = [1, 2, 3]
|                   ^
|> 44:21:text_code.mf
|   let array = [1, 2, 3]
|                    ^
|> 44:23:text_code.mf
|   let array = [1, 2, 3]
|                      ^
|> 44:24:text_code.mf
|   let array = [1, 2, 3]
|                       ^
|> 45:3:text_code.mf
|   array[0] = 3
| ^^
|> 45:8:text_code.mf
|   array[0] = 3
|   ^^^^^
|> 45:9:text_code.mf
|   array[0] = 3
|        ^
|> 45:10:text_code.mf
|   array[0] = 3
|         ^
|> 45:11:text_code.mf
|   array[0] = 3
|          ^
|> 45:13:text_code.mf
|   array[0] = 3
|            ^
|> 45:15:text_code.mf
|   array[0] = 3
|              ^
|> 46:3:text_code.mf
|   array[2] = always[1]
| ^^
|> 46:8:text_code.mf
|   array[2] = always[1]
|   ^^^^^
|> 46:9:text_code.mf
|   array[2] = always[1]
|        ^
|> 46:10:text_code.mf
|   array[2] = always[1]
|         ^
|> 46:11:text_code.mf
|   array[2] = always[1]
|          ^
|> 46:13:text_code.mf
|   array[2] = always[1]
|            ^
|> 46:20:text_code.mf
|   array[2] = always[1]
|              ^^^^^^
|> 46:21:text_code.mf
|   array[2] = always[1]
|                    ^
|> 46:22:text_code.mf
|   array[2] = always[1]
|                     ^
|> 46:23:text_code.mf
|   array[2] = always[1]
|                      ^
|> 47:3:text_code.mf
|   array[1] = 1
| ^^
|> 47:8:text_code.mf
|   array[1] = 1
|   ^^^^^
|> 47:9:text_code.mf
|   array[1] = 1
|        ^
|> 47:10:text_code.mf
|   array[1] = 1
|         ^
|> 47:11:text_code.mf
|   array[1] = 1
|          ^
|> 47:13:text_code.mf
|   array[1] = 1
|            ^
|> 47:15:text_code.mf
|   array[1] = 1
|              ^
|> 48:2:text_code.mf
| 
| ^
|> 49:3:text_code.mf
|   pass
| ^^
|> 49:7:text_code.mf
|   pass
|   ^^^^
|> 50:2:text_code.mf
| 
| ^
|> 51:1:text_code.mf
| fun main -> i64:
| ^
|> 51:4:text_code.mf
| fun main -> i64:
| ^^^
|> 51:9:text_code.mf
| fun main -> i64:
|     ^^^^
|> 51:12:text_code.mf
| fun main -> i64:
|          ^^
|> 51:16:text_code.mf
| fun main -> i64:
|             ^^^
|> 51:17:text_code.mf
| fun main -> i64:
|                ^
|> 52:3:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
| ^^
|> 52:9:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|   ^^^^^^
|> 52:12:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|          ^^
|> 52:14:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|             ^
|> 52:16:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|               ^
|> 52:18:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                 ^
|> 52:20:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                   ^
|> 52:22:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                     ^
|> 52:24:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                       ^
|> 52:26:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                         ^
|> 52:28:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                           ^
|> 53:2:text_code.mf
| 
| ^
|> 54:1:text_code.mf
| fun operator_stress_test -> i64:
| ^
|> 54:4:text_code.mf
| fun operator_stress_test -> i64:
| ^^^
|> 54:25:text_code.mf
| fun operator_stress_test -> i64:
|     ^^^^^^^^^^^^^^^^^^^^
|> 54:28:text_code.mf
| fun operator_stress_test -> i64:
|                          ^^
|> 54:32:text_code.mf
| fun operator_stress_test -> i64:
|                             ^^^
|> 54:33:text_code.mf
| fun operator_stress_test -> i64:
|                                ^
|> 55:3:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
| ^^
|> 55:9:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|   ^^^^^^
|> 55:12:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|          ^^
|> 55:14:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|             ^
|> 55:16:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|               ^
|> 55:18:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                 ^
|> 55:20:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                   ^
|> 55:22:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                     ^
|> 55:24:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                       ^
|> 55:26:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                         ^
|> 55:28:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                           ^
|> 55:30:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                             ^
|> 55:32:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                               ^
|> 55:34:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                 ^
|> 55:36:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                   ^
|> 55:39:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                     ^^
|> 55:41:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                        ^
|> 55:44:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                          ^^
|> 55:46:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                             ^
|> 55:50:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                               ^^^
|> 55:53:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                   ^^
|> 55:57:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                      ^^^
|> 55:60:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                          ^^
|> 56:2:text_code.mf
| 
| ^
|> 57:1:text_code.mf
| fun conditional -> i64:
| ^
|> 57:4:text_code.mf
| fun conditional -> i64:
| ^^^
|> 57:16:text_code.mf
| fun conditional -> i64:
|     ^^^^^^^^^^^
|> 57:19:text_code.mf
| fun conditional -> i64:
|                 ^^
|> 57:23:text_code.mf
| fun conditional -> i64:
|                    ^^^
|> 57:24:text_code.mf
| fun conditional -> i64:
|                       ^
|> 58:3:text_code.mf
|   if false:
| ^^
|> 58:5:text_code.mf
|   if false:
|   ^^
|> 58:11:text_code.mf
|   if false:
|      ^^^^^
|> 58:12:text_code.mf
|   if false:
|           ^
|> 59:5:text_code.mf
|     return 10
| ^^^^
|> 59:11:text_code.mf
|     return 10
|     ^^^^^^
|> 59:14:text_code.mf
|     return 10
|            ^^
|> 60:3:text_code.mf
|   elif true:
| ^^
|> 60:7:text_code.mf
|   elif true:
|   ^^^^
|> 60:12:text_code.mf
|   elif true:
|        ^^^^
|> 60:13:text_code.mf
|   elif true:
|            ^
|> 61:5:text_code.mf
|     return if true: 10 else: 20
| ^^^^
|> 61:11:text_code.mf
|     return if true: 10 else: 20
|     ^^^^^^
|> 61:14:text_code.mf
|     return if true: 10 else: 20
|            ^^
|> 61:19:text_code.mf
|     return if true: 10 else: 20
|               ^^^^
|> 61:20:text_code.mf
|     return if true: 10 else: 20
|                   ^
|> 61:23:text_code.mf
|     return if true: 10 else: 20
|                     ^^
|> 61:28:text_code.mf
|     return if true: 10 else: 20
|                        ^^^^
|> 61:29:text_code.mf
|     return if true: 10 else: 20
|                            ^
|> 61:32:text_code.mf
|     return if true: 10 else: 20
|                              ^^
|> 62:3:text_code.mf
|   else:
| ^^
|> 62:7:text_code.mf
|   else:
|   ^^^^
|> 62:8:text_code.mf
|   else:
|       ^
|> 63:5:text_code.mf
|     return 0
| ^^^^
|> 63:11:text_code.mf
|     return 0
|     ^^^^^^
|> 63:13:text_code.mf
|     return 0
|            ^
|> 64:2:text_code.mf
| 
| ^
|> 65:1:text_code.mf
| attr inline = always, call_conv = cold
| ^
|> 65:5:text_code.mf
| attr inline = always, call_conv = cold
| ^^^^
|> 65:12:text_code.mf
| attr inline = always, call_conv = cold
|      ^^^^^^
|> 65:14:text_code.mf
| attr inline = always, call_conv = cold
|             ^
|> 65:21:text_code.mf
| attr inline = always, call_conv = cold
|               ^^^^^^
|> 65:22:text_code.mf
| attr inline = always, call_conv = cold
|                     ^
|> 65:32:text_code.mf
| attr inline = always, call_conv = cold
|                       ^^^^^^^^^
|> 65:34:text_code.mf
| attr inline = always, call_conv = cold
|                                 ^
|> 65:39:text_code.mf
| attr inline = always, call_conv = cold
|                                   ^^^^
|> 66:1:text_code.mf
| fun inline_fn -> u32:
| ^
|> 66:4:text_code.mf
| fun inline_fn -> u32:
| ^^^
|> 66:14:text_code.mf
| fun inline_fn -> u32:
|     ^^^^^^^^^
|> 66:17:text_code.mf
| fun inline_fn -> u32:
|               ^^
|> 66:21:text_code.mf
| fun inline_fn -> u32:
|                  ^^^
|> 66:22:text_code.mf
| fun inline_fn -> u32:
|                     ^
|> 67:3:text_code.mf
|   return 10
| ^^
|> 67:9:text_code.mf
|   return 10
|   ^^^^^^
|> 67:12:text_code.mf
|   return 10
|          ^^
|> 68:2:text_code.mf
| 
| ^
|> 69:1:text_code.mf
| fun fib(v: i64) -> i64:
| ^
|> 69:4:text_code.mf
| fun fib(v: i64) -> i64:
| ^^^
|> 69:8:text_code.mf
| fun fib(v: i64) -> i64:
|     ^^^
|> 69:9:text_code.mf
| fun fib(v: i64) -> i64:
|        ^
|> 69:10:text_code.mf
| fun fib(v: i64) -> i64:
|         ^
|> 69:11:text_code.mf
| fun fib(v: i64) -> i64:
|          ^
|> 69:15:text_code.mf
| fun fib(v: i64) -> i64:
|            ^^^
|> 69:16:text_code.mf
| fun fib(v: i64) -> i64:
|               ^
|> 69:19:text_code.mf
| fun fib(v: i64) -> i64:
|                 ^^
|> 69:23:text_code.mf
| fun fib(v: i64) -> i64:
|                    ^^^
|> 69:24:text_code.mf
| fun fib(v: i64) -> i64:
|                       ^
|> 70:3:text_code.mf
|   return if v == 0 | v == 1:
| ^^
|> 70:9:text_code.mf
|   return if v == 0 | v == 1:
|   ^^^^^^
|> 70:12:text_code.mf
|   return if v == 0 | v == 1:
|          ^^
|> 70:14:text_code.mf
|   return if v == 0 | v == 1:
|             ^
|> 70:17:text_code.mf
|   return if v == 0 | v == 1:
|               ^^
|> 70:19:text_code.mf
|   return if v == 0 | v == 1:
|                  ^
|> 70:21:text_code.mf
|   return if v == 0 | v == 1:
|                    ^
|> 70:23:text_code.mf
|   return if v == 0 | v == 1:
|                      ^
|> 70:26:text_code.mf
|   return if v == 0 | v == 1:
|                        ^^
|> 70:28:text_code.mf
|   return if v == 0 | v == 1:
|                           ^
|> 70:29:text_code.mf
|   return if v == 0 | v == 1:
|                            ^
|> 71:5:text_code.mf
|     1
| ^^^^
|> 71:6:text_code.mf
|     1
|     ^
|> 72:3:text_code.mf
|   else:
| ^^
|> 72:7:text_code.mf
|   else:
|   ^^^^
|> 72:8:text_code.mf
|   else:
|       ^
|> 73:5:text_code.mf
|     fib(v - 1) + fib(v - 2)
| ^^^^
|> 73:8:text_code.mf
|     fib(v - 1) + fib(v - 2)
|     ^^^
|> 73:9:text_code.mf
|     fib(v - 1) + fib(v - 2)
|        ^
|> 73:10:text_code.mf
|     fib(v - 1) + fib(v - 2)
|         ^
|> 73:12:text_code.mf
|     fib(v - 1) + fib(v - 2)
|           ^
|> 73:14:text_code.mf
|     fib(v - 1) + fib(v - 2)
|             ^
|> 73:15:text_code.mf
|     fib(v - 1) + fib(v - 2)
|              ^
|> 73:17:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                ^
|> 73:21:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                  ^^^
|> 73:22:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                     ^
|> 73:23:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                      ^
|> 73:25:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                        ^
|> 73:27:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                          ^
|> 73:28:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                           ^
|> 74:2:text_code.mf
| 
| ^
|> 75:1:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^
|> 75:4:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^^^
|> 75:13:text_code.mf
| fun fib_loop(v: i64) -> i64:
|     ^^^^^^^^
|> 75:14:text_code.mf
| fun fib_loop(v: i64) -> i64:
|             ^
|> 75:15:text_code.mf
| fun fib_loop(v: i64) -> i64:
|              ^
|> 75:16:text_code.mf
| fun fib_loop(v: i64) -> i64:
|               ^
|> 75:20:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                 ^^^
|> 75:21:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                    ^
|> 75:24:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                      ^^
|> 75:28:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                         ^^^
|> 75:29:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                            ^
|> 76:3:text_code.mf
|   var a, b, c = 1
| ^^
|> 76:6:text_code.mf
|   var a, b, c = 1
|   ^^^
|> 76:8:text_code.mf
|   var a, b, c = 1
|       ^
|> 76:9:text_code.mf
|   var a, b, c = 1
|        ^
|> 76:11:text_code.mf
|   var a, b, c = 1
|          ^
|> 76:12:text_code.mf
|   var a, b, c = 1
|           ^
|> 76:14:text_code.mf
|   var a, b, c = 1
|             ^
|> 76:16:text_code.mf
|   var a, b, c = 1
|               ^
|> 76:18:text_code.mf
|   var a, b, c = 1
|                 ^
|> 77:3:text_code.mf
|   loop'a:
| ^^
|> 77:7:text_code.mf
|   loop'a:
|   ^^^^
|> 77:9:text_code.mf
|   loop'a:
|       ^^
|> 77:10:text_code.mf
|   loop'a:
|         ^
|> 78:5:text_code.mf
|     c = a + b
| ^^^^
|> 78:6:text_code.mf
|     c = a + b
|     ^
|> 78:8:text_code.mf
|     c = a + b
|       ^
|> 78:10:text_code.mf
|     c = a + b
|         ^
|> 78:12:text_code.mf
|     c = a + b
|           ^
|> 78:14:text_code.mf
|     c = a + b
|             ^
|> 79:5:text_code.mf
|     a = b
| ^^^^
|> 79:6:text_code.mf
|     a = b
|     ^
|> 79:8:text_code.mf
|     a = b
|       ^
|> 79:10:text_code.mf
|     a = b
|         ^
|> 80:5:text_code.mf
|     b = c
| ^^^^
|> 80:6:text_code.mf
|     b = c
|     ^
|> 80:8:text_code.mf
|     b = c
|       ^
|> 80:10:text_code.mf
|     b = c
|         ^
|> 81:5:text_code.mf
|     v = v - 1
| ^^^^
|> 81:6:text_code.mf
|     v = v - 1
|     ^
|> 81:8:text_code.mf
|     v = v - 1
|       ^
|> 81:10:text_code.mf
|     v = v - 1
|         ^
|> 81:12:text_code.mf
|     v = v - 1
|           ^
|> 81:14:text_code.mf
|     v = v - 1
|             ^
|> 82:5:text_code.mf
|     if v == 0:
| ^^^^
|> 82:7:text_code.mf
|     if v == 0:
|     ^^
|> 82:9:text_code.mf
|     if v == 0:
|        ^
|> 82:12:text_code.mf
|     if v == 0:
|          ^^
|> 82:14:text_code.mf
|     if v == 0:
|             ^
|> 82:15:text_code.mf
|     if v == 0:
|              ^
|> 83:7:text_code.mf
|       break'a
| ^^^^^^
|> 83:12:text_code.mf
|       break'a
|       ^^^^^
|> 83:14:text_code.mf
|       break'a
|            ^^
|> 84:3:text_code.mf
|   return c
| ^^
|> 84:9:text_code.mf
|   return c
|   ^^^^^^
|> 84:11:text_code.mf
|   return c
|          ^
|> 85:2:text_code.mf
| 
| ^
|> 86:1:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^
|> 86:4:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^^^
|> 86:20:text_code.mf
| fun unary_operators(a: i64) -> i64:
|     ^^^^^^^^^^^^^^^
|> 86:21:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                    ^
|> 86:22:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                     ^
|> 86:23:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                      ^
|> 86:27:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                        ^^^
|> 86:28:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                           ^
|> 86:31:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                             ^^
|> 86:35:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                ^^^
|> 86:36:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                   ^
|> 87:3:text_code.mf
|   return -a + ~a + !a + ++a + --a
| ^^
|> 87:9:text_code.mf
|   return -a + ~a + !a + ++a + --a
|   ^^^^^^
|> 87:11:text_code.mf
|   return -a + ~a + !a + ++a + --a
|          ^
|> 87:12:text_code.mf
|   return -a + ~a + !a + ++a + --a
|           ^
|> 87:14:text_code.mf
|   return -a + ~a + !a + ++a + --a
|             ^
|> 87:16:text_code.mf
|   return -a + ~a + !a + ++a + --a
|               ^
|> 87:17:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                ^
|> 87:19:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                  ^
|> 87:21:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                    ^
|> 87:22:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                     ^
|> 87:24:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                       ^
|> 87:27:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                         ^^
|> 87:28:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                           ^
|> 87:30:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                             ^
|> 87:33:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                               ^^
|> 87:34:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                                 ^
|> 88:2:text_code.mf
| 
| ^
|> 89:1:text_code.mf
| struct Foo:
| ^
|> 89:7:text_code.mf
| struct Foo:
| ^^^^^^
|> 89:11:text_code.mf
| struct Foo:
|        ^^^
|> 89:12:text_code.mf
| struct Foo:
|           ^
|> 90:3:text_code.mf
|   a, b, c: int
| ^^
|> 90:4:text_code.mf
|   a, b, c: int
|   ^
|> 90:5:text_code.mf
|   a, b, c: int
|    ^
|> 90:7:text_code.mf
|   a, b, c: int
|      ^
|> 90:8:text_code.mf
|   a, b, c: int
|       ^
|> 90:10:text_code.mf
|   a, b, c: int
|         ^
|> 90:11:text_code.mf
|   a, b, c: int
|          ^
|> 90:15:text_code.mf
|   a, b, c: int
|            ^^^
|> 91:2:text_code.mf
| 
| ^
|> 92:1:text_code.mf
| struct Goo:
| ^
|> 92:7:text_code.mf
| struct Goo:
| ^^^^^^
|> 92:11:text_code.mf
| struct Goo:
|        ^^^
|> 92:12:text_code.mf
| struct Goo:
|           ^
|> 93:3:text_code.mf
|   embed foo: Foo
| ^^
|> 93:8:text_code.mf
|   embed foo: Foo
|   ^^^^^
|> 93:12:text_code.mf
|   embed foo: Foo
|         ^^^
|> 93:13:text_code.mf
|   embed foo: Foo
|            ^
|> 93:17:text_code.mf
|   embed foo: Foo
|              ^^^
|> 94:3:text_code.mf
|   gva: int
| ^^
|> 94:6:text_code.mf
|   gva: int
|   ^^^
|> 94:7:text_code.mf
|   gva: int
|      ^
|> 94:11:text_code.mf
|   gva: int
|        ^^^
|> 95:2:text_code.mf
| 
| ^
|> 96:1:text_code.mf
| fun strings -> i64:
| ^
|> 96:4:text_code.mf
| fun strings -> i64:
| ^^^
|> 96:12:text_code.mf
| fun strings -> i64:
|     ^^^^^^^
|> 96:15:text_code.mf
| fun strings -> i64:
|             ^^
|> 96:19:text_code.mf
| fun strings -> i64:
|                ^^^
|> 96:20:text_code.mf
| fun strings -> i64:
|                   ^
|> 97:3:text_code.mf
|   var hello = "hello"
| ^^
|> 97:6:text_code.mf
|   var hello = "hello"
|   ^^^
|> 97:12:text_code.mf
|   var hello = "hello"
|       ^^^^^
|> 97:14:text_code.mf
|   var hello = "hello"
|             ^
|> 97:22:text_code.mf
|   var hello = "hello"
|               ^^^^^^^
|> 98:3:text_code.mf
|   return 0
| ^^
|> 98:9:text_code.mf
|   return 0
|   ^^^^^^
|> 98:11:text_code.mf
|   return 0
|          ^
|> 99:2:text_code.mf
| 
| ^
|> 100:1:text_code.mf
| fun mutable_ref(a: &Foo):
| ^
|> 100:4:text_code.mf
| fun mutable_ref(a: &Foo):
| ^^^
|> 100:16:text_code.mf
| fun mutable_ref(a: &Foo):
|     ^^^^^^^^^^^
|> 100:17:text_code.mf
| fun mutable_ref(a: &Foo):
|                ^
|> 100:18:text_code.mf
| fun mutable_ref(a: &Foo):
|                 ^
|> 100:19:text_code.mf
| fun mutable_ref(a: &Foo):
|                  ^
|> 100:21:text_code.mf
| fun mutable_ref(a: &Foo):
|                    ^
|> 100:24:text_code.mf
| fun mutable_ref(a: &Foo):
|                     ^^^
|> 100:25:text_code.mf
| fun mutable_ref(a: &Foo):
|                        ^
|> 100:26:text_code.mf
| fun mutable_ref(a: &Foo):
|                         ^
|> 101:3:text_code.mf
|   a.a = 10
| ^^
|> 101:4:text_code.mf
|   a.a = 10
|   ^
|> 101:5:text_code.mf
|   a.a = 10
|    ^
|> 101:6:text_code.mf
|   a.a = 10
|     ^
|> 101:8:text_code.mf
|   a.a = 10
|       ^
|> 101:11:text_code.mf
|   a.a = 10
|         ^^
|> 102:3:text_code.mf
|   a.b = 20
| ^^
|> 102:4:text_code.mf
|   a.b = 20
|   ^
|> 102:5:text_code.mf
|   a.b = 20
|    ^
|> 102:6:text_code.mf
|   a.b = 20
|     ^
|> 102:8:text_code.mf
|   a.b = 20
|       ^
|> 102:11:text_code.mf
|   a.b = 20
|         ^^
|> 103:3:text_code.mf
|   a.c = 30
| ^^
|> 103:4:text_code.mf
|   a.c = 30
|   ^
|> 103:5:text_code.mf
|   a.c = 30
|    ^
|> 103:6:text_code.mf
|   a.c = 30
|     ^
|> 103:8:text_code.mf
|   a.c = 30
|       ^
|> 103:11:text_code.mf
|   a.c = 30
|         ^^
|> 104:2:text_code.mf
| 
| ^
|> 105:1:text_code.mf
| fun some_string -> &u8:
| ^
|> 105:4:text_code.mf
| fun some_string -> &u8:
| ^^^
|> 105:16:text_code.mf
| fun some_string -> &u8:
|     ^^^^^^^^^^^
|> 105:19:text_code.mf
| fun some_string -> &u8:
|                 ^^
|> 105:21:text_code.mf
| fun some_string -> &u8:
|                    ^
|> 105:23:text_code.mf
| fun some_string -> &u8:
|                     ^^
|> 105:24:text_code.mf
| fun some_string -> &u8:
|                       ^
|> 106:3:text_code.mf
|   "
| ^^
|> 108:4:text_code.mf
|   "
| hello there
|   "
| ^^^^^^^^^^^
Group "\n":
 VarStatement(None, true) "var something = [1, 2, 3]":
  VarAssign "something = [1, 2, 3]":
   Group "something":
    Ident "something"
   None ""
   Group "=":
    Array "[":
     Lit "1"
     Lit "2"
     Lit "3"
 VarStatement(None, false) "let hello = \"hello\"":
  VarAssign "hello = \"hello\"":
   Group "hello":
    Ident "hello"
   None ""
   Group "=":
    Lit "\"hello\""
 Comment "## doc comment\r"
 Fun(None) "fun something -> fun(int, int) -> int:\r\n  # ignored commend\r\n  return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b":
  FunHeader "fun something -> fun(int, int) -> int:\r\n  # ignored commend\r\n  return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b":
   Ident "something"
   Fun(None) "fun(int, int) -> int:\r\n  # ignored commend\r\n  return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b":
    FunHeader "fun(int, int) -> int":
     None ""
     Ident "int"
     Ident "int"
     Ident "int"
    Group ":":
     ReturnStatement "return fun(a, b: #[ even more ignored commend ]# int) -> int: a + b":
      Fun(None) "fun(a, b: #[ even more ignored commend ]# int) -> int: a + b":
       FunHeader "fun(a, b: #[ even more ignored commend ]# int) -> int":
        None ""
        FunArgument(false) "a, b: #[ even more ignored commend ]# int":
         Ident "a"
         Ident "b"
         Ident "int"
        Ident "int"
       Group ":":
        BinaryOp "a + b":
         Ident "+"
         Ident "a"
         Ident "b"
  None ""
 Comment "##[\r\n  multiline doc comment\r\n]#"
 StructDeclaration(None) "struct":
  Ident "Scope"
  None ""
 Impl(None) "impl":
  None ""
  Ident "Scope"
  Group ":":
   Fun(None) "fun new -> Self:\r\n    return":
    FunHeader "fun new -> Self":
     Ident "new"
     Ident "Self"
    Group ":":
     ReturnStatement "return":
      None ""
   Fun(None) "fun do_nothing(s: Self):\r\n    pass":
    FunHeader "fun do_nothing(s: Self)":
     Ident "do_nothing"
     FunArgument(false) "s: Self":
      Ident "s"
      Ident "Self"
     None ""
    Group ":":
     Pass "pass"
 StructDeclaration(None) "struct":
  Instantiation "Template[T]":
   Ident "Template"
   Ident "T"
  None ""
 Impl(None) "impl":
  Group "[":
   Ident "T"
  Instantiation "Template[T]":
   Ident "Template"
   Ident "T"
  Group ":":
   Fun(None) "fun new -> Self:\r\n    return":
    FunHeader "fun new -> Self":
     Ident "new"
     Ident "Self"
    Group ":":
     ReturnStatement "return":
      None ""
   Fun(None) "fun do_nothing(s: Self, value: T) -> T:\r\n    value":
    FunHeader "fun do_nothing(s: Self, value: T) -> T":
     Ident "do_nothing"
     FunArgument(false) "s: Self":
      Ident "s"
      Ident "Self"
     FunArgument(false) "value: T":
      Ident "value"
      Ident "T"
     Ident "T"
    Group ":":
     Ident "value"
 Fun(None) "fun use_chain:\r\n  module::Type::method::[param]()":
  FunHeader "fun use_chain":
   Ident "use_chain"
   None ""
  Group ":":
   Call(false) "module::Type::method::[param]()":
    Instantiation "module::Type::method::[param]":
     Path "module::Type::method":
      Ident "module"
      Ident "Type"
      Ident "method"
     Ident "param"
 Fun(None) "fun flo: pass":
  FunHeader "fun flo":
   Ident "flo"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun foo(): pass":
  FunHeader "fun foo()":
   Ident "foo"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun goo(a: i8, b: i8): pass":
  FunHeader "fun goo(a: i8, b: i8)":
   Ident "goo"
   FunArgument(false) "a: i8":
    Ident "a"
    Ident "i8"
   FunArgument(false) "b: i8":
    Ident "b"
    Ident "i8"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun loo:\r\n  noo::loo::[i8]()\r\n\r\n  let array = [1, 2, 3]\r\n  array[0] = 3\r\n  array[2] = always[1]\r\n  array[1] = 1\r\n\r\n  pass":
  FunHeader "fun loo":
   Ident "loo"
   None ""
  Group ":":
   Call(false) "noo::loo::[i8]()":
    Instantiation "noo::loo::[i8]":
     Path "noo::loo":
      Ident "noo"
      Ident "loo"
     Ident "i8"
   VarStatement(None, false) "let array = [1, 2, 3]":
    VarAssign "array = [1, 2, 3]":
     Group "array":
      Ident "array"
     None ""
     Group "=":
      Array "[":
       Lit "1"
       Lit "2"
       Lit "3"
   BinaryOp "array[0] = 3":
    Ident "="
    Index "array[0]":
     Ident "array"
     Lit "0"
    Lit "3"
   BinaryOp "array[2] = always[1]":
    Ident "="
    Index "array[2]":
     Ident "array"
     Lit "2"
    Index "always[1]":
     Ident "always"
     Lit "1"
   BinaryOp "array[1] = 1":
    Ident "="
    Index "array[1]":
     Ident "array"
     Lit "1"
    Lit "1"
   Pass "pass"
 Fun(None) "fun main -> i64:\r\n  return 10 + 4 - 2 * 1 + 8":
  FunHeader "fun main -> i64":
   Ident "main"
   Ident "i64"
  Group ":":
   ReturnStatement "return 10 + 4 - 2 * 1 + 8":
    BinaryOp "10 + 4 - 2 * 1 + 8":
     Ident "-"
     BinaryOp "10 + 4":
      Ident "+"
      Lit "10"
      Lit "4"
     BinaryOp "2 * 1 + 8":
      Ident "+"
      BinaryOp "2 * 1":
       Ident "*"
       Lit "2"
       Lit "1"
      Lit "8"
 Fun(None) "fun operator_stress_test -> i64:\r\n  return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
  FunHeader "fun operator_stress_test -> i64":
   Ident "operator_stress_test"
   Ident "i64"
  Group ":":
   ReturnStatement "return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
    BinaryOp "10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
     Ident "+"
     Lit "10"
     BinaryOp "2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
      Ident "|"
      BinaryOp "2 * 1 - 9":
       Ident "-"
       BinaryOp "2 * 1":
        Ident "*"
        Lit "2"
        Lit "1"
       Lit "9"
      BinaryOp "4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
       Ident "^"
       BinaryOp "4 & 1":
        Ident "&"
        Lit "4"
        Lit "1"
       BinaryOp "2 >> 1 << 7 min 20 max 10":
        Ident "max"
        BinaryOp "2 >> 1 << 7 min 20":
         Ident "min"
         BinaryOp "2 >> 1 << 7":
          Ident "<<"
          BinaryOp "2 >> 1":
           Ident ">>"
           Lit "2"
           Lit "1"
          Lit "7"
         Lit "20"
        Lit "10"
 Fun(None) "fun conditional -> i64:\r\n  if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
  FunHeader "fun conditional -> i64":
   Ident "conditional"
   Ident "i64"
  Group ":":
   IfExpr "if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
    Lit "false"
    Group ":":
     ReturnStatement "return 10":
      Lit "10"
    Group "elif":
     IfExpr "elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
      Lit "true"
      Group ":":
       ReturnStatement "return if true: 10 else: 20":
        IfExpr "if true: 10 else: 20":
         Lit "true"
         Group ":":
          Lit "10"
         Group ":":
          Lit "20"
      Group ":":
       ReturnStatement "return 0":
        Lit "0"
 Attribute "attr inline = always, call_conv = cold":
  AttributeAssign "inline = always":
   Ident "inline"
   Ident "always"
  AttributeAssign "call_conv = cold":
   Ident "call_conv"
   Ident "cold"
 Fun(None) "fun inline_fn -> u32:\r\n  return 10":
  FunHeader "fun inline_fn -> u32":
   Ident "inline_fn"
   Ident "u32"
  Group ":":
   ReturnStatement "return 10":
    Lit "10"
 Fun(None) "fun fib(v: i64) -> i64:\r\n  return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
  FunHeader "fun fib(v: i64) -> i64":
   Ident "fib"
   FunArgument(false) "v: i64":
    Ident "v"
    Ident "i64"
   Ident "i64"
  Group ":":
   ReturnStatement "return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
    IfExpr "if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
     BinaryOp "v == 0 | v == 1":
      Ident "|"
      BinaryOp "v == 0":
       Ident "=="
       Ident "v"
       Lit "0"
      BinaryOp "v == 1":
       Ident "=="
       Ident "v"
       Lit "1"
     Group ":":
      Lit "1"
     Group ":":
      BinaryOp "fib(v - 1) + fib(v - 2)":
       Ident "+"
       Call(false) "fib(v - 1)":
        Ident "fib"
        BinaryOp "v - 1":
         Ident "-"
         Ident "v"
         Lit "1"
       Call(false) "fib(v - 2)":
        Ident "fib"
        BinaryOp "v - 2":
         Ident "-"
         Ident "v"
         Lit "2"
 Fun(None) "fun fib_loop(v: i64) -> i64:\r\n  var a, b, c = 1\r\n  loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r\n  return c":
  FunHeader "fun fib_loop(v: i64) -> i64":
   Ident "fib_loop"
   FunArgument(false) "v: i64":
    Ident "v"
    Ident "i64"
   Ident "i64"
  Group ":":
   VarStatement(None, true) "var a, b, c = 1":
    VarAssign "a, b, c = 1":
     Group "a":
      Ident "a"
      Ident "b"
      Ident "c"
     None ""
     Group "=":
      Lit "1"
      Ident "a"
      Ident "a"
   Loop "loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a":
    Ident "'a"
    Group ":":
     BinaryOp "c = a + b":
      Ident "="
      Ident "c"
      BinaryOp "a + b":
       Ident "+"
       Ident "a"
       Ident "b"
     BinaryOp "a = b":
      Ident "="
      Ident "a"
      Ident "b"
     BinaryOp "b = c":
      Ident "="
      Ident "b"
      Ident "c"
     BinaryOp "v = v - 1":
      Ident "="
      Ident "v"
      BinaryOp "v - 1":
       Ident "-"
       Ident "v"
       Lit "1"
     IfExpr "if v == 0:\r\n      break'a":
      BinaryOp "v == 0":
       Ident "=="
       Ident "v"
       Lit "0"
      Group ":":
       Break "break'a":
        Ident "'a"
        None ""
      None ""
   ReturnStatement "return c":
    Ident "c"
 Fun(None) "fun unary_operators(a: i64) -> i64:\r\n  return -a + ~a + !a + ++a + --a":
  FunHeader "fun unary_operators(a: i64) -> i64":
   Ident "unary_operators"
   FunArgument(false) "a: i64":
    Ident "a"
    Ident "i64"
   Ident "i64"
  Group ":":
   ReturnStatement "return -a + ~a + !a + ++a + --a":
    BinaryOp "-a + ~a + !a + ++a + --a":
     Ident "+"
     BinaryOp "-a + ~a + !a + ++a":
      Ident "+"
      BinaryOp "-a + ~a + !a":
       Ident "+"
       BinaryOp "-a + ~a":
        Ident "+"
        UnaryOp "-a":
         Ident "-"
         Ident "a"
        UnaryOp "~a":
         Ident "~"
         Ident "a"
       UnaryOp "!a":
        Ident "!"
        Ident "a"
      UnaryOp "++a":
       Ident "++"
       Ident "a"
     UnaryOp "--a":
      Ident "--"
      Ident "a"
 StructDeclaration(None) "struct":
  Ident "Foo"
  Group ":":
   StructField(None, false) "a, b, c: int":
    Ident "a"
    Ident "b"
    Ident "c"
    Ident "int"
 StructDeclaration(None) "struct":
  Ident "Goo"
  Group ":":
   StructField(None, true) "foo: Foo":
    Ident "foo"
    Ident "Foo"
   StructField(None, false) "gva: int":
    Ident "gva"
    Ident "int"
 Fun(None) "fun strings -> i64:\r\n  var hello = \"hello\"\r\n  return 0":
  FunHeader "fun strings -> i64":
   Ident "strings"
   Ident "i64"
  Group ":":
   VarStatement(None, true) "var hello = \"hello\"":
    VarAssign "hello = \"hello\"":
     Group "hello":
      Ident "hello"
     None ""
     Group "=":
      Lit "\"hello\""
   ReturnStatement "return 0":
    Lit "0"
 Fun(None) "fun mutable_ref(a: &Foo):\r\n  a.a = 10\r\n  a.b = 20\r\n  a.c = 30":
  FunHeader "fun mutable_ref(a: &Foo)":
   Ident "mutable_ref"
   FunArgument(false) "a: &Foo":
    Ident "a"
    Ref "&Foo":
     Ident "Foo"
   None ""
  Group ":":
   BinaryOp "a.a = 10":
    Ident "="
    DotExpr "a.a":
     Ident "a"
     Ident "a"
    Lit "10"
   BinaryOp "a.b = 20":
    Ident "="
    DotExpr "a.b":
     Ident "a"
     Ident "b"
    Lit "20"
   BinaryOp "a.c = 30":
    Ident "="
    DotExpr "a.c":
     Ident "a"
     Ident "c"
    Lit "30"
 Fun(None) "fun some_string -> &u8:\r\n  \"\r\nhello there\r\n  \"":
  FunHeader "fun some_string -> &u8":
   Ident "some_string"
   Ref "&u8":
    Ident "u8"
  Group ":":
   Lit "\"\r\nhello there\r\n  \""

Manifest0
(ID(7136432111909353704), Manifest(1))
Manifest0
fun print(s: &Self, value: &u8)

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): int = VarDecl(Value(2)) |i = 0
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst4[]
    Value(4): int = Cast(Value(1)) |value as int
    Value(5): int = Call(Fun(260), [Value(4), Value(3)]) |(value as int + i)
    Value(6): &u8 = Cast(Value(5)) |((value as int + i) as &u8)
    Value(7): u8 = Deref(Value(6), false) |*((value as int + i) as &u8)
    Value(8): u8 = VarDecl(Value(7)) |value = *((value as int + i) as &u8)
    Value(9): u8 = Lit(Uint(0, 8)) |0u8
    Value(10): bool = Call(Fun(306), [Value(8), Value(9)]) |value == 0u8
    JumpIfTrue(Value(10), Inst(15), []) |value == 0u8
    Jump(Inst(17), []) |

  Inst15[]
    Jump(Inst(5), []) |break

  Inst17[]
    Value(11): int = Lit(Int(1, 0)) |1
    Value(12): int = Call(Fun(260), [Value(3), Value(11)]) |i += 1
    Value(12): int = Assign(Value(3)) |i += 1
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst5[]
    Call(Fun(477), [Value(0), Value(3)]) |s.reserve(i)
    Value(14): &Seq[u8] = Offset(Value(0)) |s.len
    Value(15): Seq[u8] = Deref(Value(14), false) |s.len
    Value(13): int = Offset(Value(15)) |s.len
    Value(16): &u8 = Call(Fun(478), [Value(0), Value(13)]) |s.get_unchecked(s.len)
    Call(Fun(442), [Value(16), Value(1), Value(3)]) |memcpy(s.get_unchecked(s.len), value, i)
    Value(18): &Seq[u8] = Offset(Value(0)) |s.len
    Value(19): Seq[u8] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[u8] = Offset(Value(0)) |s.len
    Value(22): Seq[u8] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Call(Fun(260), [Value(20), Value(3)]) |s.len += i
    Value(23): int = Assign(Value(17)) |s.len += i
    Return(None) |s.len += i


Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 3354..3389, line: 163, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4921..4966, line: 226, column: 6 } }
function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64, i64) windows_fastcall
    fn0 = u0:24 sig0
    fn1 = u0:20 sig1

block0(v0: i64, v1: i64):
    v32 = iconst.i64 0
    v3 -> v32
    v2 = iconst.i64 0
    jump block1(v2)

block1(v4: i64):
    v10 -> v4
    v12 -> v4
    v29 -> v4
    v33 -> v4
    v5 = iadd.i64 v1, v4
    v6 = load.i8 v5
    v7 = iconst.i8 0
    v8 = icmp eq v6, v7
    brnz v8, block2
    jump block3

block2:
    jump block4

block3:
    v9 = iconst.i64 1
    v11 = iadd.i64 v10, v9
    jump block1(v11)

block4:
    jump block5(v0, v12)

block5(v13: i64, v14: i64):
    v15 = load.i64 v13+16
    v16 = icmp sgt v15, v14
    brnz v16, block6
    jump block7

block6:
    jump block8

block7:
    v17 = iconst.i64 1
    v18 = imul.i64 v14, v17
    v19 = load.i64 v13
    v20 = call fn0(v19, v18)
    store v20, v13
    store.i64 v14, v13+16
    jump block8

block8:
    v21 = load.i64 v0+8
    jump block9(v0, v21)

block9(v22: i64, v23: i64):
    v25 = iconst.i64 1
    v26 = imul v23, v25
    v27 = load.i64 v22
    v28 = iadd v27, v26
    jump block10(v28)

block10(v24: i64):
    call fn1(v24, v1, v29)
    v30 = load.i64 v0+8
    v31 = iadd v30, v29
    store v31, v0+8
    return
}

fun pub sizeof[T] -> int


fun print_int(s: &Self, value: int)

  Inst1[Value(0), Value(1)]
    Value(2): int = VarDecl(Value(1)) |value = value
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst3[]
    Value(3): int = Lit(Int(0, 0)) |0
    Value(4): bool = Call(Fun(310), [Value(2), Value(3)]) |value == 0
    JumpIfTrue(Value(4), Inst(9), []) |value == 0
    Jump(Inst(11), []) |

  Inst9[]
    Jump(Inst(4), []) |break

  Inst11[]
    Value(5): int = Lit(Int(10, 0)) |10
    Value(6): int = Call(Fun(300), [Value(2), Value(5)]) |value % 10
    Value(7): int = VarDecl(Value(6)) |digit = value % 10
    Value(8): int = Lit(Int(10, 0)) |10
    Value(9): int = Call(Fun(290), [Value(2), Value(8)]) |value / 10
    Value(9): int = Assign(Value(2)) |value = value / 10
    Value(10): u32 = Call(Fun(96), [Value(7)]) |digit.u32()
    Value(11): i32 = Lit(Char('0')) |'0'
    Value(12): u32 = Call(Fun(258), [Value(10), Value(11)]) |(
    Value(13): u8 = Call(Fun(63), [Value(12)]) |(digit.u32() + '0').u8()
    Call(Fun(480), [Value(0), Value(13)]) |s.push((digit.u32() + '0').u8())
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst4[]
    Return(None) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())


Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4102..4130, line: 196, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4921..4966, line: 226, column: 6 } }
function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:24 sig0

block0(v0: i64, v1: i64):
    v43 = iconst.i64 0
    v42 -> v43
    v39 = iconst.i64 0
    v2 -> v39
    jump block1(v1, v42)

block1(v4: i64, v41: i64):
    v7 -> v4
    v9 -> v41
    v3 = iconst.i64 0
    v5 = icmp eq v4, v3
    brnz v5, block2
    jump block3

block2:
    jump block4

block3:
    v6 = iconst.i64 10
    v8 = srem.i64 v7, v6
    v46 -> v8
    v48 -> v8
    v44 -> v46
    v10 = iconst.i64 10
    v11 = sdiv.i64 v7, v10
    v45 -> v11
    v47 -> v11
    v40 -> v45
    v12 = ireduce.i32 v8
    v13 = iconst.i32 48
    v14 = iadd v12, v13
    v15 = ireduce.i8 v14
    jump block5(v0, v15)

block5(v16: i64, v17: i8):
    v18 = iconst.i64 1
    v19 = load.i64 v16+8
    v20 = iadd v19, v18
    v21 = load.i64 v16+16
    v22 = icmp sgt v20, v21
    brnz v22, block6
    jump block7

block6:
    v23 = iconst.i64 2
    v24 = load.i64 v16+8
    v25 = imul v24, v23
    store v25, v16+16
    v26 = iconst.i64 1
    v27 = load.i64 v16+16
    v28 = imul v27, v26
    v29 = load.i64 v16
    v30 = call fn0(v29, v28)
    store v30, v16
    jump block7

block7:
    v31 = load.i64 v16+8
    jump block9(v16, v31)

block9(v32: i64, v33: i64):
    v35 = iconst.i64 1
    v36 = imul v33, v35
    v37 = load.i64 v32
    v38 = iadd v37, v36
    jump block10(v38)

block10(v34: i64):
    store.i8 v17, v34
    store.i64 v20, v16+8
    jump block8

block8:
    jump block1(v40, v44)

block4:
    return
}

fun pub pop_frame

  Inst1[]
    Value(0): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(2): &Seq[StackFrame] = Ref(Value(0)) |stacktrace.pop()
    Value(1): Option[StackFrame] = Call(Fun(481), [Value(2), Value(1)]) |stacktrace.pop()
    Return(None) |stacktrace.pop()


Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4349..4379, line: 205, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4921..4966, line: 226, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 5357..5383, line: 246, column: 6 } }
function u0:0() fast {
    ss0 = explicit_slot 32
    ss1 = explicit_slot 24
    ss2 = explicit_slot 32
    ss3 = explicit_slot 32
    gv0 = symbol colocated u1:0

block0:
    v0 = global_value.i64 gv0
    v1 = stack_addr.i64 ss0
    jump block1(v0, v1)

block1(v2: i64, v3: i64):
    v5 = iconst.i64 0
    v6 = load.i64 v2+8
    v7 = icmp eq v6, v5
    brnz v7, block2
    jump block3

block2:
    v8 = iconst.i64 0
    store v8, v3
    store v8, v3+8
    store v8, v3+16
    store v8, v3+24
    jump block4(v3)

block3:
    v9 = iconst.i64 1
    v10 = load.i64 v2+8
    v11 = isub v10, v9
    jump block5(v2, v11)

block5(v12: i64, v13: i64):
    v15 = iconst.i64 24
    v16 = imul v13, v15
    v17 = load.i64 v12
    v18 = iadd v17, v16
    jump block6(v18)

block6(v14: i64):
    v19 = stack_addr.i64 ss1
    v20 = load.i64 v14
    store v20, v19
    v21 = load.i64 v14+8
    store v21, v19+8
    v22 = load.i64 v14+16
    store v22, v19+16
    v23 = iconst.i64 1
    v24 = load.i64 v2+8
    v25 = isub v24, v23
    store v25, v2+8
    v26 = stack_addr.i64 ss1
    v27 = stack_addr.i64 ss2
    jump block7(v26, v27)

block7(v28: i64, v29: i64):
    v31 = iconst.i64 0
    stack_store v31, ss3
    stack_store v31, ss3+8
    stack_store v31, ss3+16
    stack_store v31, ss3+24
    v32 = stack_addr.i64 ss3
    v33 = load.i64 v28
    store v33, v32
    v34 = load.i64 v28+8
    store v34, v32+8
    v35 = load.i64 v28+16
    store v35, v32+16
    v36 = bconst.b1 true
    v37 = bint.i8 v36
    stack_store v37, ss3+24
    v38 = stack_addr.i64 ss3
    v39 = load.i64 v38
    store v39, v29
    v40 = load.i64 v38+8
    store v40, v29+8
    v41 = load.i64 v38+16
    store v41, v29+16
    v42 = load.i64 v38+24
    store v42, v29+24
    jump block8(v29)

block8(v30: i64):
    v43 = load.i64 v30
    store v43, v3
    v44 = load.i64 v30+8
    store v44, v3+8
    v45 = load.i64 v30+16
    store v45, v3+16
    v46 = load.i64 v30+24
    store v46, v3+24
    jump block4(v3)

block4(v4: i64):
    return
}

fun pub sizeof[T] -> int


fun pub push_frame(line, column: int, file: &u8)

  Inst1[Value(0), Value(1), Value(2)]
    Value(3): StackFrame = Zeroed |frame: StackFrame
    Value(4): StackFrame = VarDecl(Value(3)) |frame: StackFrame
    Value(5): int = Offset(Value(4)) |frame.line
    Value(0): int = Assign(Value(5)) |frame.line = line
    Value(6): int = Offset(Value(4)) |frame.column
    Value(1): int = Assign(Value(6)) |frame.column = column
    Value(7): &u8 = Offset(Value(4)) |frame.file
    Value(2): &u8 = Assign(Value(7)) |frame.file = file
    Value(8): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(9): &Seq[StackFrame] = Ref(Value(8)) |stacktrace.push(frame)
    Call(Fun(485), [Value(9), Value(4)]) |stacktrace.push(frame)
    Return(None) |stacktrace.push(frame)


Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4102..4130, line: 196, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4921..4966, line: 226, column: 6 } }
function u0:0(i64, i64, i64) fast {
    ss0 = explicit_slot 24
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:24 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = iconst.i64 0
    stack_store v3, ss0
    stack_store v3, ss0+8
    stack_store v3, ss0+16
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    v4 = global_value.i64 gv0
    v5 = stack_addr.i64 ss0
    jump block1(v4, v5)

block1(v6: i64, v7: i64):
    v8 = iconst.i64 1
    v9 = load.i64 v6+8
    v10 = iadd v9, v8
    v11 = load.i64 v6+16
    v12 = icmp sgt v10, v11
    brnz v12, block2
    jump block3

block2:
    v13 = iconst.i64 2
    v14 = load.i64 v6+8
    v15 = imul v14, v13
    store v15, v6+16
    v16 = iconst.i64 24
    v17 = load.i64 v6+16
    v18 = imul v17, v16
    v19 = load.i64 v6
    v20 = call fn0(v19, v18)
    store v20, v6
    jump block3

block3:
    v21 = load.i64 v6+8
    jump block5(v6, v21)

block5(v22: i64, v23: i64):
    v25 = iconst.i64 24
    v26 = imul v23, v25
    v27 = load.i64 v22
    v28 = iadd v27, v26
    jump block6(v28)

block6(v24: i64):
    v29 = load.i64 v7
    store v29, v24
    v30 = load.i64 v7+8
    store v30, v24+8
    v31 = load.i64 v7+16
    store v31, v24+16
    store.i64 v10, v6+8
    jump block4

block4:
    return
}

fun pub panic(msg: &u8)

  Inst1[Value(0)]
    Value(1): &u8 = Lit(String(Span { source: Source(0), hash: ID(13432806085582464995), range: 117..125, line: 0, column: 0 })) |"panic: "
    Call(Fun(443), [Value(1)]) |print("panic: ")
    Call(Fun(443), [Value(0)]) |print(msg)
    Value(2): &u8 = Lit(String(Span { source: Source(0), hash: ID(655990), range: 125..127, line: 0, column: 0 })) |"\n"
    Call(Fun(443), [Value(2)]) |print("\n")
    Value(3): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(4): int = Offset(Value(3)) |stacktrace.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(4), Value(5)]) |stacktrace.len == 0
    JumpIfTrue(Value(6), Inst(11), []) |stacktrace.len == 0
    Jump(Inst(13), []) |

  Inst11[]
    Value(7): &u8 = Lit(String(Span { source: Source(0), hash: ID(16979661566361224870), range: 127..202, line: 0, column: 0 })) |"no stacktrace available, use '-trace' when building to generate stactrace\n"
    Call(Fun(443), [Value(7)]) |print("no stacktrace available, use '-trace' when building to generate stactrace\n")
    Value(8): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(8)]) |exit(1)
    Return(None) |return

  Inst13[]
    Value(9): Seq[u8] = Zeroed |buffer: Seq[u8]
    Value(10): Seq[u8] = VarDecl(Value(9)) |buffer: Seq[u8]
    Value(11): int = Zeroed |i: int
    Value(12): int = VarDecl(Value(11)) |i: int
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst26[]
    Value(13): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(14): int = Offset(Value(13)) |stacktrace.len
    Value(15): bool = Call(Fun(330), [Value(12), Value(14)]) |i >= stacktrace.len
    JumpIfTrue(Value(15), Inst(33), []) |i >= stacktrace.len
    Jump(Inst(35), []) |

  Inst33[]
    Jump(Inst(27), []) |break

  Inst35[]
    Value(16): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(18): &Seq[StackFrame] = Ref(Value(16)) |stacktrace[i]
    Value(17): &StackFrame = Call(Fun(486), [Value(18), Value(12)]) |stacktrace[i]
    Value(19): StackFrame = Deref(Value(17), false) |stacktrace[i]
    Value(20): StackFrame = VarDecl(Value(19)) |frame = stacktrace[i]
    Value(21): int = Offset(Value(20)) |frame.line
    Value(22): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.line)
    Call(Fun(456), [Value(22), Value(21)]) |buffer.print_int(frame.line)
    Value(23): i32 = Lit(Char(':')) |':'
    Value(24): u8 = Call(Fun(59), [Value(23)]) |':'.u8()
    Value(25): &Seq[u8] = Ref(Value(10)) |buffer.push(':'.u8())
    Call(Fun(480), [Value(25), Value(24)]) |buffer.push(':'.u8())
    Value(26): int = Offset(Value(20)) |frame.column
    Value(27): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.column)
    Call(Fun(456), [Value(27), Value(26)]) |buffer.print_int(frame.column)
    Value(28): i32 = Lit(Char(' ')) |' '
    Value(29): u8 = Call(Fun(59), [Value(28)]) |' '.u8()
    Value(30): &Seq[u8] = Ref(Value(10)) |buffer.push(' '.u8())
    Call(Fun(480), [Value(30), Value(29)]) |buffer.push(' '.u8())
    Value(31): &u8 = Offset(Value(20)) |frame.file
    Value(32): &Seq[u8] = Ref(Value(10)) |buffer.print(frame.file)
    Call(Fun(457), [Value(32), Value(31)]) |buffer.print(frame.file)
    Value(33): i32 = Lit(Char('\n')) |'\n'
    Value(34): u8 = Call(Fun(59), [Value(33)]) |'\n'.u8()
    Value(35): &Seq[u8] = Ref(Value(10)) |buffer.push('\n'.u8())
    Call(Fun(480), [Value(35), Value(34)]) |buffer.push('\n'.u8())
    Value(36): int = Lit(Int(1, 0)) |1
    Value(37): int = Call(Fun(260), [Value(12), Value(36)]) |i += 1
    Value(37): int = Assign(Value(12)) |i += 1
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst27[]
    Value(38): i32 = Lit(Char('\u{0}')) |'\0'
    Value(39): u8 = Call(Fun(59), [Value(38)]) |'\0'.u8()
    Value(40): &Seq[u8] = Ref(Value(10)) |buffer.push('\0'.u8())
    Call(Fun(480), [Value(40), Value(39)]) |buffer.push('\0'.u8())
    Value(41): &u8 = Offset(Value(10)) |buffer.data
    Call(Fun(443), [Value(41)]) |print(buffer.data)
    Value(42): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(42)]) |exit(1)
    Return(None) |exit(1)


Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4629..4670, line: 217, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 5027..5069, line: 229, column: 7 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 5143..5186, line: 233, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4921..4966, line: 226, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4102..4130, line: 196, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4921..4966, line: 226, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4102..4130, line: 196, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4921..4966, line: 226, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4102..4130, line: 196, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4921..4966, line: 226, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4102..4130, line: 196, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 4921..4966, line: 226, column: 6 } }
function u0:0(i64) fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 24
    gv0 = symbol colocated u1:1
    gv1 = symbol colocated u1:2
    gv2 = symbol colocated u1:0
    gv3 = symbol colocated u1:3
    gv4 = symbol colocated u1:4
    sig0 = (i64) windows_fastcall
    sig1 = (i64) windows_fastcall
    sig2 = (i64) fast
    sig3 = (i64, i64) fast
    sig4 = (i64, i64) -> i64 windows_fastcall
    sig5 = (i64, i64) fast
    fn0 = u0:19 sig0
    fn1 = u0:18 sig1
    fn2 = colocated u0:13 sig2
    fn3 = colocated u0:4 sig3
    fn4 = u0:24 sig4
    fn5 = colocated u0:0 sig5

block0(v0: i64):
    v161 = iconst.i64 0
    v11 -> v161
    v160 -> v161
    v1 = global_value.i64 gv0
    call fn0(v1)
    call fn0(v0)
    v2 = global_value.i64 gv1
    call fn0(v2)
    v3 = global_value.i64 gv2
    v4 = iconst.i64 0
    v5 = load.i64 v3+8
    v6 = icmp eq v5, v4
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv3
    call fn0(v7)
    v8 = iconst.i64 1
    call fn1(v8)
    return

block2:
    v9 = iconst.i64 0
    stack_store v9, ss0
    stack_store v9, ss0+8
    stack_store v9, ss0+16
    v10 = iconst.i64 0
    jump block3(v10)

block3(v13: i64):
    v17 -> v13
    v162 -> v13
    v163 -> v13
    v164 -> v13
    v165 -> v13
    v166 -> v13
    v130 -> v162
    v12 = global_value.i64 gv2
    v14 = load.i64 v12+8
    v15 = icmp sge v13, v14
    brnz v15, block4
    jump block5

block4:
    jump block6

block5:
    v16 = global_value.i64 gv2
    jump block7(v16, v17)

block7(v18: i64, v19: i64):
    jump block9(v18, v19)

block9(v21: i64, v22: i64):
    jump block13(v21, v22)

block13(v23: i64, v24: i64):
    v26 = iconst.i64 0
    v27 = icmp sge v24, v26
    v28 = load.i64 v23+8
    v29 = icmp slt v24, v28
    v30 = band v27, v29
    jump block14(v30)

block14(v25: b1):
    v31 = bint.i8 v25
    v32 = icmp_imm eq v31, 0
    brnz v32, block10
    jump block11

block10:
    v33 = global_value.i64 gv4
    call fn2(v33)
    jump block11

block11:
    jump block12

block12:
    jump block15(v18, v19)

block15(v34: i64, v35: i64):
    v37 = iconst.i64 24
    v38 = imul v35, v37
    v39 = load.i64 v34
    v40 = iadd v39, v38
    jump block16(v40)

block16(v36: i64):
    jump block8(v36)

block8(v20: i64):
    v41 = stack_addr.i64 ss1
    v42 = load.i64 v20
    store v42, v41
    v43 = load.i64 v20+8
    store v43, v41+8
    v44 = load.i64 v20+16
    store v44, v41+16
    v45 = stack_addr.i64 ss0
    v46 = stack_load.i64 ss1
    call fn3(v45, v46)
    v47 = iconst.i32 58
    v48 = ireduce.i8 v47
    v49 = stack_addr.i64 ss0
    jump block17(v49, v48)

block17(v50: i64, v51: i8):
    v52 = iconst.i64 1
    v53 = load.i64 v50+8
    v54 = iadd v53, v52
    v55 = load.i64 v50+16
    v56 = icmp sgt v54, v55
    brnz v56, block18
    jump block19

block18:
    v57 = iconst.i64 2
    v58 = load.i64 v50+8
    v59 = imul v58, v57
    store v59, v50+16
    v60 = iconst.i64 1
    v61 = load.i64 v50+16
    v62 = imul v61, v60
    v63 = load.i64 v50
    v64 = call fn4(v63, v62)
    store v64, v50
    jump block19

block19:
    v65 = load.i64 v50+8
    jump block21(v50, v65)

block21(v66: i64, v67: i64):
    v69 = iconst.i64 1
    v70 = imul v67, v69
    v71 = load.i64 v66
    v72 = iadd v71, v70
    jump block22(v72)

block22(v68: i64):
    store.i8 v51, v68
    store.i64 v54, v50+8
    jump block20

block20:
    v73 = stack_addr.i64 ss0
    v74 = stack_load.i64 ss1+8
    call fn3(v73, v74)
    v75 = iconst.i32 32
    v76 = ireduce.i8 v75
    v77 = stack_addr.i64 ss0
    jump block23(v77, v76)

block23(v78: i64, v79: i8):
    v80 = iconst.i64 1
    v81 = load.i64 v78+8
    v82 = iadd v81, v80
    v83 = load.i64 v78+16
    v84 = icmp sgt v82, v83
    brnz v84, block24
    jump block25

block24:
    v85 = iconst.i64 2
    v86 = load.i64 v78+8
    v87 = imul v86, v85
    store v87, v78+16
    v88 = iconst.i64 1
    v89 = load.i64 v78+16
    v90 = imul v89, v88
    v91 = load.i64 v78
    v92 = call fn4(v91, v90)
    store v92, v78
    jump block25

block25:
    v93 = load.i64 v78+8
    jump block27(v78, v93)

block27(v94: i64, v95: i64):
    v97 = iconst.i64 1
    v98 = imul v95, v97
    v99 = load.i64 v94
    v100 = iadd v99, v98
    jump block28(v100)

block28(v96: i64):
    store.i8 v79, v96
    store.i64 v82, v78+8
    jump block26

block26:
    v101 = stack_addr.i64 ss0
    v102 = stack_load.i64 ss1+16
    call fn5(v101, v102)
    v103 = iconst.i32 10
    v104 = ireduce.i8 v103
    v105 = stack_addr.i64 ss0
    jump block29(v105, v104)

block29(v106: i64, v107: i8):
    v108 = iconst.i64 1
    v109 = load.i64 v106+8
    v110 = iadd v109, v108
    v111 = load.i64 v106+16
    v112 = icmp sgt v110, v111
    brnz v112, block30
    jump block31

block30:
    v113 = iconst.i64 2
    v114 = load.i64 v106+8
    v115 = imul v114, v113
    store v115, v106+16
    v116 = iconst.i64 1
    v117 = load.i64 v106+16
    v118 = imul v117, v116
    v119 = load.i64 v106
    v120 = call fn4(v119, v118)
    store v120, v106
    jump block31

block31:
    v121 = load.i64 v106+8
    jump block33(v106, v121)

block33(v122: i64, v123: i64):
    v125 = iconst.i64 1
    v126 = imul v123, v125
    v127 = load.i64 v122
    v128 = iadd v127, v126
    jump block34(v128)

block34(v124: i64):
    store.i8 v107, v124
    store.i64 v110, v106+8
    jump block32

block32:
    v129 = iconst.i64 1
    v131 = iadd.i64 v130, v129
    jump block3(v131)

block6:
    v132 = iconst.i32 0
    v133 = ireduce.i8 v132
    v134 = stack_addr.i64 ss0
    jump block35(v134, v133)

block35(v135: i64, v136: i8):
    v137 = iconst.i64 1
    v138 = load.i64 v135+8
    v139 = iadd v138, v137
    v140 = load.i64 v135+16
    v141 = icmp sgt v139, v140
    brnz v141, block36
    jump block37

block36:
    v142 = iconst.i64 2
    v143 = load.i64 v135+8
    v144 = imul v143, v142
    store v144, v135+16
    v145 = iconst.i64 1
    v146 = load.i64 v135+16
    v147 = imul v146, v145
    v148 = load.i64 v135
    v149 = call fn4(v148, v147)
    store v149, v135
    jump block37

block37:
    v150 = load.i64 v135+8
    jump block39(v135, v150)

block39(v151: i64, v152: i64):
    v154 = iconst.i64 1
    v155 = imul v152, v154
    v156 = load.i64 v151
    v157 = iadd v156, v155
    jump block40(v157)

block40(v153: i64):
    store.i8 v136, v153
    store.i64 v139, v135+8
    jump block38

block38:
    v158 = stack_load.i64 ss0
    call fn0(v158)
    v159 = iconst.i64 1
    call fn1(v159)
    return
}

fun pub exit(code: int)


fun pub print(str: &u8)


fun pub memcpy(dest: &u8, src: &u8, size: int)


fun pub memmove(dest: &u8, src: &u8, size: int)


fun pub memset(ptr: &u8, value: u8, size: int)


fun pub free(ptr: &u8)


fun pub realloc(ptr: &u8, size: int) -> &u8


fun pub alloc(size: int) -> &u8


fun assert(cond: bool)

  Inst1[Value(0)]
    Value(1): int = Lit(Int(217, 0)) |builtin::assert(cond)
    Value(2): int = Lit(Int(10, 0)) |builtin::assert(cond)
    Value(3): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |builtin::assert(cond)
    Call(Fun(447), [Value(1), Value(2), Value(3)]) |builtin::assert(cond)
    Call(Fun(445), [Value(0)]) |builtin::assert(cond)
    Call(Fun(448), []) |builtin::assert(cond)
    Value(4): &u8 = Lit(String(Span { source: Source(0), hash: ID(31334373625102386), range: 337..341, line: 0, column: 0 })) |"ok\n"
    Value(5): int = Lit(Int(218, 0)) |print("ok\n")
    Value(6): int = Lit(Int(8, 0)) |print("ok\n")
    Value(7): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |print("ok\n")
    Call(Fun(447), [Value(5), Value(6), Value(7)]) |print("ok\n")
    Call(Fun(443), [Value(4)]) |print("ok\n")
    Call(Fun(448), []) |print("ok\n")
    Return(None) |print("ok\n")


Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 593..619, line: 33, column: 4 } }
function u0:0(b1) fast {
    gv0 = symbol colocated u1:7
    gv1 = symbol colocated u1:8
    gv2 = symbol colocated u1:9
    sig0 = (i64, i64, i64) fast
    sig1 = (i64) fast
    sig2 = () fast
    sig3 = (i64) windows_fastcall
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:13 sig1
    fn2 = colocated u0:6 sig2
    fn3 = u0:19 sig3

block0(v0: b1):
    v1 = iconst.i64 217
    v2 = iconst.i64 10
    v3 = global_value.i64 gv0
    call fn0(v1, v2, v3)
    jump block1(v0)

block1(v4: b1):
    v5 = bint.i8 v4
    v6 = icmp_imm eq v5, 0
    brnz v6, block2
    jump block3

block2:
    v7 = global_value.i64 gv1
    call fn1(v7)
    jump block3

block3:
    jump block4

block4:
    call fn2()
    v8 = global_value.i64 gv2
    v9 = iconst.i64 218
    v10 = iconst.i64 8
    v11 = global_value.i64 gv0
    call fn0(v9, v10, v11)
    call fn3(v8)
    call fn2()
    return
}

fun test_case_13

  Inst1[]
    Value(0): int = Lit(Int(1, 0)) |1
    Value(1): int = Lit(Int(1, 0)) |1
    Value(3): int = Lit(Int(214, 0)) |even_worse(1, 1)
    Value(4): int = Lit(Int(20, 0)) |even_worse(1, 1)
    Value(5): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |even_worse(1, 1)
    Call(Fun(447), [Value(3), Value(4), Value(5)]) |even_worse(1, 1)
    Value(2): int = Call(Fun(508), [Value(0), Value(1)]) |even_worse(1, 1)
    Call(Fun(448), []) |even_worse(1, 1)
    Value(6): int = Lit(Int(0, 0)) |0
    Value(7): bool = Call(Fun(310), [Value(2), Value(6)]) |even_worse(1, 1) == 0
    Value(8): int = Lit(Int(214, 0)) |assert(even_worse(1, 1) == 0)
    Value(9): int = Lit(Int(9, 0)) |assert(even_worse(1, 1) == 0)
    Value(10): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(even_worse(1, 1) == 0)
    Call(Fun(447), [Value(8), Value(9), Value(10)]) |assert(even_worse(1, 1) == 0)
    Call(Fun(510), [Value(7)]) |assert(even_worse(1, 1) == 0)
    Call(Fun(448), []) |assert(even_worse(1, 1) == 0)
    Return(None) |assert(even_worse(1, 1) == 0)


Token { kind: Fun, span: Span { source: Source(3), hash: ID(438937012895), range: 2856..2888, line: 206, column: 4 } }
Token { kind: Fun, span: Span { source: Source(3), hash: ID(438937012895), range: 2785..2816, line: 202, column: 4 } }
Token { kind: Fun, span: Span { source: Source(3), hash: ID(438937012895), range: 2785..2816, line: 202, column: 4 } }
function u0:0() fast {
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = () fast
    sig2 = (b1) fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:6 sig1
    fn2 = colocated u0:26 sig2

block0:
    v0 = iconst.i64 1
    v1 = iconst.i64 1
    v2 = iconst.i64 214
    v3 = iconst.i64 20
    v4 = global_value.i64 gv0
    call fn0(v2, v3, v4)
    jump block1(v0, v1)

block1(v5: i64, v6: i64):
    v8 = icmp sgt v5, v6
    brnz v8, block2
    jump block3

block2:
    v9 = iconst.i64 208
    v10 = iconst.i64 21
    v11 = global_value.i64 gv0
    call fn0(v9, v10, v11)
    jump block6(v5, v6)

block6(v12: i64, v13: i64):
    v15 = iadd v12, v13
    v16 = iconst.i64 2
    v17 = imul v16, v12
    v18 = isub v15, v17
    jump block7(v18)

block7(v14: i64):
    call fn1()
    jump block5(v14)

block3:
    v19 = iconst.i64 210
    v20 = iconst.i64 21
    v21 = global_value.i64 gv0
    call fn0(v19, v20, v21)
    jump block8(v6, v5)

block8(v22: i64, v23: i64):
    v25 = iadd v22, v23
    v26 = iconst.i64 2
    v27 = imul v26, v22
    v28 = isub v25, v27
    jump block9(v28)

block9(v24: i64):
    call fn1()
    jump block5(v24)

block4:
    v29 = iconst.i64 0
    jump block5(v29)

block5(v7: i64):
    call fn1()
    v30 = iconst.i64 0
    v31 = icmp eq v7, v30
    v32 = iconst.i64 214
    v33 = iconst.i64 9
    v34 = global_value.i64 gv0
    call fn0(v32, v33, v34)
    call fn2(v31)
    call fn1()
    return
}

fun test_case_12

  Inst1[]
    Value(0): int = GlobalLoad(Global(2)) |a
    Value(1): int = Lit(Int(1, 0)) |1
    Value(2): bool = Call(Fun(310), [Value(0), Value(1)]) |a == 1
    Value(3): int = Lit(Int(198, 0)) |assert(a == 1)
    Value(4): int = Lit(Int(9, 0)) |assert(a == 1)
    Value(5): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(a == 1)
    Call(Fun(447), [Value(3), Value(4), Value(5)]) |assert(a == 1)
    Call(Fun(510), [Value(2)]) |assert(a == 1)
    Call(Fun(448), []) |assert(a == 1)
    Return(None) |assert(a == 1)


function u0:0() fast {
    gv0 = symbol colocated u1:6
    gv1 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2

block0:
    v0 = global_value.i64 gv0
    v1 = iconst.i64 1
    v2 = load.i64 v0
    v3 = icmp eq v2, v1
    v4 = iconst.i64 198
    v5 = iconst.i64 9
    v6 = global_value.i64 gv1
    call fn0(v4, v5, v6)
    call fn1(v3)
    call fn2()
    return
}

fun test_case_11

  Inst1[]
    Value(0): int = Lit(Int(1, 0)) |1
    Value(1): int = VarDecl(Value(0)) |a = 1
    Value(2): &int = Ref(Value(1)) |&a
    Value(3): &int = VarDecl(Value(2)) |b = &a
    Value(4): int = Deref(Value(3), true) |*b
    Value(5): int = Lit(Int(0, 0)) |0
    Value(5): int = Assign(Value(4)) |*b = 0
    Value(6): int = Lit(Int(0, 0)) |0
    Value(7): bool = Call(Fun(310), [Value(1), Value(6)]) |a == 0
    Value(8): int = Lit(Int(192, 0)) |assert(a == 0)
    Value(9): int = Lit(Int(9, 0)) |assert(a == 0)
    Value(10): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(a == 0)
    Call(Fun(447), [Value(8), Value(9), Value(10)]) |assert(a == 0)
    Call(Fun(510), [Value(7)]) |assert(a == 0)
    Call(Fun(448), []) |assert(a == 0)
    Return(None) |assert(a == 0)


function u0:0() fast {
    ss0 = explicit_slot 8
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2

block0:
    v10 = iconst.i64 0
    v2 -> v10
    v0 = iconst.i64 1
    stack_store v0, ss0
    v1 = stack_addr.i64 ss0
    v3 = iconst.i64 0
    store v3, v1
    v4 = iconst.i64 0
    v5 = stack_load.i64 ss0
    v6 = icmp eq v5, v4
    v7 = iconst.i64 192
    v8 = iconst.i64 9
    v9 = global_value.i64 gv0
    call fn0(v7, v8, v9)
    call fn1(v6)
    call fn2()
    return
}

fun test_case_10

  Inst1[]
    Value(0): int = Lit(Int(1, 0)) |1
    Value(1): int = Lit(Int(2, 0)) |2
    Value(2): int = Lit(Int(3, 0)) |3
    Value(3): int = Lit(Int(4, 0)) |4
    Value(4): int = Lit(Int(5, 0)) |5
    Value(5): int = Lit(Int(6, 0)) |6
    Value(6): int = Lit(Int(7, 0)) |7
    Value(7): int = Lit(Int(8, 0)) |8
    Value(8): int = Lit(Int(9, 0)) |9
    Value(9): int = Lit(Int(10, 0)) |10
    Value(10): [int, 10] = Uninitialized |[
    Value(11): int = Offset(Value(10)) |[
    Value(0): int = Assign(Value(11)) |[
    Value(12): int = Offset(Value(10)) |[
    Value(1): int = Assign(Value(12)) |[
    Value(13): int = Offset(Value(10)) |[
    Value(2): int = Assign(Value(13)) |[
    Value(14): int = Offset(Value(10)) |[
    Value(3): int = Assign(Value(14)) |[
    Value(15): int = Offset(Value(10)) |[
    Value(4): int = Assign(Value(15)) |[
    Value(16): int = Offset(Value(10)) |[
    Value(5): int = Assign(Value(16)) |[
    Value(17): int = Offset(Value(10)) |[
    Value(6): int = Assign(Value(17)) |[
    Value(18): int = Offset(Value(10)) |[
    Value(7): int = Assign(Value(18)) |[
    Value(19): int = Offset(Value(10)) |[
    Value(8): int = Assign(Value(19)) |[
    Value(20): int = Offset(Value(10)) |[
    Value(9): int = Assign(Value(20)) |[
    Value(21): [int, 10] = VarDecl(Value(10)) |array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    Value(22): int = Lit(Int(0, 0)) |0
    Value(23): int = VarDecl(Value(22)) |i = 0
    Value(24): int = Lit(Int(0, 0)) |0
    Value(25): int = VarDecl(Value(24)) |sum = 0
    Jump(Inst(38), []) |loop:
    if i >= array.len():
      break
    sum += array[i]
    storage[i] = array[i]
    i += 1

  Inst38[]
    Value(27): &[int, 10] = Ref(Value(21)) |array.len()
    Value(28): int = Lit(Int(180, 0)) |array.len()
    Value(29): int = Lit(Int(18, 0)) |array.len()
    Value(30): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |array.len()
    Call(Fun(447), [Value(28), Value(29), Value(30)]) |array.len()
    Value(26): int = Call(Fun(511), [Value(27)]) |array.len()
    Call(Fun(448), []) |array.len()
    Value(31): bool = Call(Fun(330), [Value(23), Value(26)]) |i >= array.len()
    JumpIfTrue(Value(31), Inst(50), []) |i >= array.len()
    Jump(Inst(52), []) |

  Inst50[]
    Jump(Inst(39), []) |break

  Inst52[]
    Value(33): &[int, 10] = Ref(Value(21)) |array[i]
    Value(34): int = Lit(Int(182, 0)) |array[i]
    Value(35): int = Lit(Int(17, 0)) |array[i]
    Value(36): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |array[i]
    Call(Fun(447), [Value(34), Value(35), Value(36)]) |array[i]
    Value(32): &int = Call(Fun(512), [Value(33), Value(23)]) |array[i]
    Call(Fun(448), []) |array[i]
    Value(37): int = Deref(Value(32), false) |array[i]
    Value(38): int = Call(Fun(260), [Value(25), Value(37)]) |sum += array[i]
    Value(38): int = Assign(Value(25)) |sum += array[i]
    Value(39): [int, 10] = GlobalLoad(Global(1)) |storage
    Value(41): &[int, 10] = Ref(Value(39)) |storage[i]
    Value(42): int = Lit(Int(183, 0)) |storage[i]
    Value(43): int = Lit(Int(12, 0)) |storage[i]
    Value(44): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |storage[i]
    Call(Fun(447), [Value(42), Value(43), Value(44)]) |storage[i]
    Value(40): &int = Call(Fun(512), [Value(41), Value(23)]) |storage[i]
    Call(Fun(448), []) |storage[i]
    Value(45): int = Deref(Value(40), true) |storage[i]
    Value(47): &[int, 10] = Ref(Value(21)) |array[i]
    Value(48): int = Lit(Int(183, 0)) |array[i]
    Value(49): int = Lit(Int(23, 0)) |array[i]
    Value(50): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |array[i]
    Call(Fun(447), [Value(48), Value(49), Value(50)]) |array[i]
    Value(46): &int = Call(Fun(512), [Value(47), Value(23)]) |array[i]
    Call(Fun(448), []) |array[i]
    Value(51): int = Deref(Value(46), false) |array[i]
    Value(51): int = Assign(Value(45)) |storage[i] = array[i]
    Value(52): int = Lit(Int(1, 0)) |1
    Value(53): int = Call(Fun(260), [Value(23), Value(52)]) |i += 1
    Value(53): int = Assign(Value(23)) |i += 1
    Jump(Inst(38), []) |loop:
    if i >= array.len():
      break
    sum += array[i]
    storage[i] = array[i]
    i += 1

  Inst39[]
    Value(54): int = Lit(Int(11, 0)) |11
    Value(55): int = Lit(Int(5, 0)) |5
    Value(56): int = Call(Fun(280), [Value(54), Value(55)]) |11 * 5
    Value(57): bool = Call(Fun(310), [Value(25), Value(56)]) |sum == 11 * 5
    Value(58): int = Lit(Int(186, 0)) |assert(sum == 11 * 5)
    Value(59): int = Lit(Int(9, 0)) |assert(sum == 11 * 5)
    Value(60): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(sum == 11 * 5)
    Call(Fun(447), [Value(58), Value(59), Value(60)]) |assert(sum == 11 * 5)
    Call(Fun(510), [Value(57)]) |assert(sum == 11 * 5)
    Call(Fun(448), []) |assert(sum == 11 * 5)
    Return(None) |assert(sum == 11 * 5)


Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2463..2491, line: 118, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2103..2144, line: 104, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2247..2292, line: 109, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2103..2144, line: 104, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2247..2292, line: 109, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2103..2144, line: 104, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2247..2292, line: 109, column: 6 } }
function u0:0() fast {
    ss0 = explicit_slot 80
    ss1 = explicit_slot 80
    gv0 = symbol colocated u1:7
    gv1 = symbol colocated u1:4
    gv2 = symbol colocated u1:5
    sig0 = (i64, i64, i64) fast
    sig1 = () fast
    sig2 = (i64) fast
    sig3 = (b1) fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:6 sig1
    fn2 = colocated u0:13 sig2
    fn3 = colocated u0:26 sig3

block0:
    v109 = iconst.i64 0
    v23 -> v109
    v108 = iconst.i64 0
    v21 -> v108
    v0 = iconst.i64 1
    v1 = iconst.i64 2
    v2 = iconst.i64 3
    v3 = iconst.i64 4
    v4 = iconst.i64 5
    v5 = iconst.i64 6
    v6 = iconst.i64 7
    v7 = iconst.i64 8
    v8 = iconst.i64 9
    v9 = iconst.i64 10
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    stack_store v3, ss0+24
    stack_store v4, ss0+32
    stack_store v5, ss0+40
    stack_store v6, ss0+48
    stack_store v7, ss0+56
    stack_store v8, ss0+64
    stack_store v9, ss0+72
    v10 = stack_load.i64 ss0
    stack_store v10, ss1
    v11 = stack_load.i64 ss0+8
    stack_store v11, ss1+8
    v12 = stack_load.i64 ss0+16
    stack_store v12, ss1+16
    v13 = stack_load.i64 ss0+24
    stack_store v13, ss1+24
    v14 = stack_load.i64 ss0+32
    stack_store v14, ss1+32
    v15 = stack_load.i64 ss0+40
    stack_store v15, ss1+40
    v16 = stack_load.i64 ss0+48
    stack_store v16, ss1+48
    v17 = stack_load.i64 ss0+56
    stack_store v17, ss1+56
    v18 = stack_load.i64 ss0+64
    stack_store v18, ss1+64
    v19 = stack_load.i64 ss0+72
    stack_store v19, ss1+72
    v20 = iconst.i64 0
    v22 = iconst.i64 0
    jump block1(v20, v22)

block1(v111: i64, v112: i64):
    v31 -> v111
    v115 -> v111
    v117 -> v111
    v118 -> v111
    v119 -> v111
    v120 -> v111
    v122 -> v111
    v98 -> v120
    v80 -> v118
    v60 -> v115
    v37 -> v31
    v110 -> v112
    v114 -> v112
    v116 -> v112
    v53 -> v114
    v103 -> v110
    v24 = stack_addr.i64 ss1
    v25 = iconst.i64 180
    v26 = iconst.i64 18
    v27 = global_value.i64 gv0
    call fn0(v25, v26, v27)
    jump block5(v24)

block5(v28: i64):
    v30 = iconst.i64 10
    jump block6(v30)

block6(v29: i64):
    call fn1()
    v32 = icmp.i64 sge v31, v29
    brnz v32, block2
    jump block3

block2:
    jump block4

block3:
    v33 = stack_addr.i64 ss1
    v34 = iconst.i64 182
    v35 = iconst.i64 17
    v36 = global_value.i64 gv0
    call fn0(v34, v35, v36)
    jump block7(v33, v37)

block7(v38: i64, v39: i64):
    v41 = iconst.i64 0
    v42 = icmp slt v39, v41
    v43 = iconst.i64 10
    v44 = icmp sge v39, v43
    v45 = bor v42, v44
    brnz v45, block8
    jump block9

block8:
    v46 = global_value.i64 gv1
    call fn2(v46)
    jump block9

block9:
    jump block11(v38, v39)

block11(v47: i64, v48: i64):
    v50 = iconst.i64 8
    v51 = imul v48, v50
    v52 = iadd v47, v51
    jump block12(v52)

block12(v49: i64):
    jump block10(v49)

block10(v40: i64):
    call fn1()
    v54 = load.i64 v40
    v55 = iadd.i64 v53, v54
    v121 -> v55
    v123 -> v55
    v124 -> v55
    v113 -> v121
    v56 = global_value.i64 gv2
    v57 = iconst.i64 183
    v58 = iconst.i64 12
    v59 = global_value.i64 gv0
    call fn0(v57, v58, v59)
    jump block13(v56, v60)

block13(v61: i64, v62: i64):
    v64 = iconst.i64 0
    v65 = icmp slt v62, v64
    v66 = iconst.i64 10
    v67 = icmp sge v62, v66
    v68 = bor v65, v67
    brnz v68, block14
    jump block15

block14:
    v69 = global_value.i64 gv1
    call fn2(v69)
    jump block15

block15:
    jump block17(v61, v62)

block17(v70: i64, v71: i64):
    v73 = iconst.i64 8
    v74 = imul v71, v73
    v75 = iadd v70, v74
    jump block18(v75)

block18(v72: i64):
    jump block16(v72)

block16(v63: i64):
    call fn1()
    v76 = stack_addr.i64 ss1
    v77 = iconst.i64 183
    v78 = iconst.i64 23
    v79 = global_value.i64 gv0
    call fn0(v77, v78, v79)
    jump block19(v76, v80)

block19(v81: i64, v82: i64):
    v84 = iconst.i64 0
    v85 = icmp slt v82, v84
    v86 = iconst.i64 10
    v87 = icmp sge v82, v86
    v88 = bor v85, v87
    brnz v88, block20
    jump block21

block20:
    v89 = global_value.i64 gv1
    call fn2(v89)
    jump block21

block21:
    jump block23(v81, v82)

block23(v90: i64, v91: i64):
    v93 = iconst.i64 8
    v94 = imul v91, v93
    v95 = iadd v90, v94
    jump block24(v95)

block24(v92: i64):
    jump block22(v92)

block22(v83: i64):
    call fn1()
    v96 = load.i64 v83
    store v96, v63
    v97 = iconst.i64 1
    v99 = iadd.i64 v98, v97
    jump block1(v99, v113)

block4:
    v100 = iconst.i64 11
    v101 = iconst.i64 5
    v102 = imul v100, v101
    v104 = icmp.i64 eq v103, v102
    v105 = iconst.i64 186
    v106 = iconst.i64 9
    v107 = global_value.i64 gv0
    call fn0(v105, v106, v107)
    call fn3(v104)
    call fn1()
    return
}

fun pub sizeof[T] -> int


fun test_case_9

  Inst1[]
    Value(0): int = Lit(Int(1, 0)) |1
    Value(1): int = Lit(Int(2, 0)) |2
    Value(2): int = Lit(Int(3, 0)) |3
    Value(3): int = Lit(Int(4, 0)) |4
    Value(4): int = Lit(Int(5, 0)) |5
    Value(5): int = Lit(Int(6, 0)) |6
    Value(6): int = Lit(Int(7, 0)) |7
    Value(7): int = Lit(Int(8, 0)) |8
    Value(8): int = Lit(Int(9, 0)) |9
    Value(9): int = Lit(Int(10, 0)) |10
    Value(10): [int, 10] = Uninitialized |[
    Value(11): int = Offset(Value(10)) |[
    Value(0): int = Assign(Value(11)) |[
    Value(12): int = Offset(Value(10)) |[
    Value(1): int = Assign(Value(12)) |[
    Value(13): int = Offset(Value(10)) |[
    Value(2): int = Assign(Value(13)) |[
    Value(14): int = Offset(Value(10)) |[
    Value(3): int = Assign(Value(14)) |[
    Value(15): int = Offset(Value(10)) |[
    Value(4): int = Assign(Value(15)) |[
    Value(16): int = Offset(Value(10)) |[
    Value(5): int = Assign(Value(16)) |[
    Value(17): int = Offset(Value(10)) |[
    Value(6): int = Assign(Value(17)) |[
    Value(18): int = Offset(Value(10)) |[
    Value(7): int = Assign(Value(18)) |[
    Value(19): int = Offset(Value(10)) |[
    Value(8): int = Assign(Value(19)) |[
    Value(20): int = Offset(Value(10)) |[
    Value(9): int = Assign(Value(20)) |[
    Value(21): [int, 10] = VarDecl(Value(10)) |array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    Value(22): int = Lit(Int(0, 0)) |0
    Value(23): int = VarDecl(Value(22)) |i = 0
    Value(24): int = Lit(Int(0, 0)) |0
    Value(25): int = VarDecl(Value(24)) |sum = 0
    Jump(Inst(38), []) |loop:
    if i >= array.len():
      break
    sum += array[i]
    i += 1

  Inst38[]
    Value(27): &[int, 10] = Ref(Value(21)) |array.len()
    Value(28): int = Lit(Int(162, 0)) |array.len()
    Value(29): int = Lit(Int(18, 0)) |array.len()
    Value(30): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |array.len()
    Call(Fun(447), [Value(28), Value(29), Value(30)]) |array.len()
    Value(26): int = Call(Fun(511), [Value(27)]) |array.len()
    Call(Fun(448), []) |array.len()
    Value(31): bool = Call(Fun(330), [Value(23), Value(26)]) |i >= array.len()
    JumpIfTrue(Value(31), Inst(50), []) |i >= array.len()
    Jump(Inst(52), []) |

  Inst50[]
    Jump(Inst(39), []) |break

  Inst52[]
    Value(33): &[int, 10] = Ref(Value(21)) |array[i]
    Value(34): int = Lit(Int(164, 0)) |array[i]
    Value(35): int = Lit(Int(17, 0)) |array[i]
    Value(36): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |array[i]
    Call(Fun(447), [Value(34), Value(35), Value(36)]) |array[i]
    Value(32): &int = Call(Fun(512), [Value(33), Value(23)]) |array[i]
    Call(Fun(448), []) |array[i]
    Value(37): int = Deref(Value(32), false) |array[i]
    Value(38): int = Call(Fun(260), [Value(25), Value(37)]) |sum += array[i]
    Value(38): int = Assign(Value(25)) |sum += array[i]
    Value(39): int = Lit(Int(1, 0)) |1
    Value(40): int = Call(Fun(260), [Value(23), Value(39)]) |i += 1
    Value(40): int = Assign(Value(23)) |i += 1
    Jump(Inst(38), []) |loop:
    if i >= array.len():
      break
    sum += array[i]
    i += 1

  Inst39[]
    Value(41): int = Lit(Int(11, 0)) |11
    Value(42): int = Lit(Int(5, 0)) |5
    Value(43): int = Call(Fun(280), [Value(41), Value(42)]) |11 * 5
    Value(44): bool = Call(Fun(310), [Value(25), Value(43)]) |sum == 11 * 5
    Value(45): int = Lit(Int(167, 0)) |assert(sum == 11 * 5)
    Value(46): int = Lit(Int(9, 0)) |assert(sum == 11 * 5)
    Value(47): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(sum == 11 * 5)
    Call(Fun(447), [Value(45), Value(46), Value(47)]) |assert(sum == 11 * 5)
    Call(Fun(510), [Value(44)]) |assert(sum == 11 * 5)
    Call(Fun(448), []) |assert(sum == 11 * 5)
    Return(None) |assert(sum == 11 * 5)


Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2463..2491, line: 118, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2103..2144, line: 104, column: 6 } }
Token { kind: Fun, span: Span { source: Source(1), hash: ID(438937012895), range: 2247..2292, line: 109, column: 6 } }
function u0:0() fast {
    ss0 = explicit_slot 80
    ss1 = explicit_slot 80
    gv0 = symbol colocated u1:7
    gv1 = symbol colocated u1:4
    sig0 = (i64, i64, i64) fast
    sig1 = () fast
    sig2 = (i64) fast
    sig3 = (b1) fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:6 sig1
    fn2 = colocated u0:13 sig2
    fn3 = colocated u0:26 sig3

block0:
    v68 = iconst.i64 0
    v23 -> v68
    v67 = iconst.i64 0
    v21 -> v67
    v0 = iconst.i64 1
    v1 = iconst.i64 2
    v2 = iconst.i64 3
    v3 = iconst.i64 4
    v4 = iconst.i64 5
    v5 = iconst.i64 6
    v6 = iconst.i64 7
    v7 = iconst.i64 8
    v8 = iconst.i64 9
    v9 = iconst.i64 10
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    stack_store v3, ss0+24
    stack_store v4, ss0+32
    stack_store v5, ss0+40
    stack_store v6, ss0+48
    stack_store v7, ss0+56
    stack_store v8, ss0+64
    stack_store v9, ss0+72
    v10 = stack_load.i64 ss0
    stack_store v10, ss1
    v11 = stack_load.i64 ss0+8
    stack_store v11, ss1+8
    v12 = stack_load.i64 ss0+16
    stack_store v12, ss1+16
    v13 = stack_load.i64 ss0+24
    stack_store v13, ss1+24
    v14 = stack_load.i64 ss0+32
    stack_store v14, ss1+32
    v15 = stack_load.i64 ss0+40
    stack_store v15, ss1+40
    v16 = stack_load.i64 ss0+48
    stack_store v16, ss1+48
    v17 = stack_load.i64 ss0+56
    stack_store v17, ss1+56
    v18 = stack_load.i64 ss0+64
    stack_store v18, ss1+64
    v19 = stack_load.i64 ss0+72
    stack_store v19, ss1+72
    v20 = iconst.i64 0
    v22 = iconst.i64 0
    jump block1(v20, v22)

block1(v70: i64, v71: i64):
    v31 -> v70
    v73 -> v70
    v75 -> v70
    v57 -> v73
    v37 -> v31
    v69 -> v71
    v72 -> v71
    v74 -> v71
    v53 -> v72
    v62 -> v69
    v24 = stack_addr.i64 ss1
    v25 = iconst.i64 162
    v26 = iconst.i64 18
    v27 = global_value.i64 gv0
    call fn0(v25, v26, v27)
    jump block5(v24)

block5(v28: i64):
    v30 = iconst.i64 10
    jump block6(v30)

block6(v29: i64):
    call fn1()
    v32 = icmp.i64 sge v31, v29
    brnz v32, block2
    jump block3

block2:
    jump block4

block3:
    v33 = stack_addr.i64 ss1
    v34 = iconst.i64 164
    v35 = iconst.i64 17
    v36 = global_value.i64 gv0
    call fn0(v34, v35, v36)
    jump block7(v33, v37)

block7(v38: i64, v39: i64):
    v41 = iconst.i64 0
    v42 = icmp slt v39, v41
    v43 = iconst.i64 10
    v44 = icmp sge v39, v43
    v45 = bor v42, v44
    brnz v45, block8
    jump block9

block8:
    v46 = global_value.i64 gv1
    call fn2(v46)
    jump block9

block9:
    jump block11(v38, v39)

block11(v47: i64, v48: i64):
    v50 = iconst.i64 8
    v51 = imul v48, v50
    v52 = iadd v47, v51
    jump block12(v52)

block12(v49: i64):
    jump block10(v49)

block10(v40: i64):
    call fn1()
    v54 = load.i64 v40
    v55 = iadd.i64 v53, v54
    v56 = iconst.i64 1
    v58 = iadd.i64 v57, v56
    jump block1(v58, v55)

block4:
    v59 = iconst.i64 11
    v60 = iconst.i64 5
    v61 = imul v59, v60
    v63 = icmp.i64 eq v62, v61
    v64 = iconst.i64 167
    v65 = iconst.i64 9
    v66 = global_value.i64 gv0
    call fn0(v64, v65, v66)
    call fn3(v63)
    call fn1()
    return
}

fun test_case_8

  Inst1[]
    Value(0): EightBytes = Zeroed |eb: EightBytes
    Value(1): EightBytes = VarDecl(Value(0)) |eb: EightBytes
    Value(2): i8 = Offset(Value(1)) |eb.a
    Value(3): i8 = Lit(Int(1, 8)) |1i8
    Value(3): i8 = Assign(Value(2)) |eb.a = 1i8
    Value(4): i8 = Offset(Value(1)) |eb.b
    Value(5): i8 = Lit(Int(2, 8)) |2i8
    Value(5): i8 = Assign(Value(4)) |eb.b = 2i8
    Value(6): i8 = Offset(Value(1)) |eb.c
    Value(7): i8 = Lit(Int(3, 8)) |3i8
    Value(7): i8 = Assign(Value(6)) |eb.c = 3i8
    Value(8): i8 = Offset(Value(1)) |eb.d
    Value(9): i8 = Lit(Int(4, 8)) |4i8
    Value(9): i8 = Assign(Value(8)) |eb.d = 4i8
    Value(10): i8 = Offset(Value(1)) |eb.e
    Value(11): i8 = Lit(Int(5, 8)) |5i8
    Value(11): i8 = Assign(Value(10)) |eb.e = 5i8
    Value(12): i8 = Offset(Value(1)) |eb.f
    Value(13): i8 = Lit(Int(6, 8)) |6i8
    Value(13): i8 = Assign(Value(12)) |eb.f = 6i8
    Value(14): i8 = Offset(Value(1)) |eb.g
    Value(15): i8 = Lit(Int(7, 8)) |7i8
    Value(15): i8 = Assign(Value(14)) |eb.g = 7i8
    Value(16): i8 = Offset(Value(1)) |eb.h
    Value(17): i8 = Lit(Int(8, 8)) |8i8
    Value(17): i8 = Assign(Value(16)) |eb.h = 8i8
    Value(18): i8 = Offset(Value(1)) |eb.a
    Value(19): i8 = Offset(Value(1)) |eb.h
    Value(20): i8 = Call(Fun(252), [Value(18), Value(19)]) |eb.a + eb.h
    Value(21): i8 = Offset(Value(1)) |eb.g
    Value(22): i8 = Call(Fun(252), [Value(20), Value(21)]) |eb.a + eb.h + eb.g
    Value(23): i8 = Offset(Value(1)) |eb.f
    Value(24): i8 = Call(Fun(252), [Value(22), Value(23)]) |eb.a + eb.h + eb.g + eb.f
    Value(25): i8 = Offset(Value(1)) |eb.e
    Value(26): i8 = Call(Fun(252), [Value(24), Value(25)]) |eb.a + eb.h + eb.g + eb.f + eb.e
    Value(27): i8 = Offset(Value(1)) |eb.d
    Value(28): i8 = Call(Fun(252), [Value(26), Value(27)]) |eb.a + eb.h + eb.g + eb.f + eb.e + eb.d
    Value(29): i8 = Offset(Value(1)) |eb.c
    Value(30): i8 = Call(Fun(252), [Value(28), Value(29)]) |eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c
    Value(31): i8 = Offset(Value(1)) |eb.b
    Value(32): i8 = Call(Fun(252), [Value(30), Value(31)]) |eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c + eb.b
    Value(33): i8 = Lit(Int(4, 8)) |4i8
    Value(34): i8 = Lit(Int(9, 8)) |9i8
    Value(35): i8 = Call(Fun(272), [Value(33), Value(34)]) |4i8 * 9i8
    Value(36): bool = Call(Fun(302), [Value(32), Value(35)]) |eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c + eb.b == 4i8 * 9i8
    Value(37): int = Lit(Int(152, 0)) |assert(eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c + eb.b == 4i8 * 9i8)
    Value(38): int = Lit(Int(9, 0)) |assert(eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c + eb.b == 4i8 * 9i8)
    Value(39): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c + eb.b == 4i8 * 9i8)
    Call(Fun(447), [Value(37), Value(38), Value(39)]) |assert(eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c + eb.b == 4i8 * 9i8)
    Call(Fun(510), [Value(36)]) |assert(eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c + eb.b == 4i8 * 9i8)
    Call(Fun(448), []) |assert(eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c + eb.b == 4i8 * 9i8)
    Return(None) |assert(eb.a + eb.h + eb.g + eb.f + eb.e + eb.d + eb.c + eb.b == 4i8 * 9i8)


function u0:0() fast {
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2

block0:
    v80 = iconst.i64 0
    v1 -> v80
    v0 = iconst.i64 0
    v2 = iconst.i8 1
    v3 = iconst.i64 -256
    v4 = band v0, v3
    v5 = uextend.i64 v2
    v6 = ishl_imm v5, 0
    v7 = bor v4, v6
    v8 = iconst.i8 2
    v9 = iconst.i64 0xffff_ffff_ffff_00ff
    v10 = band v7, v9
    v11 = uextend.i64 v8
    v12 = ishl_imm v11, 8
    v13 = bor v10, v12
    v14 = iconst.i8 3
    v15 = iconst.i64 0xffff_ffff_ff00_ffff
    v16 = band v13, v15
    v17 = uextend.i64 v14
    v18 = ishl_imm v17, 16
    v19 = bor v16, v18
    v20 = iconst.i8 4
    v21 = iconst.i64 0xffff_ffff_00ff_ffff
    v22 = band v19, v21
    v23 = uextend.i64 v20
    v24 = ishl_imm v23, 24
    v25 = bor v22, v24
    v26 = iconst.i8 5
    v27 = iconst.i64 0xffff_ff00_ffff_ffff
    v28 = band v25, v27
    v29 = uextend.i64 v26
    v30 = ishl_imm v29, 32
    v31 = bor v28, v30
    v32 = iconst.i8 6
    v33 = iconst.i64 0xffff_00ff_ffff_ffff
    v34 = band v31, v33
    v35 = uextend.i64 v32
    v36 = ishl_imm v35, 40
    v37 = bor v34, v36
    v38 = iconst.i8 7
    v39 = iconst.i64 0xff00_ffff_ffff_ffff
    v40 = band v37, v39
    v41 = uextend.i64 v38
    v42 = ishl_imm v41, 48
    v43 = bor v40, v42
    v44 = iconst.i8 8
    v45 = iconst.i64 0x00ff_ffff_ffff_ffff
    v46 = band v43, v45
    v47 = uextend.i64 v44
    v48 = ishl_imm v47, 56
    v49 = bor v46, v48
    v50 = ushr_imm v49, 0
    v51 = ireduce.i8 v50
    v52 = ushr_imm v49, 56
    v53 = ireduce.i8 v52
    v54 = iadd v51, v53
    v55 = ushr_imm v49, 48
    v56 = ireduce.i8 v55
    v57 = iadd v54, v56
    v58 = ushr_imm v49, 40
    v59 = ireduce.i8 v58
    v60 = iadd v57, v59
    v61 = ushr_imm v49, 32
    v62 = ireduce.i8 v61
    v63 = iadd v60, v62
    v64 = ushr_imm v49, 24
    v65 = ireduce.i8 v64
    v66 = iadd v63, v65
    v67 = ushr_imm v49, 16
    v68 = ireduce.i8 v67
    v69 = iadd v66, v68
    v70 = ushr_imm v49, 8
    v71 = ireduce.i8 v70
    v72 = iadd v69, v71
    v73 = iconst.i8 4
    v74 = iconst.i8 9
    v75 = imul v73, v74
    v76 = icmp eq v72, v75
    v77 = iconst.i64 152
    v78 = iconst.i64 9
    v79 = global_value.i64 gv0
    call fn0(v77, v78, v79)
    call fn1(v76)
    call fn2()
    return
}

fun test_case_7

  Inst1[]
    Value(0): Point = Zeroed |p: Point
    Value(1): Point = VarDecl(Value(0)) |p: Point
    Value(2): Cell[Point] = Zeroed |c: Cell[Point]
    Value(3): Cell[Point] = VarDecl(Value(2)) |c: Cell[Point]
    Value(4): &Point = Offset(Value(3)) |c.p
    Value(5): &Point = Ref(Value(1)) |&p
    Value(5): &Point = Assign(Value(4)) |c.p = &p
    Value(7): &Point = Offset(Value(3)) |c.x
    Value(8): Point = Deref(Value(7), false) |c.x
    Value(6): int = Offset(Value(8)) |c.x
    Value(9): int = Lit(Int(1, 0)) |1
    Value(9): int = Assign(Value(6)) |c.x = 1
    Value(11): &Point = Offset(Value(3)) |c.y
    Value(12): Point = Deref(Value(11), false) |c.y
    Value(10): int = Offset(Value(12)) |c.y
    Value(13): int = Lit(Int(2, 0)) |2
    Value(13): int = Assign(Value(10)) |c.y = 2
    Value(15): &Point = Offset(Value(3)) |c.x
    Value(16): Point = Deref(Value(15), false) |c.x
    Value(14): int = Offset(Value(16)) |c.x
    Value(18): &Point = Offset(Value(3)) |c.y
    Value(19): Point = Deref(Value(18), false) |c.y
    Value(17): int = Offset(Value(19)) |c.y
    Value(20): int = Call(Fun(260), [Value(14), Value(17)]) |c.x + c.y
    Value(21): int = Lit(Int(3, 0)) |3
    Value(22): bool = Call(Fun(310), [Value(20), Value(21)]) |c.x + c.y == 3
    Value(23): int = Lit(Int(136, 0)) |assert(c.x + c.y == 3)
    Value(24): int = Lit(Int(9, 0)) |assert(c.x + c.y == 3)
    Value(25): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(c.x + c.y == 3)
    Call(Fun(447), [Value(23), Value(24), Value(25)]) |assert(c.x + c.y == 3)
    Call(Fun(510), [Value(22)]) |assert(c.x + c.y == 3)
    Call(Fun(448), []) |assert(c.x + c.y == 3)
    Return(None) |assert(c.x + c.y == 3)


function u0:0() fast {
    ss0 = explicit_slot 16
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2

block0:
    v14 = iconst.i64 0
    v2 -> v14
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 0
    v3 = stack_addr.i64 ss0
    v4 = iconst.i64 1
    store v4, v3
    v5 = iconst.i64 2
    store v5, v3+8
    v6 = load.i64 v3
    v7 = load.i64 v3+8
    v8 = iadd v6, v7
    v9 = iconst.i64 3
    v10 = icmp eq v8, v9
    v11 = iconst.i64 136
    v12 = iconst.i64 9
    v13 = global_value.i64 gv0
    call fn0(v11, v12, v13)
    call fn1(v10)
    call fn2()
    return
}

fun test_case_6

  Inst1[]
    Value(0): Point = Zeroed |p: Point
    Value(1): Point = VarDecl(Value(0)) |p: Point
    Value(2): int = Lit(Int(2, 0)) |2
    Value(3): int = Lit(Int(2, 0)) |2
    Value(5): &Point = Ref(Value(1)) |p.init(2, 2)
    Value(6): int = Lit(Int(120, 0)) |p.init(2, 2)
    Value(7): int = Lit(Int(4, 0)) |p.init(2, 2)
    Value(8): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |p.init(2, 2)
    Call(Fun(447), [Value(6), Value(7), Value(8)]) |p.init(2, 2)
    Value(4): Point = Call(Fun(499), [Value(5), Value(2), Value(3), Value(4)]) |p.init(2, 2)
    Call(Fun(448), []) |p.init(2, 2)
    Value(9): int = Offset(Value(1)) |p.x
    Value(10): int = Offset(Value(1)) |p.y
    Value(11): int = Call(Fun(260), [Value(9), Value(10)]) |p.x + p.y
    Value(12): int = Lit(Int(4, 0)) |4
    Value(13): bool = Call(Fun(310), [Value(11), Value(12)]) |p.x + p.y == 4
    Value(14): int = Lit(Int(121, 0)) |assert(p.x + p.y == 4)
    Value(15): int = Lit(Int(9, 0)) |assert(p.x + p.y == 4)
    Value(16): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(p.x + p.y == 4)
    Call(Fun(447), [Value(14), Value(15), Value(16)]) |assert(p.x + p.y == 4)
    Call(Fun(510), [Value(13)]) |assert(p.x + p.y == 4)
    Call(Fun(448), []) |assert(p.x + p.y == 4)
    Return(None) |assert(p.x + p.y == 4)


function u0:0() fast {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 16
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (i64, i64, i64, i64 sret) -> i64 sret fast
    sig2 = () fast
    sig3 = (b1) fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:41 sig1
    fn2 = colocated u0:6 sig2
    fn3 = colocated u0:26 sig3

block0:
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 2
    v2 = iconst.i64 2
    v3 = stack_addr.i64 ss0
    v4 = iconst.i64 120
    v5 = iconst.i64 4
    v6 = global_value.i64 gv0
    call fn0(v4, v5, v6)
    v7 = stack_addr.i64 ss1
    v8 = call fn1(v3, v1, v2, v7)
    call fn2()
    v9 = stack_load.i64 ss0
    v10 = stack_load.i64 ss0+8
    v11 = iadd v9, v10
    v12 = iconst.i64 4
    v13 = icmp eq v11, v12
    v14 = iconst.i64 121
    v15 = iconst.i64 9
    v16 = global_value.i64 gv0
    call fn0(v14, v15, v16)
    call fn3(v13)
    call fn2()
    return
}

fun init(v: &Point, x: int, y: int) -> Point

  Inst1[Value(0), Value(1), Value(2), Value(3)]
    Value(4): Point = Deref(Value(0), false) |(
    Value(5): int = Offset(Value(4)) |(*v).x
    Value(1): int = Assign(Value(5)) |(*v).x = x
    Value(6): Point = Deref(Value(0), false) |(
    Value(7): int = Offset(Value(6)) |(*v).y
    Value(2): int = Assign(Value(7)) |(*v).y = y
    Value(8): Point = Zeroed |pass
    Value(9): Point = Deref(Value(3), false) |pass
    Value(8): Point = Assign(Value(9)) |pass
    Return(Some(Value(3))) |pass


function u0:0(i64, i64, i64, i64 sret) -> i64 sret fast {
block0(v0: i64, v1: i64, v2: i64, v3: i64):
    store v1, v0
    store v2, v0+8
    v4 = iconst.i64 0
    store v4, v3
    store v4, v3+8
    return v3
}

fun test_case_5

  Inst1[]
    Value(0): &u8 = Lit(String(Span { source: Source(0), hash: ID(14798484927345966379), range: 323..337, line: 0, column: 0 })) |"Hello, World!"
    Value(1): &u8 = VarDecl(Value(0)) |a = "Hello, World!"
    Value(2): uint = Cast(Value(1)) |a as uint
    Value(3): uint = VarDecl(Value(2)) |b = a as uint
    Jump(Inst(6), []) |loop:
    let char = *(b as &u8)
    if char == 0u8:
      break
    putchar(char.i32())
    b += 1 as uint

  Inst6[]
    Value(4): &u8 = Cast(Value(3)) |(b as &u8)
    Value(5): u8 = Deref(Value(4), false) |*(b as &u8)
    Value(6): u8 = VarDecl(Value(5)) |char = *(b as &u8)
    Value(7): u8 = Lit(Uint(0, 8)) |0u8
    Value(8): bool = Call(Fun(306), [Value(6), Value(7)]) |char == 0u8
    JumpIfTrue(Value(8), Inst(15), []) |char == 0u8
    Jump(Inst(17), []) |

  Inst15[]
    Jump(Inst(7), []) |break

  Inst17[]
    Value(9): i32 = Call(Fun(33), [Value(6)]) |char.i32()
    Value(10): int = Lit(Int(109, 0)) |putchar(char.i32())
    Value(11): int = Lit(Int(12, 0)) |putchar(char.i32())
    Value(12): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |putchar(char.i32())
    Call(Fun(447), [Value(10), Value(11), Value(12)]) |putchar(char.i32())
    Call(Fun(497), [Value(9)]) |putchar(char.i32())
    Call(Fun(448), []) |putchar(char.i32())
    Value(13): int = Lit(Int(1, 0)) |1
    Value(14): uint = Cast(Value(13)) |1 as uint
    Value(15): uint = Call(Fun(261), [Value(3), Value(14)]) |b += 1 as uint
    Value(15): uint = Assign(Value(3)) |b += 1 as uint
    Jump(Inst(6), []) |loop:
    let char = *(b as &u8)
    if char == 0u8:
      break
    putchar(char.i32())
    b += 1 as uint

  Inst7[]
    Return(None) |loop:
    let char = *(b as &u8)
    if char == 0u8:
      break
    putchar(char.i32())
    b += 1 as uint


function u0:0() fast {
    gv0 = symbol colocated u1:10
    gv1 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (i32) windows_fastcall
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = u0:43 sig1
    fn2 = colocated u0:6 sig2

block0:
    v15 = iconst.i64 0
    v2 -> v15
    v14 = iconst.i64 0
    v1 -> v14
    v0 = global_value.i64 gv0
    jump block1(v0)

block1(v3: i64):
    v12 -> v3
    v4 = load.i8 v3
    v5 = iconst.i8 0
    v6 = icmp eq v4, v5
    brnz v6, block2
    jump block3

block2:
    jump block4

block3:
    v7 = sextend.i32 v4
    v8 = iconst.i64 109
    v9 = iconst.i64 12
    v10 = global_value.i64 gv1
    call fn0(v8, v9, v10)
    call fn1(v7)
    call fn2()
    v11 = iconst.i64 1
    v13 = iadd.i64 v12, v11
    jump block1(v13)

block4:
    return
}

fun putchar(c: i32)


fun test_case_4

  Inst1[]
    Value(0): f64 = Lit(Float(1.0, 64)) |1.0
    Value(1): f64 = VarDecl(Value(0)) |a = 1.0
    Jump(Inst(4), []) |loop:
    a = a + 1.0
    if a > 100.0:
      break

  Inst4[]
    Value(2): f64 = Lit(Float(1.0, 64)) |1.0
    Value(3): f64 = Call(Fun(413), [Value(1), Value(2)]) |a + 1.0
    Value(3): f64 = Assign(Value(1)) |a = a + 1.0
    Value(4): f64 = Lit(Float(100.0, 64)) |100.0
    Value(5): bool = Call(Fun(429), [Value(1), Value(4)]) |a > 100.0
    JumpIfTrue(Value(5), Inst(13), []) |a > 100.0
    Jump(Inst(15), []) |

  Inst13[]
    Jump(Inst(5), []) |break

  Inst15[]
    Jump(Inst(4), []) |loop:
    a = a + 1.0
    if a > 100.0:
      break

  Inst5[]
    Value(6): int = Call(Fun(164), [Value(1)]) |f64::int(a)
    Value(7): int = Lit(Int(101, 0)) |101
    Value(8): bool = Call(Fun(310), [Value(6), Value(7)]) |f64::int(a) == 101
    Value(9): int = Lit(Int(95, 0)) |assert(f64::int(a) == 101)
    Value(10): int = Lit(Int(9, 0)) |assert(f64::int(a) == 101)
    Value(11): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(f64::int(a) == 101)
    Call(Fun(447), [Value(9), Value(10), Value(11)]) |assert(f64::int(a) == 101)
    Call(Fun(510), [Value(8)]) |assert(f64::int(a) == 101)
    Call(Fun(448), []) |assert(f64::int(a) == 101)
    Return(None) |assert(f64::int(a) == 101)


function u0:0() fast {
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2

block0:
    v14 = f64const 0.0
    v1 -> v14
    v0 = f64const 0x1.0000000000000p0
    jump block1(v0)

block1(v3: f64):
    v2 = f64const 0x1.0000000000000p0
    v4 = fadd v3, v2
    v7 -> v4
    v15 -> v4
    v5 = f64const 0x1.9000000000000p6
    v6 = fcmp gt v4, v5
    brnz v6, block2
    jump block3

block2:
    jump block4

block3:
    jump block1(v15)

block4:
    v8 = fcvt_to_sint.i64 v7
    v9 = iconst.i64 101
    v10 = icmp eq v8, v9
    v11 = iconst.i64 95
    v12 = iconst.i64 9
    v13 = global_value.i64 gv0
    call fn0(v11, v12, v13)
    call fn1(v10)
    call fn2()
    return
}

fun test_case_3

  Inst1[]
    Value(0): int = Zeroed |a: int
    Value(1): int = VarDecl(Value(0)) |a: int
    Value(2): int = Call(Fun(225), [Value(1)]) |++a
    Value(3): int = Call(Fun(235), [Value(1)]) |--a
    Value(4): bool = Lit(Bool(true)) |true
    Value(5): bool = Call(Fun(251), [Value(4)]) |!true
    Value(6): int = Call(Fun(165), [Value(5)]) |bool::int(!true)
    Value(7): int = Lit(Int(1, 0)) |1
    Value(8): int = Call(Fun(205), [Value(7)]) |~1
    Value(9): int = Call(Fun(260), [Value(6), Value(8)]) |bool::int(!true) + ~1
    Value(10): int = Lit(Int(2, 0)) |2
    Value(11): int = Call(Fun(260), [Value(9), Value(10)]) |bool::int(!true) + ~1 + 2
    Value(12): int = Lit(Int(1, 0)) |1
    Value(13): int = Call(Fun(243), [Value(12)]) |-1
    Value(14): int = Call(Fun(250), [Value(13)]) |abs -1
    Value(15): int = Call(Fun(260), [Value(11), Value(14)]) |bool::int(!true) + ~1 + 2 + abs -1
    Value(16): int = Lit(Int(1, 0)) |1
    Value(17): int = Call(Fun(270), [Value(15), Value(16)]) |bool::int(!true) + ~1 + 2 + abs -1 - 1
    Value(18): int = Call(Fun(260), [Value(17), Value(1)]) |bool::int(!true) + ~1 + 2 + abs -1 - 1 + a
    Value(19): int = Lit(Int(0, 0)) |0
    Value(20): bool = Call(Fun(310), [Value(18), Value(19)]) |bool::int(!true) + ~1 + 2 + abs -1 - 1 + a == 0
    Value(21): int = Lit(Int(85, 0)) |assert(bool::int(!true) + ~1 + 2 + abs -1 - 1 + a == 0)
    Value(22): int = Lit(Int(9, 0)) |assert(bool::int(!true) + ~1 + 2 + abs -1 - 1 + a == 0)
    Value(23): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(bool::int(!true) + ~1 + 2 + abs -1 - 1 + a == 0)
    Call(Fun(447), [Value(21), Value(22), Value(23)]) |assert(bool::int(!true) + ~1 + 2 + abs -1 - 1 + a == 0)
    Call(Fun(510), [Value(20)]) |assert(bool::int(!true) + ~1 + 2 + abs -1 - 1 + a == 0)
    Call(Fun(448), []) |assert(bool::int(!true) + ~1 + 2 + abs -1 - 1 + a == 0)
    Return(None) |assert(bool::int(!true) + ~1 + 2 + abs -1 - 1 + a == 0)


function u0:0() fast {
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2

block0:
    v27 = iconst.i64 0
    v1 -> v27
    v0 = iconst.i64 0
    v2 = iadd_imm v0, 1
    v3 = iadd_imm v2, -1
    v4 = bconst.b1 true
    v5 = bint.i8 v4
    v6 = icmp_imm eq v5, 0
    v7 = bint.i64 v6
    v8 = iconst.i64 1
    v9 = bnot v8
    v10 = iadd v7, v9
    v11 = iconst.i64 2
    v12 = iadd v10, v11
    v13 = iconst.i64 1
    v14 = ineg v13
    v15 = icmp_imm sgt v14, 0
    v16 = ineg v14
    v17 = select v15, v14, v16
    v18 = iadd v12, v17
    v19 = iconst.i64 1
    v20 = isub v18, v19
    v21 = iadd v20, v3
    v22 = iconst.i64 0
    v23 = icmp eq v21, v22
    v24 = iconst.i64 85
    v25 = iconst.i64 9
    v26 = global_value.i64 gv0
    call fn0(v24, v25, v26)
    call fn1(v23)
    call fn2()
    return
}

fun test_case_2

  Inst1[]
    Value(0): Point = Zeroed |p, q: Point
    Value(1): Point = VarDecl(Value(0)) |p, q: Point
    Value(2): Point = Zeroed |p, q: Point
    Value(3): Point = VarDecl(Value(2)) |p, q: Point
    Value(4): int = Lit(Int(1, 0)) |1
    Value(5): int = Lit(Int(2, 0)) |2
    Value(7): int = Lit(Int(78, 0)) |p.set(1, 2)
    Value(8): int = Lit(Int(8, 0)) |p.set(1, 2)
    Value(9): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |p.set(1, 2)
    Call(Fun(447), [Value(7), Value(8), Value(9)]) |p.set(1, 2)
    Value(6): Point = Call(Fun(493), [Value(1), Value(4), Value(5), Value(6)]) |p.set(1, 2)
    Call(Fun(448), []) |p.set(1, 2)
    Value(6): Point = Assign(Value(1)) |p = p.set(1, 2)
    Value(10): int = Offset(Value(1)) |p.x
    Value(11): int = Offset(Value(1)) |p.y
    Value(12): int = Call(Fun(260), [Value(10), Value(11)]) |p.x + p.y
    Value(13): int = Lit(Int(3, 0)) |3
    Value(14): bool = Call(Fun(310), [Value(12), Value(13)]) |p.x + p.y == 3
    Value(15): int = Lit(Int(79, 0)) |assert(p.x + p.y == 3)
    Value(16): int = Lit(Int(9, 0)) |assert(p.x + p.y == 3)
    Value(17): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(p.x + p.y == 3)
    Call(Fun(447), [Value(15), Value(16), Value(17)]) |assert(p.x + p.y == 3)
    Call(Fun(510), [Value(14)]) |assert(p.x + p.y == 3)
    Call(Fun(448), []) |assert(p.x + p.y == 3)
    Return(None) |assert(p.x + p.y == 3)


function u0:0() fast {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 16
    ss2 = explicit_slot 16
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (i64, i64, i64, i64 sret) -> i64 sret fast
    sig2 = () fast
    sig3 = (b1) fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:47 sig1
    fn2 = colocated u0:6 sig2
    fn3 = colocated u0:26 sig3

block0:
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 0
    stack_store v1, ss1
    stack_store v1, ss1+8
    v2 = iconst.i64 1
    v3 = iconst.i64 2
    v4 = iconst.i64 78
    v5 = iconst.i64 8
    v6 = global_value.i64 gv0
    call fn0(v4, v5, v6)
    v7 = stack_addr.i64 ss0
    v8 = stack_addr.i64 ss2
    v9 = call fn1(v7, v2, v3, v8)
    call fn2()
    v10 = stack_load.i64 ss2
    stack_store v10, ss0
    v11 = stack_load.i64 ss2+8
    stack_store v11, ss0+8
    v12 = stack_load.i64 ss0
    v13 = stack_load.i64 ss0+8
    v14 = iadd v12, v13
    v15 = iconst.i64 3
    v16 = icmp eq v14, v15
    v17 = iconst.i64 79
    v18 = iconst.i64 9
    v19 = global_value.i64 gv0
    call fn0(v17, v18, v19)
    call fn3(v16)
    call fn2()
    return
}

fun set(p: Self, x: int, y: int) -> Self

  Inst1[Value(0), Value(1), Value(2), Value(3)]
    Value(4): Point = VarDecl(Value(0)) |p = p
    Value(5): int = Offset(Value(4)) |p.x
    Value(1): int = Assign(Value(5)) |p.x = x
    Value(6): int = Offset(Value(4)) |p.y
    Value(2): int = Assign(Value(6)) |p.y = y
    Value(7): Point = Deref(Value(3), false) |return p
    Value(4): Point = Assign(Value(7)) |return p
    Return(Some(Value(3))) |return p


function u0:0(i64, i64, i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 16

block0(v0: i64, v1: i64, v2: i64, v3: i64):
    v4 = stack_addr.i64 ss0
    v5 = load.i64 v0
    store v5, v4
    v6 = load.i64 v0+8
    store v6, v4+8
    stack_store v1, ss0
    stack_store v2, ss0+8
    v7 = stack_addr.i64 ss0
    v8 = load.i64 v7
    store v8, v3
    v9 = load.i64 v7+8
    store v9, v3+8
    return v3
}

fun test_case_1

  Inst1[]
    Value(0): Point = Zeroed |p: Point
    Value(1): Point = VarDecl(Value(0)) |p: Point
    Value(2): Point3 = Zeroed |p3: Point3
    Value(3): Point3 = VarDecl(Value(2)) |p3: Point3
    Value(4): Rect = Zeroed |r: Rect
    Value(5): Rect = VarDecl(Value(4)) |r: Rect
    Value(6): int = Offset(Value(1)) |p.x
    Value(7): int = Lit(Int(1, 0)) |1
    Value(7): int = Assign(Value(6)) |p.x = 1
    Value(8): Point = Offset(Value(3)) |p3.point
    Value(1): Point = Assign(Value(8)) |p3.point = p
    Value(9): int = Offset(Value(3)) |p3.y
    Value(10): int = Lit(Int(2, 0)) |2
    Value(10): int = Assign(Value(9)) |p3.y = 2
    Value(11): Point = Offset(Value(5)) |r.mi
    Value(12): Point = Offset(Value(3)) |p3.point
    Value(12): Point = Assign(Value(11)) |r.mi = p3.point
    Value(13): Point = Offset(Value(5)) |r
    Value(14): int = Offset(Value(13)) |r.mi.x
    Value(15): Point = Offset(Value(5)) |r
    Value(16): int = Offset(Value(15)) |r.mi.y
    Value(17): int = Call(Fun(270), [Value(14), Value(16)]) |r.mi.x - r.mi.y
    Value(18): int = Lit(Int(1, 0)) |1
    Value(19): int = Call(Fun(260), [Value(17), Value(18)]) |r.mi.x - r.mi.y + 1
    Value(20): int = Lit(Int(0, 0)) |0
    Value(21): bool = Call(Fun(310), [Value(19), Value(20)]) |r.mi.x - r.mi.y + 1 == 0
    Value(22): int = Lit(Int(66, 0)) |assert(r.mi.x - r.mi.y + 1 == 0)
    Value(23): int = Lit(Int(9, 0)) |assert(r.mi.x - r.mi.y + 1 == 0)
    Value(24): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(r.mi.x - r.mi.y + 1 == 0)
    Call(Fun(447), [Value(22), Value(23), Value(24)]) |assert(r.mi.x - r.mi.y + 1 == 0)
    Call(Fun(510), [Value(21)]) |assert(r.mi.x - r.mi.y + 1 == 0)
    Call(Fun(448), []) |assert(r.mi.x - r.mi.y + 1 == 0)
    Return(None) |assert(r.mi.x - r.mi.y + 1 == 0)


function u0:0() fast {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 24
    ss2 = explicit_slot 32
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2

block0:
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 0
    stack_store v1, ss1
    stack_store v1, ss1+8
    stack_store v1, ss1+16
    v2 = iconst.i64 0
    stack_store v2, ss2
    stack_store v2, ss2+8
    stack_store v2, ss2+16
    stack_store v2, ss2+24
    v3 = iconst.i64 1
    stack_store v3, ss0
    v4 = stack_load.i64 ss0
    stack_store v4, ss1
    v5 = stack_load.i64 ss0+8
    stack_store v5, ss1+8
    v6 = iconst.i64 2
    stack_store v6, ss1+8
    v7 = stack_load.i64 ss1
    stack_store v7, ss2
    v8 = stack_load.i64 ss1+8
    stack_store v8, ss2+8
    v9 = stack_load.i64 ss2
    v10 = stack_load.i64 ss2+8
    v11 = isub v9, v10
    v12 = iconst.i64 1
    v13 = iadd v11, v12
    v14 = iconst.i64 0
    v15 = icmp eq v13, v14
    v16 = iconst.i64 66
    v17 = iconst.i64 9
    v18 = global_value.i64 gv0
    call fn0(v16, v17, v18)
    call fn1(v15)
    call fn2()
    return
}

fun fib_loop(v: int) -> int

  Inst1[Value(0)]
    Value(1): int = Lit(Int(1, 0)) |1
    Value(2): int = VarDecl(Value(1)) |a, b, c = 1
    Value(3): int = VarDecl(Value(2)) |a, b, c = 1
    Value(4): int = VarDecl(Value(2)) |a, b, c = 1
    Value(5): int = VarDecl(Value(0)) |v = v
    Jump(Inst(7), []) |loop'a:
    c = a + b
    a = b
    b = c
    v = v - 1
    if v == 1:
      break'a

  Inst7[]
    Value(6): int = Call(Fun(260), [Value(2), Value(3)]) |a + b
    Value(6): int = Assign(Value(4)) |c = a + b
    Value(3): int = Assign(Value(2)) |a = b
    Value(4): int = Assign(Value(3)) |b = c
    Value(7): int = Lit(Int(1, 0)) |1
    Value(8): int = Call(Fun(270), [Value(5), Value(7)]) |v - 1
    Value(8): int = Assign(Value(5)) |v = v - 1
    Value(9): int = Lit(Int(1, 0)) |1
    Value(10): bool = Call(Fun(310), [Value(5), Value(9)]) |v == 1
    JumpIfTrue(Value(10), Inst(20), []) |v == 1
    Jump(Inst(22), []) |

  Inst20[]
    Jump(Inst(8), []) |break'a

  Inst22[]
    Jump(Inst(7), []) |loop'a:
    c = a + b
    a = b
    b = c
    v = v - 1
    if v == 1:
      break'a

  Inst8[]
    Return(Some(Value(4))) |return c


function u0:0(i64) -> i64 fast {
block0(v0: i64):
    v19 = iconst.i64 0
    v5 -> v19
    v18 = iconst.i64 0
    v4 -> v18
    v17 = iconst.i64 0
    v3 -> v17
    v16 = iconst.i64 0
    v2 -> v16
    v1 = iconst.i64 1
    jump block1(v1, v1, v1, v0)

block1(v6: i64, v7: i64, v9: i64, v11: i64):
    v20 -> v7
    v8 = iadd v6, v7
    v15 -> v8
    v21 -> v8
    v22 -> v8
    v10 = iconst.i64 1
    v12 = isub v11, v10
    v23 -> v12
    v13 = iconst.i64 1
    v14 = icmp eq v12, v13
    brnz v14, block2
    jump block3

block2:
    jump block4

block3:
    jump block1(v20, v21, v22, v23)

block4:
    return v15
}

fun fib(v: int) -> int

  Inst1[Value(0)]
    Value(1): int = Lit(Int(2, 0)) |2
    Value(2): bool = Call(Fun(360), [Value(0), Value(1)]) |v < 2
    JumpIfTrue(Value(2), Inst(4), []) |v < 2
    Jump(Inst(7), []) |:

  Inst4[]
    Value(3): int = Lit(Int(1, 0)) |1
    Jump(Inst(6), [Value(3)]) |if v < 2:
    1
  else:
    fib(v - 1) + fib(v - 2)

  Inst7[]
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(270), [Value(0), Value(5)]) |v - 1
    Value(8): int = Lit(Int(28, 0)) |fib(v - 1)
    Value(9): int = Lit(Int(8, 0)) |fib(v - 1)
    Value(10): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |fib(v - 1)
    Call(Fun(447), [Value(8), Value(9), Value(10)]) |fib(v - 1)
    Value(7): int = Call(Fun(490), [Value(6)]) |fib(v - 1)
    Call(Fun(448), []) |fib(v - 1)
    Value(11): int = Lit(Int(2, 0)) |2
    Value(12): int = Call(Fun(270), [Value(0), Value(11)]) |v - 2
    Value(14): int = Lit(Int(28, 0)) |fib(v - 2)
    Value(15): int = Lit(Int(21, 0)) |fib(v - 2)
    Value(16): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |fib(v - 2)
    Call(Fun(447), [Value(14), Value(15), Value(16)]) |fib(v - 2)
    Value(13): int = Call(Fun(490), [Value(12)]) |fib(v - 2)
    Call(Fun(448), []) |fib(v - 2)
    Value(17): int = Call(Fun(260), [Value(7), Value(13)]) |fib(v - 1) + fib(v - 2)
    Jump(Inst(6), [Value(17)]) |fib(v - 1) + fib(v - 2)

  Inst6[Value(4)]
    Return(Some(Value(4))) |return if v < 2:
    1
  else:
    fib(v - 1) + fib(v - 2)


function u0:0(i64) -> i64 fast {
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (i64) -> i64 fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:50 sig1
    fn2 = colocated u0:6 sig2

block0(v0: i64):
    v2 = iconst.i64 2
    v3 = icmp slt v0, v2
    brnz v3, block1
    jump block2

block1:
    v4 = iconst.i64 1
    jump block3(v4)

block2:
    v5 = iconst.i64 1
    v6 = isub.i64 v0, v5
    v7 = iconst.i64 28
    v8 = iconst.i64 8
    v9 = global_value.i64 gv0
    call fn0(v7, v8, v9)
    v10 = call fn1(v6)
    call fn2()
    v11 = iconst.i64 2
    v12 = isub.i64 v0, v11
    v13 = iconst.i64 28
    v14 = iconst.i64 21
    v15 = global_value.i64 gv0
    call fn0(v13, v14, v15)
    v16 = call fn1(v12)
    call fn2()
    v17 = iadd v10, v16
    jump block3(v17)

block3(v1: i64):
    return v1
}

fun main -> int

  Inst1[]
    Value(0): int = Lit(Int(1, 0)) |1
    Value(1): int = Lit(Int(1, 0)) |1
    Value(2): int = Call(Fun(270), [Value(0), Value(1)]) |1 - 1
    Value(3): int = Lit(Int(0, 0)) |0
    Value(4): bool = Call(Fun(310), [Value(2), Value(3)]) |1 - 1 == 0
    Value(5): int = Lit(Int(3, 0)) |assert(1 - 1 == 0)
    Value(6): int = Lit(Int(9, 0)) |assert(1 - 1 == 0)
    Value(7): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(1 - 1 == 0)
    Call(Fun(447), [Value(5), Value(6), Value(7)]) |assert(1 - 1 == 0)
    Call(Fun(510), [Value(4)]) |assert(1 - 1 == 0)
    Call(Fun(448), []) |assert(1 - 1 == 0)
    Value(8): int = Lit(Int(1, 0)) |1
    Value(9): int = Lit(Int(1, 0)) |1
    Value(10): int = Call(Fun(260), [Value(8), Value(9)]) |1 + 1
    Value(11): int = Lit(Int(2, 0)) |2
    Value(12): bool = Call(Fun(310), [Value(10), Value(11)]) |1 + 1 == 2
    Value(13): int = Lit(Int(4, 0)) |assert(1 + 1 == 2)
    Value(14): int = Lit(Int(9, 0)) |assert(1 + 1 == 2)
    Value(15): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(1 + 1 == 2)
    Call(Fun(447), [Value(13), Value(14), Value(15)]) |assert(1 + 1 == 2)
    Call(Fun(510), [Value(12)]) |assert(1 + 1 == 2)
    Call(Fun(448), []) |assert(1 + 1 == 2)
    Value(16): int = Lit(Int(1, 0)) |1
    Value(17): int = Lit(Int(1, 0)) |1
    Value(18): bool = Call(Fun(310), [Value(16), Value(17)]) |1 == 1
    JumpIfTrue(Value(18), Inst(27), []) |1 == 1
    Jump(Inst(30), []) |:

  Inst27[]
    Value(19): int = Lit(Int(1, 0)) |1
    Jump(Inst(29), [Value(19)]) |(if 1 == 1: 1 else: 0)

  Inst30[]
    Value(21): int = Lit(Int(0, 0)) |0
    Jump(Inst(29), [Value(21)]) |0

  Inst29[Value(20)]
    Value(22): int = Lit(Int(1, 0)) |1
    Value(23): bool = Call(Fun(310), [Value(20), Value(22)]) |(if 1 == 1: 1 else: 0) == 1
    Value(24): int = Lit(Int(5, 0)) |assert((if 1 == 1: 1 else: 0) == 1)
    Value(25): int = Lit(Int(9, 0)) |assert((if 1 == 1: 1 else: 0) == 1)
    Value(26): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert((if 1 == 1: 1 else: 0) == 1)
    Call(Fun(447), [Value(24), Value(25), Value(26)]) |assert((if 1 == 1: 1 else: 0) == 1)
    Call(Fun(510), [Value(23)]) |assert((if 1 == 1: 1 else: 0) == 1)
    Call(Fun(448), []) |assert((if 1 == 1: 1 else: 0) == 1)
    Value(27): int = Lit(Int(10, 0)) |10
    Value(29): int = Lit(Int(6, 0)) |fib(10)
    Value(30): int = Lit(Int(13, 0)) |fib(10)
    Value(31): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |fib(10)
    Call(Fun(447), [Value(29), Value(30), Value(31)]) |fib(10)
    Value(28): int = Call(Fun(490), [Value(27)]) |fib(10)
    Call(Fun(448), []) |fib(10)
    Value(32): int = Lit(Int(10, 0)) |10
    Value(34): int = Lit(Int(6, 0)) |fib_loop(10)
    Value(35): int = Lit(Int(29, 0)) |fib_loop(10)
    Value(36): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |fib_loop(10)
    Call(Fun(447), [Value(34), Value(35), Value(36)]) |fib_loop(10)
    Value(33): int = Call(Fun(491), [Value(32)]) |fib_loop(10)
    Call(Fun(448), []) |fib_loop(10)
    Value(37): bool = Call(Fun(310), [Value(28), Value(33)]) |fib(10) == fib_loop(10)
    Value(38): int = Lit(Int(6, 0)) |assert(fib(10) == fib_loop(10))
    Value(39): int = Lit(Int(9, 0)) |assert(fib(10) == fib_loop(10))
    Value(40): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |assert(fib(10) == fib_loop(10))
    Call(Fun(447), [Value(38), Value(39), Value(40)]) |assert(fib(10) == fib_loop(10))
    Call(Fun(510), [Value(37)]) |assert(fib(10) == fib_loop(10))
    Call(Fun(448), []) |assert(fib(10) == fib_loop(10))
    Value(41): int = Lit(Int(8, 0)) |test_case_1()
    Value(42): int = Lit(Int(14, 0)) |test_case_1()
    Value(43): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_1()
    Call(Fun(447), [Value(41), Value(42), Value(43)]) |test_case_1()
    Call(Fun(492), []) |test_case_1()
    Call(Fun(448), []) |test_case_1()
    Value(44): int = Lit(Int(9, 0)) |test_case_2()
    Value(45): int = Lit(Int(14, 0)) |test_case_2()
    Value(46): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_2()
    Call(Fun(447), [Value(44), Value(45), Value(46)]) |test_case_2()
    Call(Fun(494), []) |test_case_2()
    Call(Fun(448), []) |test_case_2()
    Value(47): int = Lit(Int(10, 0)) |test_case_3()
    Value(48): int = Lit(Int(14, 0)) |test_case_3()
    Value(49): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_3()
    Call(Fun(447), [Value(47), Value(48), Value(49)]) |test_case_3()
    Call(Fun(495), []) |test_case_3()
    Call(Fun(448), []) |test_case_3()
    Value(50): int = Lit(Int(11, 0)) |test_case_4()
    Value(51): int = Lit(Int(14, 0)) |test_case_4()
    Value(52): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_4()
    Call(Fun(447), [Value(50), Value(51), Value(52)]) |test_case_4()
    Call(Fun(496), []) |test_case_4()
    Call(Fun(448), []) |test_case_4()
    Value(53): int = Lit(Int(12, 0)) |test_case_5()
    Value(54): int = Lit(Int(14, 0)) |test_case_5()
    Value(55): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_5()
    Call(Fun(447), [Value(53), Value(54), Value(55)]) |test_case_5()
    Call(Fun(498), []) |test_case_5()
    Call(Fun(448), []) |test_case_5()
    Value(56): int = Lit(Int(13, 0)) |test_case_6()
    Value(57): int = Lit(Int(14, 0)) |test_case_6()
    Value(58): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_6()
    Call(Fun(447), [Value(56), Value(57), Value(58)]) |test_case_6()
    Call(Fun(500), []) |test_case_6()
    Call(Fun(448), []) |test_case_6()
    Value(59): int = Lit(Int(14, 0)) |test_case_7()
    Value(60): int = Lit(Int(14, 0)) |test_case_7()
    Value(61): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_7()
    Call(Fun(447), [Value(59), Value(60), Value(61)]) |test_case_7()
    Call(Fun(501), []) |test_case_7()
    Call(Fun(448), []) |test_case_7()
    Value(62): int = Lit(Int(15, 0)) |test_case_8()
    Value(63): int = Lit(Int(14, 0)) |test_case_8()
    Value(64): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_8()
    Call(Fun(447), [Value(62), Value(63), Value(64)]) |test_case_8()
    Call(Fun(502), []) |test_case_8()
    Call(Fun(448), []) |test_case_8()
    Value(65): int = Lit(Int(16, 0)) |test_case_9()
    Value(66): int = Lit(Int(14, 0)) |test_case_9()
    Value(67): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_9()
    Call(Fun(447), [Value(65), Value(66), Value(67)]) |test_case_9()
    Call(Fun(503), []) |test_case_9()
    Call(Fun(448), []) |test_case_9()
    Value(68): int = Lit(Int(17, 0)) |test_case_10()
    Value(69): int = Lit(Int(15, 0)) |test_case_10()
    Value(70): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_10()
    Call(Fun(447), [Value(68), Value(69), Value(70)]) |test_case_10()
    Call(Fun(504), []) |test_case_10()
    Call(Fun(448), []) |test_case_10()
    Value(71): int = Lit(Int(18, 0)) |test_case_11()
    Value(72): int = Lit(Int(15, 0)) |test_case_11()
    Value(73): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_11()
    Call(Fun(447), [Value(71), Value(72), Value(73)]) |test_case_11()
    Call(Fun(505), []) |test_case_11()
    Call(Fun(448), []) |test_case_11()
    Value(74): int = Lit(Int(19, 0)) |test_case_12()
    Value(75): int = Lit(Int(15, 0)) |test_case_12()
    Value(76): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_12()
    Call(Fun(447), [Value(74), Value(75), Value(76)]) |test_case_12()
    Call(Fun(506), []) |test_case_12()
    Call(Fun(448), []) |test_case_12()
    Value(77): int = Lit(Int(20, 0)) |test_case_13()
    Value(78): int = Lit(Int(15, 0)) |test_case_13()
    Value(79): &u8 = Lit(String(Span { source: Source(0), hash: ID(3362311186304783455), range: 341..369, line: 0, column: 0 })) |test_case_13()
    Call(Fun(447), [Value(77), Value(78), Value(79)]) |test_case_13()
    Call(Fun(509), []) |test_case_13()
    Call(Fun(448), []) |test_case_13()
    Value(80): int = Lit(Int(0, 0)) |0
    Return(Some(Value(80))) |return 0


function u0:0() -> i64 fast {
    gv0 = symbol colocated u1:7
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    sig3 = (i64) -> i64 fast
    sig4 = (i64) -> i64 fast
    sig5 = () fast
    sig6 = () fast
    sig7 = () fast
    sig8 = () fast
    sig9 = () fast
    sig10 = () fast
    sig11 = () fast
    sig12 = () fast
    sig13 = () fast
    sig14 = () fast
    sig15 = () fast
    sig16 = () fast
    sig17 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2
    fn3 = colocated u0:50 sig3
    fn4 = colocated u0:49 sig4
    fn5 = colocated u0:48 sig5
    fn6 = colocated u0:46 sig6
    fn7 = colocated u0:45 sig7
    fn8 = colocated u0:44 sig8
    fn9 = colocated u0:42 sig9
    fn10 = colocated u0:40 sig10
    fn11 = colocated u0:39 sig11
    fn12 = colocated u0:38 sig12
    fn13 = colocated u0:37 sig13
    fn14 = colocated u0:32 sig14
    fn15 = colocated u0:31 sig15
    fn16 = colocated u0:30 sig16
    fn17 = colocated u0:27 sig17

block0:
    v1 = iconst.i64 1
    v2 = iconst.i64 1
    v3 = isub v1, v2
    v4 = iconst.i64 0
    v5 = icmp eq v3, v4
    v6 = iconst.i64 3
    v7 = iconst.i64 9
    v8 = global_value.i64 gv0
    call fn0(v6, v7, v8)
    call fn1(v5)
    call fn2()
    v9 = iconst.i64 1
    v10 = iconst.i64 1
    v11 = iadd v9, v10
    v12 = iconst.i64 2
    v13 = icmp eq v11, v12
    v14 = iconst.i64 4
    v15 = iconst.i64 9
    v16 = global_value.i64 gv0
    call fn0(v14, v15, v16)
    call fn1(v13)
    call fn2()
    v17 = iconst.i64 1
    v18 = iconst.i64 1
    v19 = icmp eq v17, v18
    brnz v19, block1
    jump block2

block1:
    v20 = iconst.i64 1
    jump block3(v20)

block2:
    v21 = iconst.i64 0
    jump block3(v21)

block3(v0: i64):
    v22 = iconst.i64 1
    v23 = icmp eq v0, v22
    v24 = iconst.i64 5
    v25 = iconst.i64 9
    v26 = global_value.i64 gv0
    call fn0(v24, v25, v26)
    call fn1(v23)
    call fn2()
    v27 = iconst.i64 10
    v28 = iconst.i64 6
    v29 = iconst.i64 13
    v30 = global_value.i64 gv0
    call fn0(v28, v29, v30)
    v31 = call fn3(v27)
    call fn2()
    v32 = iconst.i64 10
    v33 = iconst.i64 6
    v34 = iconst.i64 29
    v35 = global_value.i64 gv0
    call fn0(v33, v34, v35)
    v36 = call fn4(v32)
    call fn2()
    v37 = icmp eq v31, v36
    v38 = iconst.i64 6
    v39 = iconst.i64 9
    v40 = global_value.i64 gv0
    call fn0(v38, v39, v40)
    call fn1(v37)
    call fn2()
    v41 = iconst.i64 8
    v42 = iconst.i64 14
    v43 = global_value.i64 gv0
    call fn0(v41, v42, v43)
    call fn5()
    call fn2()
    v44 = iconst.i64 9
    v45 = iconst.i64 14
    v46 = global_value.i64 gv0
    call fn0(v44, v45, v46)
    call fn6()
    call fn2()
    v47 = iconst.i64 10
    v48 = iconst.i64 14
    v49 = global_value.i64 gv0
    call fn0(v47, v48, v49)
    call fn7()
    call fn2()
    v50 = iconst.i64 11
    v51 = iconst.i64 14
    v52 = global_value.i64 gv0
    call fn0(v50, v51, v52)
    call fn8()
    call fn2()
    v53 = iconst.i64 12
    v54 = iconst.i64 14
    v55 = global_value.i64 gv0
    call fn0(v53, v54, v55)
    call fn9()
    call fn2()
    v56 = iconst.i64 13
    v57 = iconst.i64 14
    v58 = global_value.i64 gv0
    call fn0(v56, v57, v58)
    call fn10()
    call fn2()
    v59 = iconst.i64 14
    v60 = iconst.i64 14
    v61 = global_value.i64 gv0
    call fn0(v59, v60, v61)
    call fn11()
    call fn2()
    v62 = iconst.i64 15
    v63 = iconst.i64 14
    v64 = global_value.i64 gv0
    call fn0(v62, v63, v64)
    call fn12()
    call fn2()
    v65 = iconst.i64 16
    v66 = iconst.i64 14
    v67 = global_value.i64 gv0
    call fn0(v65, v66, v67)
    call fn13()
    call fn2()
    v68 = iconst.i64 17
    v69 = iconst.i64 15
    v70 = global_value.i64 gv0
    call fn0(v68, v69, v70)
    call fn14()
    call fn2()
    v71 = iconst.i64 18
    v72 = iconst.i64 15
    v73 = global_value.i64 gv0
    call fn0(v71, v72, v73)
    call fn15()
    call fn2()
    v74 = iconst.i64 19
    v75 = iconst.i64 15
    v76 = global_value.i64 gv0
    call fn0(v74, v75, v76)
    call fn16()
    call fn2()
    v77 = iconst.i64 20
    v78 = iconst.i64 15
    v79 = global_value.i64 gv0
    call fn0(v77, v78, v79)
    call fn17()
    call fn2()
    v80 = iconst.i64 0
    return v80
}



  Inst1[Value(0), Value(1)]
    Value(2): int = Zeroed |
    Value(3): int = VarDecl(Value(2)) |
    Value(4): int = Lit(Int(1, 0)) |1
    Value(5): int = GlobalLoad(Global(2)) |1
    Value(4): int = Assign(Value(5)) |1
    Value(6): int = Call(Fun(489), []) |entry
    Value(6): int = Assign(Value(3)) |entry
    Return(Some(Value(3))) |


function u0:0(i64, i64) -> i64 fast {
    gv0 = symbol colocated u1:6
    sig0 = () -> i64 fast
    fn0 = colocated u0:51 sig0

block0(v0: i64, v1: i64):
    v7 = iconst.i64 0
    v3 -> v7
    v2 = iconst.i64 0
    v4 = iconst.i64 1
    v5 = global_value.i64 gv0
    store v4, v5
    v6 = call fn0()
    return v6
}

output:
ok
ok
ok
ok
ok
ok
ok
ok
Hello, World!ok
ok
ok
ok
ok
ok
ok
ok
:end
