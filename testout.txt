16 16
Ok(Arguments { _filename: "file", hash: ID(0), flags: ["flag", "flag"], field_flags: [("flag", "value")], args: ["arg", "arg"] })
Ok(Arguments { _filename: "file", hash: ID(0), flags: [], field_flags: [], args: ["string value"] })
|> text_code.mf:1:15
| ## doc comment
| ^^^^^^^^^^^^^^
|> text_code.mf:2:1
| fun something -> fun(int, int) -> int:
| ^
|> text_code.mf:2:4
| fun something -> fun(int, int) -> int:
| ^^^
|> text_code.mf:2:14
| fun something -> fun(int, int) -> int:
|     ^^^^^^^^^
|> text_code.mf:2:17
| fun something -> fun(int, int) -> int:
|               ^^
|> text_code.mf:2:21
| fun something -> fun(int, int) -> int:
|                  ^^^
|> text_code.mf:2:22
| fun something -> fun(int, int) -> int:
|                     ^
|> text_code.mf:2:25
| fun something -> fun(int, int) -> int:
|                      ^^^
|> text_code.mf:2:26
| fun something -> fun(int, int) -> int:
|                         ^
|> text_code.mf:2:30
| fun something -> fun(int, int) -> int:
|                           ^^^
|> text_code.mf:2:31
| fun something -> fun(int, int) -> int:
|                              ^
|> text_code.mf:2:34
| fun something -> fun(int, int) -> int:
|                                ^^
|> text_code.mf:2:38
| fun something -> fun(int, int) -> int:
|                                   ^^^
|> text_code.mf:2:39
| fun something -> fun(int, int) -> int:
|                                      ^
|> text_code.mf:3:3
|   # ignored comment
| ^^
|> text_code.mf:4:3
|   return #[ even more ignored comment ]# pointed_function
| ^^
|> text_code.mf:4:9
|   return #[ even more ignored comment ]# pointed_function
|   ^^^^^^
|> text_code.mf:4:58
|   return #[ even more ignored comment ]# pointed_function
|                                          ^^^^^^^^^^^^^^^^
|> text_code.mf:5:4
|   
| ^^^
|> text_code.mf:6:1
| ##[
| ^
|> text_code.mf:8:3
| ##[
|   multiline doc comment
| ]#
| ^^^^^^^^^^^^^^^^^^^^^^^
|> text_code.mf:9:1
| struct Scope
| ^
|> text_code.mf:9:7
| struct Scope
| ^^^^^^
|> text_code.mf:9:13
| struct Scope
|        ^^^^^
===global===
None
None
VarStatement(None, true) "var something = [1, 2, 3]\r":
 VarAssign "something = [1, 2, 3]\r":
  Group "something ":
   Ident "something"
  None
  Group "= [1, 2, 3]\r":
   Array "[1, 2, 3]\r":
    Lit "1"
    Lit "2"
    Lit "3"
===global===
None
None
VarStatement(None, false) "let hello = \"hello\"\r":
 VarAssign "hello = \"hello\"\r":
  Group "hello ":
   Ident "hello"
  None
  Group "= \"hello\"\r":
   Lit "\"hello\""
===type===
Group "":
 Comment "##[\r\n  multiline doc comment\r\n]#"
Struct(None) "struct Scope\r":
 Ident "Scope"
 None
===type===
None
Struct(None) "struct Template[T]\r":
 Instantiation "Template[T]\r":
  Ident "Template"
  Ident "T"
 None
===type===
None
Struct(None) "struct Foo:\r\n  a, b, c: int\r\n\r":
 Ident "Foo"
 Group ":\r\n  a, b, c: int\r\n\r":
  StructField(None, false) "a, b, c: int\r":
   Ident "a"
   Ident "b"
   Ident "c"
   Ident "int"
===type===
None
Struct(None) "struct Goo:\r\n  embed foo: Foo\r\n  gva: int\r\n\r":
 Ident "Goo"
 Group ":\r\n  embed foo: Foo\r\n  gva: int\r\n\r":
  StructField(None, true) "embed foo: Foo\r":
   Ident "foo"
   Ident "Foo"
  StructField(None, false) "gva: int\r":
   Ident "gva"
   Ident "int"
===fun===
None
None
Fun "fun pointed_function(a: Int, b: Int) -> int:\r\n  return a + b\r\n\r":
 FunHeader(Normal, None, Fast) "fun pointed_function(a: Int, b: Int) -> int":
  Ident "pointed_function"
  FunArgument(false) "a: Int":
   Ident "a"
   Ident "Int"
  FunArgument(false) "b: Int":
   Ident "b"
   Ident "Int"
  Ident "int"
 Group ":\r\n  return a + b\r\n\r":
  Return "return a + b\r":
   Binary "a + b":
    Ident "+"
    Ident "a"
    Ident "b"
===fun===
None
Group "":
 Comment "## doc comment\r"
Fun "fun something -> fun(int, int) -> int:\r\n  # ignored comment\r\n  return #[ even more ignored comment ]# pointed_function\r\n\r":
 FunHeader(Normal, None, Fast) "fun something -> fun(int, int) -> int":
  Ident "something"
  FunHeader(Normal, None, Fast) "fun(int, int) -> int":
   None
   Ident "int"
   Ident "int"
   Ident "int"
 Group ":\r\n  # ignored comment\r\n  return #[ even more ignored comment ]# pointed_function\r\n\r":
  Return "return #[ even more ignored comment ]# pointed_function\r":
   Ident "pointed_function"
===fun===
Impl(None) "impl Scope":
 None
 Ident "Scope"
None
Fun "fun new -> Self:\r\n    return\r\n  \r":
 FunHeader(Normal, None, Fast) "fun new -> Self":
  Ident "new"
  Ident "Self"
 Group ":\r\n    return\r\n  \r":
  Return "return\r":
   None
===fun===
Impl(None) "impl Scope":
 None
 Ident "Scope"
None
Fun "fun do_nothing(s: Self):\r\n    pass\r\n\r":
 FunHeader(Normal, None, Fast) "fun do_nothing(s: Self)":
  Ident "do_nothing"
  FunArgument(false) "s: Self":
   Ident "s"
   Ident "Self"
  None
 Group ":\r\n    pass\r\n\r":
  Pass "pass"
===fun===
Impl(None) "impl[T] Template[T]":
 Group "[T] ":
  Ident "T"
 Instantiation "Template[T]":
  Ident "Template"
  Ident "T"
None
Fun "fun new -> Self:\r\n    return\r\n  \r":
 FunHeader(Normal, None, Fast) "fun new -> Self":
  Ident "new"
  Ident "Self"
 Group ":\r\n    return\r\n  \r":
  Return "return\r":
   None
===fun===
Impl(None) "impl[T] Template[T]":
 Group "[T] ":
  Ident "T"
 Instantiation "Template[T]":
  Ident "Template"
  Ident "T"
None
Fun "fun do_nothing(s: Self, value: T) -> T:\r\n    value\r\n\r":
 FunHeader(Normal, None, Fast) "fun do_nothing(s: Self, value: T) -> T":
  Ident "do_nothing"
  FunArgument(false) "s: Self":
   Ident "s"
   Ident "Self"
  FunArgument(false) "value: T":
   Ident "value"
   Ident "T"
  Ident "T"
 Group ":\r\n    value\r\n\r":
  Ident "value"
===fun===
None
None
Fun "fun use_chain:\r\n  module::Type::method::[param]()\r\n\r":
 FunHeader(Normal, None, Fast) "fun use_chain":
  Ident "use_chain"
  None
 Group ":\r\n  module::Type::method::[param]()\r\n\r":
  Call(false) "module::Type::method::[param]()\r":
   Instantiation "module::Type::method::[param]":
    Path "module::Type::method":
     Ident "module"
     Ident "Type"
     Ident "method"
    Ident "param"
===fun===
None
None
Fun "fun flo: pass\r":
 FunHeader(Normal, None, Fast) "fun flo":
  Ident "flo"
  None
 Group ": pass\r":
  Pass "pass"
===fun===
None
None
Fun "fun foo(): pass\r":
 FunHeader(Normal, None, Fast) "fun foo()":
  Ident "foo"
  None
 Group ": pass\r":
  Pass "pass"
===fun===
None
None
Fun "fun goo(a: i8, b: i8): pass\r":
 FunHeader(Normal, None, Fast) "fun goo(a: i8, b: i8)":
  Ident "goo"
  FunArgument(false) "a: i8":
   Ident "a"
   Ident "i8"
  FunArgument(false) "b: i8":
   Ident "b"
   Ident "i8"
  None
 Group ": pass\r":
  Pass "pass"
===fun===
None
None
Fun "fun loo:\r\n  noo::loo::[i8]()\r\n\r\n  let array = [1, 2, 3]\r\n  array[0] = 3\r\n  array[2] = always[1]\r\n  array[1] = 1\r\n\r\n  pass\r\n\r":
 FunHeader(Normal, None, Fast) "fun loo":
  Ident "loo"
  None
 Group ":\r\n  noo::loo::[i8]()\r\n\r\n  let array = [1, 2, 3]\r\n  array[0] = 3\r\n  array[2] = always[1]\r\n  array[1] = 1\r\n\r\n  pass\r\n\r":
  Call(false) "noo::loo::[i8]()\r":
   Instantiation "noo::loo::[i8]":
    Path "noo::loo":
     Ident "noo"
     Ident "loo"
    Ident "i8"
  VarStatement(None, false) "let array = [1, 2, 3]\r":
   VarAssign "array = [1, 2, 3]\r":
    Group "array ":
     Ident "array"
    None
    Group "= [1, 2, 3]\r":
     Array "[1, 2, 3]\r":
      Lit "1"
      Lit "2"
      Lit "3"
  Binary "array[0] = 3":
   Ident "="
   Index "array[0] ":
    Ident "array"
    Lit "0"
   Lit "3"
  Binary "array[2] = always[1]\r":
   Ident "="
   Index "array[2] ":
    Ident "array"
    Lit "2"
   Index "always[1]\r":
    Ident "always"
    Lit "1"
  Binary "array[1] = 1":
   Ident "="
   Index "array[1] ":
    Ident "array"
    Lit "1"
   Lit "1"
  Pass "pass"
===fun===
None
None
Fun "fun main -> i64:\r\n  return 10 + 4 - 2 * 1 + 8\r\n\r":
 FunHeader(Normal, None, Fast) "fun main -> i64":
  Ident "main"
  Ident "i64"
 Group ":\r\n  return 10 + 4 - 2 * 1 + 8\r\n\r":
  Return "return 10 + 4 - 2 * 1 + 8\r":
   Binary "10 + 4 - 2 * 1 + 8":
    Ident "-"
    Binary "10 + 4":
     Ident "+"
     Lit "10"
     Lit "4"
    Binary "2 * 1 + 8":
     Ident "+"
     Binary "2 * 1":
      Ident "*"
      Lit "2"
      Lit "1"
     Lit "8"
===fun===
None
None
Fun "fun operator_stress_test -> i64:\r\n  return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10\r\n\r":
 FunHeader(Normal, None, Fast) "fun operator_stress_test -> i64":
  Ident "operator_stress_test"
  Ident "i64"
 Group ":\r\n  return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10\r\n\r":
  Return "return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10\r":
   Binary "10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
    Ident "+"
    Lit "10"
    Binary "2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
     Ident "|"
     Binary "2 * 1 - 9":
      Ident "-"
      Binary "2 * 1":
       Ident "*"
       Lit "2"
       Lit "1"
      Lit "9"
     Binary "4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
      Ident "^"
      Binary "4 & 1":
       Ident "&"
       Lit "4"
       Lit "1"
      Binary "2 >> 1 << 7 min 20 max 10":
       Ident "max"
       Binary "2 >> 1 << 7 min 20":
        Ident "min"
        Binary "2 >> 1 << 7":
         Ident "<<"
         Binary "2 >> 1":
          Ident ">>"
          Lit "2"
          Lit "1"
         Lit "7"
        Lit "20"
       Lit "10"
===fun===
None
None
Fun "fun conditional -> i64:\r\n  if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0\r\n\r":
 FunHeader(Normal, None, Fast) "fun conditional -> i64":
  Ident "conditional"
  Ident "i64"
 Group ":\r\n  if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0\r\n\r":
  If "if":
   Lit "false"
   Group ":\r\n    return 10\r":
    Return "return 10\r":
     Lit "10"
   Elif "elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0\r\n\r":
    If "elif":
     Lit "true"
     Group ":\r\n    return if true: 10 else: 20\r":
      Return "return if true: 10 else: 20\r":
       If "if":
        Lit "true"
        Group ": 10 ":
         Lit "10"
        Group ": 20\r":
         Lit "20"
     Group ":\r\n    return 0\r\n\r":
      Return "return 0\r":
       Lit "0"
===fun===
None
Group "":
 AttributeAssign "inline = always":
  Ident "inline"
  Ident "always"
 AttributeAssign "call_conv = cold\r":
  Ident "call_conv"
  Ident "cold"
Fun "fun inline_fn -> u32:\r\n  return 10\r\n\r":
 FunHeader(Normal, None, Fast) "fun inline_fn -> u32":
  Ident "inline_fn"
  Ident "u32"
 Group ":\r\n  return 10\r\n\r":
  Return "return 10\r":
   Lit "10"
===fun===
None
None
Fun "fun fib(v: i64) -> i64:\r\n  return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)\r\n\r":
 FunHeader(Normal, None, Fast) "fun fib(v: i64) -> i64":
  Ident "fib"
  FunArgument(false) "v: i64":
   Ident "v"
   Ident "i64"
  Ident "i64"
 Group ":\r\n  return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)\r\n\r":
  Return "return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)\r\n\r":
   If "if":
    Binary "v == 0 | v == 1":
     Ident "|"
     Binary "v == 0":
      Ident "=="
      Ident "v"
      Lit "0"
     Binary "v == 1":
      Ident "=="
      Ident "v"
      Lit "1"
    Group ":\r\n    1\r":
     Lit "1"
    Group ":\r\n    fib(v - 1) + fib(v - 2)\r\n\r":
     Binary "fib(v - 1) + fib(v - 2)\r":
      Ident "+"
      Call(false) "fib(v - 1) ":
       Ident "fib"
       Binary "v - 1":
        Ident "-"
        Ident "v"
        Lit "1"
      Call(false) "fib(v - 2)\r":
       Ident "fib"
       Binary "v - 2":
        Ident "-"
        Ident "v"
        Lit "2"
===fun===
None
None
Fun "fun fib_loop(v: i64) -> i64:\r\n  var a, b, c = 1\r\n  for'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r\n  return c\r\n\r":
 FunHeader(Normal, None, Fast) "fun fib_loop(v: i64) -> i64":
  Ident "fib_loop"
  FunArgument(false) "v: i64":
   Ident "v"
   Ident "i64"
  Ident "i64"
 Group ":\r\n  var a, b, c = 1\r\n  for'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r\n  return c\r\n\r":
  VarStatement(None, true) "var a, b, c = 1\r":
   VarAssign "a, b, c = 1\r":
    Group "a, b, c ":
     Ident "a"
     Ident "b"
     Ident "c"
    None
    Group "= 1\r":
     Lit "1"
     Ident "a"
     Ident "a"
  Loop "for'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r":
   Ident "'a"
   Group ":\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r":
    Binary "c = a + b":
     Ident "="
     Ident "c"
     Binary "a + b":
      Ident "+"
      Ident "a"
      Ident "b"
    Binary "a = b":
     Ident "="
     Ident "a"
     Ident "b"
    Binary "b = c":
     Ident "="
     Ident "b"
     Ident "c"
    Binary "v = v - 1":
     Ident "="
     Ident "v"
     Binary "v - 1":
      Ident "-"
      Ident "v"
      Lit "1"
    If "if":
     Binary "v == 0":
      Ident "=="
      Ident "v"
      Lit "0"
     Group ":\r\n      break'a\r":
      Break "break'a\r":
       Ident "'a"
       None
     None
  Return "return c\r":
   Ident "c"
===fun===
None
None
Fun "fun unary_operators(a: i64) -> i64:\r\n  return -a + ~a + !a + ++a + --a\r\n\r":
 FunHeader(Normal, None, Fast) "fun unary_operators(a: i64) -> i64":
  Ident "unary_operators"
  FunArgument(false) "a: i64":
   Ident "a"
   Ident "i64"
  Ident "i64"
 Group ":\r\n  return -a + ~a + !a + ++a + --a\r\n\r":
  Return "return -a + ~a + !a + ++a + --a\r":
   Binary "-a + ~a + !a + ++a + --a\r":
    Ident "+"
    Binary "-a + ~a + !a + ++a ":
     Ident "+"
     Binary "-a + ~a + !a ":
      Ident "+"
      Binary "-a + ~a ":
       Ident "+"
       Ident "-a ":
        Ident "-"
        Ident "a"
       Ident "~a ":
        Ident "~"
        Ident "a"
      Ident "!a ":
       Ident "!"
       Ident "a"
     Ident "++a ":
      Ident "++"
      Ident "a"
    Ident "--a\r":
     Ident "--"
     Ident "a"
===fun===
None
None
Fun "fun strings -> i64:\r\n  var hello = \"hello\"\r\n  return 0\r\n\r":
 FunHeader(Normal, None, Fast) "fun strings -> i64":
  Ident "strings"
  Ident "i64"
 Group ":\r\n  var hello = \"hello\"\r\n  return 0\r\n\r":
  VarStatement(None, true) "var hello = \"hello\"\r":
   VarAssign "hello = \"hello\"\r":
    Group "hello ":
     Ident "hello"
    None
    Group "= \"hello\"\r":
     Lit "\"hello\""
  Return "return 0\r":
   Lit "0"
===fun===
None
None
Fun "fun mutable_ref(a: &Foo):\r\n  a.a = 10\r\n  a.b = 20\r\n  a.c = 30\r\n\r":
 FunHeader(Normal, None, Fast) "fun mutable_ref(a: &Foo)":
  Ident "mutable_ref"
  FunArgument(false) "a: &Foo":
   Ident "a"
   Ref(false) "&Foo":
    Ident "Foo"
  None
 Group ":\r\n  a.a = 10\r\n  a.b = 20\r\n  a.c = 30\r\n\r":
  Binary "a.a = 10":
   Ident "="
   Dot "a.a ":
    Ident "a"
    Ident "a"
   Lit "10"
  Binary "a.b = 20":
   Ident "="
   Dot "a.b ":
    Ident "a"
    Ident "b"
   Lit "20"
  Binary "a.c = 30":
   Ident "="
   Dot "a.c ":
    Ident "a"
    Ident "c"
   Lit "30"
===fun===
None
None
Fun "fun some_string -> &u8:\r\n  \"\r\nhello there\r\n  \"":
 FunHeader(Normal, None, Fast) "fun some_string -> &u8":
  Ident "some_string"
  Ref(false) "&u8":
   Ident "u8"
 Group ":\r\n  \"\r\nhello there\r\n  \"":
  Lit "\"\r\nhello there\r\n  \""
