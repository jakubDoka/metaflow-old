Ok(Arguments { filename: "file", flags: ["flag", "flag"], field_flags: [("flag", "value")], args: ["arg", "arg"] })
Ok(Arguments { filename: "file", flags: [], field_flags: [], args: ["string value"] })
Dummy1
[(Dummy(1), 0)]
0
Dummy(1)
[]
[(Dummy(1), 0)]
|> 1:1:text_code.mf
| var something = [1, 2, 3]
| ^
|> 2:1:text_code.mf
| var something = [1, 2, 3]
| ^^^
|> 2:5:text_code.mf
| var something = [1, 2, 3]
|     ^^^^^^^^^
|> 2:15:text_code.mf
| var something = [1, 2, 3]
|               ^
|> 2:17:text_code.mf
| var something = [1, 2, 3]
|                 ^
|> 2:18:text_code.mf
| var something = [1, 2, 3]
|                  ^
|> 2:19:text_code.mf
| var something = [1, 2, 3]
|                   ^
|> 2:21:text_code.mf
| var something = [1, 2, 3]
|                     ^
|> 2:22:text_code.mf
| var something = [1, 2, 3]
|                      ^
|> 2:24:text_code.mf
| var something = [1, 2, 3]
|                        ^
|> 2:25:text_code.mf
| var something = [1, 2, 3]
|                         ^
|> 2:27:text_code.mf
| let hello = "hello"
| ^
|> 3:1:text_code.mf
| let hello = "hello"
| ^^^
|> 3:5:text_code.mf
| let hello = "hello"
|     ^^^^^
|> 3:11:text_code.mf
| let hello = "hello"
|           ^
|> 3:13:text_code.mf
| let hello = "hello"
|             ^^^^^^^
|> 3:21:text_code.mf
| 
| ^
|> 4:2:text_code.mf
| fun something -> fun(int, int) -> int:
| ^
|> 5:1:text_code.mf
| fun something -> fun(int, int) -> int:
| ^^^
|> 5:5:text_code.mf
| fun something -> fun(int, int) -> int:
|     ^^^^^^^^^
|> 5:15:text_code.mf
| fun something -> fun(int, int) -> int:
|               ^^
|> 5:18:text_code.mf
| fun something -> fun(int, int) -> int:
|                  ^^^
|> 5:21:text_code.mf
| fun something -> fun(int, int) -> int:
|                     ^
|> 5:22:text_code.mf
| fun something -> fun(int, int) -> int:
|                      ^^^
|> 5:25:text_code.mf
| fun something -> fun(int, int) -> int:
|                         ^
|> 5:27:text_code.mf
| fun something -> fun(int, int) -> int:
|                           ^^^
|> 5:30:text_code.mf
| fun something -> fun(int, int) -> int:
|                              ^
|> 5:32:text_code.mf
| fun something -> fun(int, int) -> int:
|                                ^^
|> 5:35:text_code.mf
| fun something -> fun(int, int) -> int:
|                                   ^^^
|> 5:38:text_code.mf
| fun something -> fun(int, int) -> int:
|                                      ^
|> 5:40:text_code.mf
|   return fun(a, b: int) -> int: a + b
| ^^
|> 6:3:text_code.mf
|   return fun(a, b: int) -> int: a + b
|   ^^^^^^
|> 6:10:text_code.mf
|   return fun(a, b: int) -> int: a + b
|          ^^^
|> 6:13:text_code.mf
|   return fun(a, b: int) -> int: a + b
|             ^
|> 6:14:text_code.mf
|   return fun(a, b: int) -> int: a + b
|              ^
|> 6:15:text_code.mf
|   return fun(a, b: int) -> int: a + b
|               ^
|> 6:17:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                 ^
|> 6:18:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                  ^
|> 6:20:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                    ^^^
|> 6:23:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                       ^
|> 6:25:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                         ^^
|> 6:28:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                            ^^^
|> 6:31:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                               ^
|> 6:33:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                                 ^
|> 6:35:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                                   ^
|> 6:37:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                                     ^
|> 6:39:text_code.mf
| 
| ^
|> 7:2:text_code.mf
| struct Scope
| ^
|> 8:1:text_code.mf
| struct Scope
| ^^^^^^
|> 8:8:text_code.mf
| struct Scope
|        ^^^^^
|> 8:14:text_code.mf
| 
| ^
|> 9:2:text_code.mf
| impl Scope:
| ^
|> 10:1:text_code.mf
| impl Scope:
| ^^^^
|> 10:6:text_code.mf
| impl Scope:
|      ^^^^^
|> 10:11:text_code.mf
| impl Scope:
|           ^
|> 10:13:text_code.mf
|   fun new -> Self:
| ^^
|> 11:3:text_code.mf
|   fun new -> Self:
|   ^^^
|> 11:7:text_code.mf
|   fun new -> Self:
|       ^^^
|> 11:11:text_code.mf
|   fun new -> Self:
|           ^^
|> 11:14:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 11:18:text_code.mf
|   fun new -> Self:
|                  ^
|> 11:20:text_code.mf
|     return
| ^^^^
|> 12:5:text_code.mf
|     return
|     ^^^^^^
|> 12:12:text_code.mf
|   
| ^^^
|> 13:4:text_code.mf
|   fun do_nothing(s: Self):
| ^^
|> 14:3:text_code.mf
|   fun do_nothing(s: Self):
|   ^^^
|> 14:7:text_code.mf
|   fun do_nothing(s: Self):
|       ^^^^^^^^^^
|> 14:17:text_code.mf
|   fun do_nothing(s: Self):
|                 ^
|> 14:18:text_code.mf
|   fun do_nothing(s: Self):
|                  ^
|> 14:19:text_code.mf
|   fun do_nothing(s: Self):
|                   ^
|> 14:21:text_code.mf
|   fun do_nothing(s: Self):
|                     ^^^^
|> 14:25:text_code.mf
|   fun do_nothing(s: Self):
|                         ^
|> 14:26:text_code.mf
|   fun do_nothing(s: Self):
|                          ^
|> 14:28:text_code.mf
|     pass
| ^^^^
|> 15:5:text_code.mf
|     pass
|     ^^^^
|> 15:10:text_code.mf
| 
| ^
|> 16:2:text_code.mf
| struct Template[T]
| ^
|> 17:1:text_code.mf
| struct Template[T]
| ^^^^^^
|> 17:8:text_code.mf
| struct Template[T]
|        ^^^^^^^^
|> 17:16:text_code.mf
| struct Template[T]
|                ^
|> 17:17:text_code.mf
| struct Template[T]
|                 ^
|> 17:18:text_code.mf
| struct Template[T]
|                  ^
|> 17:20:text_code.mf
| 
| ^
|> 18:2:text_code.mf
| impl[T] Template[T]:
| ^
|> 19:1:text_code.mf
| impl[T] Template[T]:
| ^^^^
|> 19:5:text_code.mf
| impl[T] Template[T]:
|     ^
|> 19:6:text_code.mf
| impl[T] Template[T]:
|      ^
|> 19:7:text_code.mf
| impl[T] Template[T]:
|       ^
|> 19:9:text_code.mf
| impl[T] Template[T]:
|         ^^^^^^^^
|> 19:17:text_code.mf
| impl[T] Template[T]:
|                 ^
|> 19:18:text_code.mf
| impl[T] Template[T]:
|                  ^
|> 19:19:text_code.mf
| impl[T] Template[T]:
|                   ^
|> 19:20:text_code.mf
| impl[T] Template[T]:
|                    ^
|> 19:22:text_code.mf
|   fun new -> Self:
| ^^
|> 20:3:text_code.mf
|   fun new -> Self:
|   ^^^
|> 20:7:text_code.mf
|   fun new -> Self:
|       ^^^
|> 20:11:text_code.mf
|   fun new -> Self:
|           ^^
|> 20:14:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 20:18:text_code.mf
|   fun new -> Self:
|                  ^
|> 20:20:text_code.mf
|     return
| ^^^^
|> 21:5:text_code.mf
|     return
|     ^^^^^^
|> 21:12:text_code.mf
|   
| ^^^
|> 22:4:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
| ^^
|> 23:3:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|   ^^^
|> 23:7:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|       ^^^^^^^^^^
|> 23:17:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                 ^
|> 23:18:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                  ^
|> 23:19:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                   ^
|> 23:21:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                     ^^^^
|> 23:25:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                         ^
|> 23:27:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                           ^^^^^
|> 23:32:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                ^
|> 23:34:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                  ^
|> 23:35:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                   ^
|> 23:37:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                     ^^
|> 23:40:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                        ^
|> 23:41:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                         ^
|> 23:43:text_code.mf
|     value
| ^^^^
|> 24:5:text_code.mf
|     value
|     ^^^^^
|> 24:11:text_code.mf
| 
| ^
|> 25:2:text_code.mf
| fun use_chain:
| ^
|> 26:1:text_code.mf
| fun use_chain:
| ^^^
|> 26:5:text_code.mf
| fun use_chain:
|     ^^^^^^^^^
|> 26:14:text_code.mf
| fun use_chain:
|              ^
|> 26:16:text_code.mf
|   module::Type::method::[param]()
| ^^
|> 27:3:text_code.mf
|   module::Type::method::[param]()
|   ^^^^^^
|> 27:9:text_code.mf
|   module::Type::method::[param]()
|         ^^
|> 27:11:text_code.mf
|   module::Type::method::[param]()
|           ^^^^
|> 27:15:text_code.mf
|   module::Type::method::[param]()
|               ^^
|> 27:17:text_code.mf
|   module::Type::method::[param]()
|                 ^^^^^^
|> 27:23:text_code.mf
|   module::Type::method::[param]()
|                       ^^
|> 27:25:text_code.mf
|   module::Type::method::[param]()
|                         ^
|> 27:26:text_code.mf
|   module::Type::method::[param]()
|                          ^^^^^
|> 27:31:text_code.mf
|   module::Type::method::[param]()
|                               ^
|> 27:32:text_code.mf
|   module::Type::method::[param]()
|                                ^
|> 27:33:text_code.mf
|   module::Type::method::[param]()
|                                 ^
|> 27:35:text_code.mf
| 
| ^
|> 28:2:text_code.mf
| fun flo: pass
| ^
|> 29:1:text_code.mf
| fun flo: pass
| ^^^
|> 29:5:text_code.mf
| fun flo: pass
|     ^^^
|> 29:8:text_code.mf
| fun flo: pass
|        ^
|> 29:10:text_code.mf
| fun flo: pass
|          ^^^^
|> 29:15:text_code.mf
| 
| ^
|> 30:2:text_code.mf
| fun foo(): pass
| ^
|> 31:1:text_code.mf
| fun foo(): pass
| ^^^
|> 31:5:text_code.mf
| fun foo(): pass
|     ^^^
|> 31:8:text_code.mf
| fun foo(): pass
|        ^
|> 31:9:text_code.mf
| fun foo(): pass
|         ^
|> 31:10:text_code.mf
| fun foo(): pass
|          ^
|> 31:12:text_code.mf
| fun foo(): pass
|            ^^^^
|> 31:17:text_code.mf
| 
| ^
|> 32:2:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^
|> 33:1:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^^^
|> 33:5:text_code.mf
| fun goo(a: i8, b: i8): pass
|     ^^^
|> 33:8:text_code.mf
| fun goo(a: i8, b: i8): pass
|        ^
|> 33:9:text_code.mf
| fun goo(a: i8, b: i8): pass
|         ^
|> 33:10:text_code.mf
| fun goo(a: i8, b: i8): pass
|          ^
|> 33:12:text_code.mf
| fun goo(a: i8, b: i8): pass
|            ^^
|> 33:14:text_code.mf
| fun goo(a: i8, b: i8): pass
|              ^
|> 33:16:text_code.mf
| fun goo(a: i8, b: i8): pass
|                ^
|> 33:17:text_code.mf
| fun goo(a: i8, b: i8): pass
|                 ^
|> 33:19:text_code.mf
| fun goo(a: i8, b: i8): pass
|                   ^^
|> 33:21:text_code.mf
| fun goo(a: i8, b: i8): pass
|                     ^
|> 33:22:text_code.mf
| fun goo(a: i8, b: i8): pass
|                      ^
|> 33:24:text_code.mf
| fun goo(a: i8, b: i8): pass
|                        ^^^^
|> 33:29:text_code.mf
| 
| ^
|> 34:2:text_code.mf
| fun loo:
| ^
|> 35:1:text_code.mf
| fun loo:
| ^^^
|> 35:5:text_code.mf
| fun loo:
|     ^^^
|> 35:8:text_code.mf
| fun loo:
|        ^
|> 35:10:text_code.mf
|   noo::loo::[i8]()
| ^^
|> 36:3:text_code.mf
|   noo::loo::[i8]()
|   ^^^
|> 36:6:text_code.mf
|   noo::loo::[i8]()
|      ^^
|> 36:8:text_code.mf
|   noo::loo::[i8]()
|        ^^^
|> 36:11:text_code.mf
|   noo::loo::[i8]()
|           ^^
|> 36:13:text_code.mf
|   noo::loo::[i8]()
|             ^
|> 36:14:text_code.mf
|   noo::loo::[i8]()
|              ^^
|> 36:16:text_code.mf
|   noo::loo::[i8]()
|                ^
|> 36:17:text_code.mf
|   noo::loo::[i8]()
|                 ^
|> 36:18:text_code.mf
|   noo::loo::[i8]()
|                  ^
|> 36:20:text_code.mf
| 
| ^
|> 37:2:text_code.mf
|   let array = [1, 2, 3]
| ^^
|> 38:3:text_code.mf
|   let array = [1, 2, 3]
|   ^^^
|> 38:7:text_code.mf
|   let array = [1, 2, 3]
|       ^^^^^
|> 38:13:text_code.mf
|   let array = [1, 2, 3]
|             ^
|> 38:15:text_code.mf
|   let array = [1, 2, 3]
|               ^
|> 38:16:text_code.mf
|   let array = [1, 2, 3]
|                ^
|> 38:17:text_code.mf
|   let array = [1, 2, 3]
|                 ^
|> 38:19:text_code.mf
|   let array = [1, 2, 3]
|                   ^
|> 38:20:text_code.mf
|   let array = [1, 2, 3]
|                    ^
|> 38:22:text_code.mf
|   let array = [1, 2, 3]
|                      ^
|> 38:23:text_code.mf
|   let array = [1, 2, 3]
|                       ^
|> 38:25:text_code.mf
|   array[0] = 3
| ^^
|> 39:3:text_code.mf
|   array[0] = 3
|   ^^^^^
|> 39:8:text_code.mf
|   array[0] = 3
|        ^
|> 39:9:text_code.mf
|   array[0] = 3
|         ^
|> 39:10:text_code.mf
|   array[0] = 3
|          ^
|> 39:12:text_code.mf
|   array[0] = 3
|            ^
|> 39:14:text_code.mf
|   array[0] = 3
|              ^
|> 39:16:text_code.mf
|   array[2] = always[1]
| ^^
|> 40:3:text_code.mf
|   array[2] = always[1]
|   ^^^^^
|> 40:8:text_code.mf
|   array[2] = always[1]
|        ^
|> 40:9:text_code.mf
|   array[2] = always[1]
|         ^
|> 40:10:text_code.mf
|   array[2] = always[1]
|          ^
|> 40:12:text_code.mf
|   array[2] = always[1]
|            ^
|> 40:14:text_code.mf
|   array[2] = always[1]
|              ^^^^^^
|> 40:20:text_code.mf
|   array[2] = always[1]
|                    ^
|> 40:21:text_code.mf
|   array[2] = always[1]
|                     ^
|> 40:22:text_code.mf
|   array[2] = always[1]
|                      ^
|> 40:24:text_code.mf
|   array[1] = 1
| ^^
|> 41:3:text_code.mf
|   array[1] = 1
|   ^^^^^
|> 41:8:text_code.mf
|   array[1] = 1
|        ^
|> 41:9:text_code.mf
|   array[1] = 1
|         ^
|> 41:10:text_code.mf
|   array[1] = 1
|          ^
|> 41:12:text_code.mf
|   array[1] = 1
|            ^
|> 41:14:text_code.mf
|   array[1] = 1
|              ^
|> 41:16:text_code.mf
| 
| ^
|> 42:2:text_code.mf
|   pass
| ^^
|> 43:3:text_code.mf
|   pass
|   ^^^^
|> 43:8:text_code.mf
| 
| ^
|> 44:2:text_code.mf
| fun main -> i64:
| ^
|> 45:1:text_code.mf
| fun main -> i64:
| ^^^
|> 45:5:text_code.mf
| fun main -> i64:
|     ^^^^
|> 45:10:text_code.mf
| fun main -> i64:
|          ^^
|> 45:13:text_code.mf
| fun main -> i64:
|             ^^^
|> 45:16:text_code.mf
| fun main -> i64:
|                ^
|> 45:18:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
| ^^
|> 46:3:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|   ^^^^^^
|> 46:10:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|          ^^
|> 46:13:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|             ^
|> 46:15:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|               ^
|> 46:17:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                 ^
|> 46:19:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                   ^
|> 46:21:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                     ^
|> 46:23:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                       ^
|> 46:25:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                         ^
|> 46:27:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                           ^
|> 46:29:text_code.mf
| 
| ^
|> 47:2:text_code.mf
| fun operator_stress_test -> i64:
| ^
|> 48:1:text_code.mf
| fun operator_stress_test -> i64:
| ^^^
|> 48:5:text_code.mf
| fun operator_stress_test -> i64:
|     ^^^^^^^^^^^^^^^^^^^^
|> 48:26:text_code.mf
| fun operator_stress_test -> i64:
|                          ^^
|> 48:29:text_code.mf
| fun operator_stress_test -> i64:
|                             ^^^
|> 48:32:text_code.mf
| fun operator_stress_test -> i64:
|                                ^
|> 48:34:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
| ^^
|> 49:3:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|   ^^^^^^
|> 49:10:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|          ^^
|> 49:13:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|             ^
|> 49:15:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|               ^
|> 49:17:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                 ^
|> 49:19:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                   ^
|> 49:21:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                     ^
|> 49:23:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                       ^
|> 49:25:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                         ^
|> 49:27:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                           ^
|> 49:29:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                             ^
|> 49:31:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                               ^
|> 49:33:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                 ^
|> 49:35:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                   ^
|> 49:37:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                     ^^
|> 49:40:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                        ^
|> 49:42:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                          ^^
|> 49:45:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                             ^
|> 49:47:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                               ^^^
|> 49:51:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                   ^^
|> 49:54:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                      ^^^
|> 49:58:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                          ^^
|> 49:61:text_code.mf
| 
| ^
|> 50:2:text_code.mf
| fun conditional -> i64:
| ^
|> 51:1:text_code.mf
| fun conditional -> i64:
| ^^^
|> 51:5:text_code.mf
| fun conditional -> i64:
|     ^^^^^^^^^^^
|> 51:17:text_code.mf
| fun conditional -> i64:
|                 ^^
|> 51:20:text_code.mf
| fun conditional -> i64:
|                    ^^^
|> 51:23:text_code.mf
| fun conditional -> i64:
|                       ^
|> 51:25:text_code.mf
|   if false:
| ^^
|> 52:3:text_code.mf
|   if false:
|   ^^
|> 52:6:text_code.mf
|   if false:
|      ^^^^^
|> 52:11:text_code.mf
|   if false:
|           ^
|> 52:13:text_code.mf
|     return 10
| ^^^^
|> 53:5:text_code.mf
|     return 10
|     ^^^^^^
|> 53:12:text_code.mf
|     return 10
|            ^^
|> 53:15:text_code.mf
|   elif true:
| ^^
|> 54:3:text_code.mf
|   elif true:
|   ^^^^
|> 54:8:text_code.mf
|   elif true:
|        ^^^^
|> 54:12:text_code.mf
|   elif true:
|            ^
|> 54:14:text_code.mf
|     return if true: 10 else: 20
| ^^^^
|> 55:5:text_code.mf
|     return if true: 10 else: 20
|     ^^^^^^
|> 55:12:text_code.mf
|     return if true: 10 else: 20
|            ^^
|> 55:15:text_code.mf
|     return if true: 10 else: 20
|               ^^^^
|> 55:19:text_code.mf
|     return if true: 10 else: 20
|                   ^
|> 55:21:text_code.mf
|     return if true: 10 else: 20
|                     ^^
|> 55:24:text_code.mf
|     return if true: 10 else: 20
|                        ^^^^
|> 55:28:text_code.mf
|     return if true: 10 else: 20
|                            ^
|> 55:30:text_code.mf
|     return if true: 10 else: 20
|                              ^^
|> 55:33:text_code.mf
|   else:
| ^^
|> 56:3:text_code.mf
|   else:
|   ^^^^
|> 56:7:text_code.mf
|   else:
|       ^
|> 56:9:text_code.mf
|     return 0
| ^^^^
|> 57:5:text_code.mf
|     return 0
|     ^^^^^^
|> 57:12:text_code.mf
|     return 0
|            ^
|> 57:14:text_code.mf
| 
| ^
|> 58:2:text_code.mf
| attr inline = always, call_conv = cold
| ^
|> 59:1:text_code.mf
| attr inline = always, call_conv = cold
| ^^^^
|> 59:6:text_code.mf
| attr inline = always, call_conv = cold
|      ^^^^^^
|> 59:13:text_code.mf
| attr inline = always, call_conv = cold
|             ^
|> 59:15:text_code.mf
| attr inline = always, call_conv = cold
|               ^^^^^^
|> 59:21:text_code.mf
| attr inline = always, call_conv = cold
|                     ^
|> 59:23:text_code.mf
| attr inline = always, call_conv = cold
|                       ^^^^^^^^^
|> 59:33:text_code.mf
| attr inline = always, call_conv = cold
|                                 ^
|> 59:35:text_code.mf
| attr inline = always, call_conv = cold
|                                   ^^^^
|> 59:40:text_code.mf
| fun inline_fn -> u32:
| ^
|> 60:1:text_code.mf
| fun inline_fn -> u32:
| ^^^
|> 60:5:text_code.mf
| fun inline_fn -> u32:
|     ^^^^^^^^^
|> 60:15:text_code.mf
| fun inline_fn -> u32:
|               ^^
|> 60:18:text_code.mf
| fun inline_fn -> u32:
|                  ^^^
|> 60:21:text_code.mf
| fun inline_fn -> u32:
|                     ^
|> 60:23:text_code.mf
|   return 10
| ^^
|> 61:3:text_code.mf
|   return 10
|   ^^^^^^
|> 61:10:text_code.mf
|   return 10
|          ^^
|> 61:13:text_code.mf
| 
| ^
|> 62:2:text_code.mf
| fun fib(v: i64) -> i64:
| ^
|> 63:1:text_code.mf
| fun fib(v: i64) -> i64:
| ^^^
|> 63:5:text_code.mf
| fun fib(v: i64) -> i64:
|     ^^^
|> 63:8:text_code.mf
| fun fib(v: i64) -> i64:
|        ^
|> 63:9:text_code.mf
| fun fib(v: i64) -> i64:
|         ^
|> 63:10:text_code.mf
| fun fib(v: i64) -> i64:
|          ^
|> 63:12:text_code.mf
| fun fib(v: i64) -> i64:
|            ^^^
|> 63:15:text_code.mf
| fun fib(v: i64) -> i64:
|               ^
|> 63:17:text_code.mf
| fun fib(v: i64) -> i64:
|                 ^^
|> 63:20:text_code.mf
| fun fib(v: i64) -> i64:
|                    ^^^
|> 63:23:text_code.mf
| fun fib(v: i64) -> i64:
|                       ^
|> 63:25:text_code.mf
|   return if v == 0 | v == 1:
| ^^
|> 64:3:text_code.mf
|   return if v == 0 | v == 1:
|   ^^^^^^
|> 64:10:text_code.mf
|   return if v == 0 | v == 1:
|          ^^
|> 64:13:text_code.mf
|   return if v == 0 | v == 1:
|             ^
|> 64:15:text_code.mf
|   return if v == 0 | v == 1:
|               ^^
|> 64:18:text_code.mf
|   return if v == 0 | v == 1:
|                  ^
|> 64:20:text_code.mf
|   return if v == 0 | v == 1:
|                    ^
|> 64:22:text_code.mf
|   return if v == 0 | v == 1:
|                      ^
|> 64:24:text_code.mf
|   return if v == 0 | v == 1:
|                        ^^
|> 64:27:text_code.mf
|   return if v == 0 | v == 1:
|                           ^
|> 64:28:text_code.mf
|   return if v == 0 | v == 1:
|                            ^
|> 64:30:text_code.mf
|     1
| ^^^^
|> 65:5:text_code.mf
|     1
|     ^
|> 65:7:text_code.mf
|   else:
| ^^
|> 66:3:text_code.mf
|   else:
|   ^^^^
|> 66:7:text_code.mf
|   else:
|       ^
|> 66:9:text_code.mf
|     fib(v - 1) + fib(v - 2)
| ^^^^
|> 67:5:text_code.mf
|     fib(v - 1) + fib(v - 2)
|     ^^^
|> 67:8:text_code.mf
|     fib(v - 1) + fib(v - 2)
|        ^
|> 67:9:text_code.mf
|     fib(v - 1) + fib(v - 2)
|         ^
|> 67:11:text_code.mf
|     fib(v - 1) + fib(v - 2)
|           ^
|> 67:13:text_code.mf
|     fib(v - 1) + fib(v - 2)
|             ^
|> 67:14:text_code.mf
|     fib(v - 1) + fib(v - 2)
|              ^
|> 67:16:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                ^
|> 67:18:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                  ^^^
|> 67:21:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                     ^
|> 67:22:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                      ^
|> 67:24:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                        ^
|> 67:26:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                          ^
|> 67:27:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                           ^
|> 67:29:text_code.mf
| 
| ^
|> 68:2:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^
|> 69:1:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^^^
|> 69:5:text_code.mf
| fun fib_loop(v: i64) -> i64:
|     ^^^^^^^^
|> 69:13:text_code.mf
| fun fib_loop(v: i64) -> i64:
|             ^
|> 69:14:text_code.mf
| fun fib_loop(v: i64) -> i64:
|              ^
|> 69:15:text_code.mf
| fun fib_loop(v: i64) -> i64:
|               ^
|> 69:17:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                 ^^^
|> 69:20:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                    ^
|> 69:22:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                      ^^
|> 69:25:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                         ^^^
|> 69:28:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                            ^
|> 69:30:text_code.mf
|   var a, b, c = 1
| ^^
|> 70:3:text_code.mf
|   var a, b, c = 1
|   ^^^
|> 70:7:text_code.mf
|   var a, b, c = 1
|       ^
|> 70:8:text_code.mf
|   var a, b, c = 1
|        ^
|> 70:10:text_code.mf
|   var a, b, c = 1
|          ^
|> 70:11:text_code.mf
|   var a, b, c = 1
|           ^
|> 70:13:text_code.mf
|   var a, b, c = 1
|             ^
|> 70:15:text_code.mf
|   var a, b, c = 1
|               ^
|> 70:17:text_code.mf
|   var a, b, c = 1
|                 ^
|> 70:19:text_code.mf
|   loop'a:
| ^^
|> 71:3:text_code.mf
|   loop'a:
|   ^^^^
|> 71:7:text_code.mf
|   loop'a:
|       ^^
|> 71:9:text_code.mf
|   loop'a:
|         ^
|> 71:11:text_code.mf
|     c = a + b
| ^^^^
|> 72:5:text_code.mf
|     c = a + b
|     ^
|> 72:7:text_code.mf
|     c = a + b
|       ^
|> 72:9:text_code.mf
|     c = a + b
|         ^
|> 72:11:text_code.mf
|     c = a + b
|           ^
|> 72:13:text_code.mf
|     c = a + b
|             ^
|> 72:15:text_code.mf
|     a = b
| ^^^^
|> 73:5:text_code.mf
|     a = b
|     ^
|> 73:7:text_code.mf
|     a = b
|       ^
|> 73:9:text_code.mf
|     a = b
|         ^
|> 73:11:text_code.mf
|     b = c
| ^^^^
|> 74:5:text_code.mf
|     b = c
|     ^
|> 74:7:text_code.mf
|     b = c
|       ^
|> 74:9:text_code.mf
|     b = c
|         ^
|> 74:11:text_code.mf
|     v = v - 1
| ^^^^
|> 75:5:text_code.mf
|     v = v - 1
|     ^
|> 75:7:text_code.mf
|     v = v - 1
|       ^
|> 75:9:text_code.mf
|     v = v - 1
|         ^
|> 75:11:text_code.mf
|     v = v - 1
|           ^
|> 75:13:text_code.mf
|     v = v - 1
|             ^
|> 75:15:text_code.mf
|     if v == 0:
| ^^^^
|> 76:5:text_code.mf
|     if v == 0:
|     ^^
|> 76:8:text_code.mf
|     if v == 0:
|        ^
|> 76:10:text_code.mf
|     if v == 0:
|          ^^
|> 76:13:text_code.mf
|     if v == 0:
|             ^
|> 76:14:text_code.mf
|     if v == 0:
|              ^
|> 76:16:text_code.mf
|       break'a
| ^^^^^^
|> 77:7:text_code.mf
|       break'a
|       ^^^^^
|> 77:12:text_code.mf
|       break'a
|            ^^
|> 77:15:text_code.mf
|   return c
| ^^
|> 78:3:text_code.mf
|   return c
|   ^^^^^^
|> 78:10:text_code.mf
|   return c
|          ^
|> 78:12:text_code.mf
| 
| ^
|> 79:2:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^
|> 80:1:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^^^
|> 80:5:text_code.mf
| fun unary_operators(a: i64) -> i64:
|     ^^^^^^^^^^^^^^^
|> 80:20:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                    ^
|> 80:21:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                     ^
|> 80:22:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                      ^
|> 80:24:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                        ^^^
|> 80:27:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                           ^
|> 80:29:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                             ^^
|> 80:32:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                ^^^
|> 80:35:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                   ^
|> 80:37:text_code.mf
|   return -a + ~a + !a + ++a + --a
| ^^
|> 81:3:text_code.mf
|   return -a + ~a + !a + ++a + --a
|   ^^^^^^
|> 81:10:text_code.mf
|   return -a + ~a + !a + ++a + --a
|          ^
|> 81:11:text_code.mf
|   return -a + ~a + !a + ++a + --a
|           ^
|> 81:13:text_code.mf
|   return -a + ~a + !a + ++a + --a
|             ^
|> 81:15:text_code.mf
|   return -a + ~a + !a + ++a + --a
|               ^
|> 81:16:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                ^
|> 81:18:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                  ^
|> 81:20:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                    ^
|> 81:21:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                     ^
|> 81:23:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                       ^
|> 81:25:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                         ^^
|> 81:27:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                           ^
|> 81:29:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                             ^
|> 81:31:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                               ^^
|> 81:33:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                                 ^
|> 81:35:text_code.mf
| 
| ^
|> 82:2:text_code.mf
| struct Foo:
| ^
|> 83:1:text_code.mf
| struct Foo:
| ^^^^^^
|> 83:8:text_code.mf
| struct Foo:
|        ^^^
|> 83:11:text_code.mf
| struct Foo:
|           ^
|> 83:13:text_code.mf
|   a, b, c: int
| ^^
|> 84:3:text_code.mf
|   a, b, c: int
|   ^
|> 84:4:text_code.mf
|   a, b, c: int
|    ^
|> 84:6:text_code.mf
|   a, b, c: int
|      ^
|> 84:7:text_code.mf
|   a, b, c: int
|       ^
|> 84:9:text_code.mf
|   a, b, c: int
|         ^
|> 84:10:text_code.mf
|   a, b, c: int
|          ^
|> 84:12:text_code.mf
|   a, b, c: int
|            ^^^
|> 84:16:text_code.mf
| 
| ^
|> 85:2:text_code.mf
| struct Goo:
| ^
|> 86:1:text_code.mf
| struct Goo:
| ^^^^^^
|> 86:8:text_code.mf
| struct Goo:
|        ^^^
|> 86:11:text_code.mf
| struct Goo:
|           ^
|> 86:13:text_code.mf
|   embed foo: Foo
| ^^
|> 87:3:text_code.mf
|   embed foo: Foo
|   ^^^^^
|> 87:9:text_code.mf
|   embed foo: Foo
|         ^^^
|> 87:12:text_code.mf
|   embed foo: Foo
|            ^
|> 87:14:text_code.mf
|   embed foo: Foo
|              ^^^
|> 87:18:text_code.mf
|   gva: int
| ^^
|> 88:3:text_code.mf
|   gva: int
|   ^^^
|> 88:6:text_code.mf
|   gva: int
|      ^
|> 88:8:text_code.mf
|   gva: int
|        ^^^
|> 88:12:text_code.mf
| 
| ^
|> 89:2:text_code.mf
| fun strings -> i64:
| ^
|> 90:1:text_code.mf
| fun strings -> i64:
| ^^^
|> 90:5:text_code.mf
| fun strings -> i64:
|     ^^^^^^^
|> 90:13:text_code.mf
| fun strings -> i64:
|             ^^
|> 90:16:text_code.mf
| fun strings -> i64:
|                ^^^
|> 90:19:text_code.mf
| fun strings -> i64:
|                   ^
|> 90:21:text_code.mf
|   var hello = "hello"
| ^^
|> 91:3:text_code.mf
|   var hello = "hello"
|   ^^^
|> 91:7:text_code.mf
|   var hello = "hello"
|       ^^^^^
|> 91:13:text_code.mf
|   var hello = "hello"
|             ^
|> 91:15:text_code.mf
|   var hello = "hello"
|               ^^^^^^^
|> 91:23:text_code.mf
|   return 0
| ^^
|> 92:3:text_code.mf
|   return 0
|   ^^^^^^
|> 92:10:text_code.mf
|   return 0
|          ^
|> 92:12:text_code.mf
| 
| ^
|> 93:2:text_code.mf
| fun mutable_ref(a: &Foo):
| ^
|> 94:1:text_code.mf
| fun mutable_ref(a: &Foo):
| ^^^
|> 94:5:text_code.mf
| fun mutable_ref(a: &Foo):
|     ^^^^^^^^^^^
|> 94:16:text_code.mf
| fun mutable_ref(a: &Foo):
|                ^
|> 94:17:text_code.mf
| fun mutable_ref(a: &Foo):
|                 ^
|> 94:18:text_code.mf
| fun mutable_ref(a: &Foo):
|                  ^
|> 94:20:text_code.mf
| fun mutable_ref(a: &Foo):
|                    ^
|> 94:21:text_code.mf
| fun mutable_ref(a: &Foo):
|                     ^^^
|> 94:24:text_code.mf
| fun mutable_ref(a: &Foo):
|                        ^
|> 94:25:text_code.mf
| fun mutable_ref(a: &Foo):
|                         ^
|> 94:27:text_code.mf
|   a.a = 10
| ^^
|> 95:3:text_code.mf
|   a.a = 10
|   ^
|> 95:4:text_code.mf
|   a.a = 10
|    ^
|> 95:5:text_code.mf
|   a.a = 10
|     ^
|> 95:7:text_code.mf
|   a.a = 10
|       ^
|> 95:9:text_code.mf
|   a.a = 10
|         ^^
|> 95:12:text_code.mf
|   a.b = 20
| ^^
|> 96:3:text_code.mf
|   a.b = 20
|   ^
|> 96:4:text_code.mf
|   a.b = 20
|    ^
|> 96:5:text_code.mf
|   a.b = 20
|     ^
|> 96:7:text_code.mf
|   a.b = 20
|       ^
|> 96:9:text_code.mf
|   a.b = 20
|         ^^
|> 96:12:text_code.mf
|   a.c = 30
| ^^
|> 97:3:text_code.mf
|   a.c = 30
|   ^
|> 97:4:text_code.mf
|   a.c = 30
|    ^
|> 97:5:text_code.mf
|   a.c = 30
|     ^
|> 97:7:text_code.mf
|   a.c = 30
|       ^
|> 97:9:text_code.mf
|   a.c = 30
|         ^^
|> 97:12:text_code.mf
| 
| ^
|> 98:2:text_code.mf
| fun some_string -> &u8:
| ^
|> 99:1:text_code.mf
| fun some_string -> &u8:
| ^^^
|> 99:5:text_code.mf
| fun some_string -> &u8:
|     ^^^^^^^^^^^
|> 99:17:text_code.mf
| fun some_string -> &u8:
|                 ^^
|> 99:20:text_code.mf
| fun some_string -> &u8:
|                    ^
|> 99:21:text_code.mf
| fun some_string -> &u8:
|                     ^^
|> 99:23:text_code.mf
| fun some_string -> &u8:
|                       ^
|> 99:25:text_code.mf
|   "
| ^^
|> 100:3:text_code.mf
|   "
| hello there
|   "
| ^^^^^^^^^^^
Group "\n":
 VarStatement(None, true) "var something = [1, 2, 3]":
  VarAssign "something = [1, 2, 3]":
   Group "something":
    Ident "something"
   None ""
   Group "=":
    Array "[":
     Lit "1"
     Lit "2"
     Lit "3"
 VarStatement(None, false) "let hello = \"hello\"":
  VarAssign "hello = \"hello\"":
   Group "hello":
    Ident "hello"
   None ""
   Group "=":
    Lit "\"hello\""
 Fun(None) "fun something -> fun(int, int) -> int:\r\n  return fun(a, b: int) -> int: a + b":
  FunHeader "fun something -> fun(int, int) -> int:\r\n  return fun(a, b: int) -> int: a + b":
   Ident "something"
   Fun(None) "fun(int, int) -> int:\r\n  return fun(a, b: int) -> int: a + b":
    FunHeader "fun(int, int) -> int":
     None ""
     Ident "int"
     Ident "int"
     Ident "int"
    Group ":":
     ReturnStatement "return fun(a, b: int) -> int: a + b":
      Fun(None) "fun(a, b: int) -> int: a + b":
       FunHeader "fun(a, b: int) -> int":
        None ""
        FunArgument(false) "a, b: int":
         Ident "a"
         Ident "b"
         Ident "int"
        Ident "int"
       Group ":":
        BinaryOp "a + b":
         Ident "+"
         Ident "a"
         Ident "b"
  None ""
 StructDeclaration(None) "struct":
  Ident "Scope"
  None ""
 Impl(None) "impl":
  None ""
  Ident "Scope"
  Group ":":
   Fun(None) "fun new -> Self:\r\n    return":
    FunHeader "fun new -> Self":
     Ident "new"
     Ident "Self"
    Group ":":
     ReturnStatement "return":
      None ""
   Fun(None) "fun do_nothing(s: Self):\r\n    pass":
    FunHeader "fun do_nothing(s: Self)":
     Ident "do_nothing"
     FunArgument(false) "s: Self":
      Ident "s"
      Ident "Self"
     None ""
    Group ":":
     Pass "pass"
 StructDeclaration(None) "struct":
  Instantiation "Template[T]":
   Ident "Template"
   Ident "T"
  None ""
 Impl(None) "impl":
  Group "[":
   Ident "T"
  Instantiation "Template[T]":
   Ident "Template"
   Ident "T"
  Group ":":
   Fun(None) "fun new -> Self:\r\n    return":
    FunHeader "fun new -> Self":
     Ident "new"
     Ident "Self"
    Group ":":
     ReturnStatement "return":
      None ""
   Fun(None) "fun do_nothing(s: Self, value: T) -> T:\r\n    value":
    FunHeader "fun do_nothing(s: Self, value: T) -> T":
     Ident "do_nothing"
     FunArgument(false) "s: Self":
      Ident "s"
      Ident "Self"
     FunArgument(false) "value: T":
      Ident "value"
      Ident "T"
     Ident "T"
    Group ":":
     Ident "value"
 Fun(None) "fun use_chain:\r\n  module::Type::method::[param]()":
  FunHeader "fun use_chain":
   Ident "use_chain"
   None ""
  Group ":":
   Call(false) "module::Type::method::[param]()":
    Instantiation "module::Type::method::[param]":
     Path "module::Type::method":
      Ident "module"
      Ident "Type"
      Ident "method"
     Ident "param"
 Fun(None) "fun flo: pass":
  FunHeader "fun flo":
   Ident "flo"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun foo(): pass":
  FunHeader "fun foo()":
   Ident "foo"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun goo(a: i8, b: i8): pass":
  FunHeader "fun goo(a: i8, b: i8)":
   Ident "goo"
   FunArgument(false) "a: i8":
    Ident "a"
    Ident "i8"
   FunArgument(false) "b: i8":
    Ident "b"
    Ident "i8"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun loo:\r\n  noo::loo::[i8]()\r\n\r\n  let array = [1, 2, 3]\r\n  array[0] = 3\r\n  array[2] = always[1]\r\n  array[1] = 1\r\n\r\n  pass":
  FunHeader "fun loo":
   Ident "loo"
   None ""
  Group ":":
   Call(false) "noo::loo::[i8]()":
    Instantiation "noo::loo::[i8]":
     Path "noo::loo":
      Ident "noo"
      Ident "loo"
     Ident "i8"
   VarStatement(None, false) "let array = [1, 2, 3]":
    VarAssign "array = [1, 2, 3]":
     Group "array":
      Ident "array"
     None ""
     Group "=":
      Array "[":
       Lit "1"
       Lit "2"
       Lit "3"
   BinaryOp "array[0] = 3":
    Ident "="
    Index "array[0]":
     Ident "array"
     Lit "0"
    Lit "3"
   BinaryOp "array[2] = always[1]":
    Ident "="
    Index "array[2]":
     Ident "array"
     Lit "2"
    Index "always[1]":
     Ident "always"
     Lit "1"
   BinaryOp "array[1] = 1":
    Ident "="
    Index "array[1]":
     Ident "array"
     Lit "1"
    Lit "1"
   Pass "pass"
 Fun(None) "fun main -> i64:\r\n  return 10 + 4 - 2 * 1 + 8":
  FunHeader "fun main -> i64":
   Ident "main"
   Ident "i64"
  Group ":":
   ReturnStatement "return 10 + 4 - 2 * 1 + 8":
    BinaryOp "10 + 4 - 2 * 1 + 8":
     Ident "-"
     BinaryOp "10 + 4":
      Ident "+"
      Lit "10"
      Lit "4"
     BinaryOp "2 * 1 + 8":
      Ident "+"
      BinaryOp "2 * 1":
       Ident "*"
       Lit "2"
       Lit "1"
      Lit "8"
 Fun(None) "fun operator_stress_test -> i64:\r\n  return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
  FunHeader "fun operator_stress_test -> i64":
   Ident "operator_stress_test"
   Ident "i64"
  Group ":":
   ReturnStatement "return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
    BinaryOp "10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
     Ident "+"
     Lit "10"
     BinaryOp "2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
      Ident "|"
      BinaryOp "2 * 1 - 9":
       Ident "-"
       BinaryOp "2 * 1":
        Ident "*"
        Lit "2"
        Lit "1"
       Lit "9"
      BinaryOp "4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
       Ident "^"
       BinaryOp "4 & 1":
        Ident "&"
        Lit "4"
        Lit "1"
       BinaryOp "2 >> 1 << 7 min 20 max 10":
        Ident "max"
        BinaryOp "2 >> 1 << 7 min 20":
         Ident "min"
         BinaryOp "2 >> 1 << 7":
          Ident "<<"
          BinaryOp "2 >> 1":
           Ident ">>"
           Lit "2"
           Lit "1"
          Lit "7"
         Lit "20"
        Lit "10"
 Fun(None) "fun conditional -> i64:\r\n  if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
  FunHeader "fun conditional -> i64":
   Ident "conditional"
   Ident "i64"
  Group ":":
   IfExpr "if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
    Lit "false"
    Group ":":
     ReturnStatement "return 10":
      Lit "10"
    Group "elif":
     IfExpr "elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
      Lit "true"
      Group ":":
       ReturnStatement "return if true: 10 else: 20":
        IfExpr "if true: 10 else: 20":
         Lit "true"
         Group ":":
          Lit "10"
         Group ":":
          Lit "20"
      Group ":":
       ReturnStatement "return 0":
        Lit "0"
 Attribute "attr inline = always, call_conv = cold":
  AttributeAssign "inline = always":
   Ident "inline"
   Ident "always"
  AttributeAssign "call_conv = cold":
   Ident "call_conv"
   Ident "cold"
 Fun(None) "fun inline_fn -> u32:\r\n  return 10":
  FunHeader "fun inline_fn -> u32":
   Ident "inline_fn"
   Ident "u32"
  Group ":":
   ReturnStatement "return 10":
    Lit "10"
 Fun(None) "fun fib(v: i64) -> i64:\r\n  return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
  FunHeader "fun fib(v: i64) -> i64":
   Ident "fib"
   FunArgument(false) "v: i64":
    Ident "v"
    Ident "i64"
   Ident "i64"
  Group ":":
   ReturnStatement "return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
    IfExpr "if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
     BinaryOp "v == 0 | v == 1":
      Ident "|"
      BinaryOp "v == 0":
       Ident "=="
       Ident "v"
       Lit "0"
      BinaryOp "v == 1":
       Ident "=="
       Ident "v"
       Lit "1"
     Group ":":
      Lit "1"
     Group ":":
      BinaryOp "fib(v - 1) + fib(v - 2)":
       Ident "+"
       Call(false) "fib(v - 1)":
        Ident "fib"
        BinaryOp "v - 1":
         Ident "-"
         Ident "v"
         Lit "1"
       Call(false) "fib(v - 2)":
        Ident "fib"
        BinaryOp "v - 2":
         Ident "-"
         Ident "v"
         Lit "2"
 Fun(None) "fun fib_loop(v: i64) -> i64:\r\n  var a, b, c = 1\r\n  loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r\n  return c":
  FunHeader "fun fib_loop(v: i64) -> i64":
   Ident "fib_loop"
   FunArgument(false) "v: i64":
    Ident "v"
    Ident "i64"
   Ident "i64"
  Group ":":
   VarStatement(None, true) "var a, b, c = 1":
    VarAssign "a, b, c = 1":
     Group "a":
      Ident "a"
      Ident "b"
      Ident "c"
     None ""
     Group "=":
      Lit "1"
      Ident "a"
      Ident "a"
   Loop "loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a":
    Ident "'a"
    Group ":":
     BinaryOp "c = a + b":
      Ident "="
      Ident "c"
      BinaryOp "a + b":
       Ident "+"
       Ident "a"
       Ident "b"
     BinaryOp "a = b":
      Ident "="
      Ident "a"
      Ident "b"
     BinaryOp "b = c":
      Ident "="
      Ident "b"
      Ident "c"
     BinaryOp "v = v - 1":
      Ident "="
      Ident "v"
      BinaryOp "v - 1":
       Ident "-"
       Ident "v"
       Lit "1"
     IfExpr "if v == 0:\r\n      break'a":
      BinaryOp "v == 0":
       Ident "=="
       Ident "v"
       Lit "0"
      Group ":":
       Break "break'a":
        Ident "'a"
        None ""
      None ""
   ReturnStatement "return c":
    Ident "c"
 Fun(None) "fun unary_operators(a: i64) -> i64:\r\n  return -a + ~a + !a + ++a + --a":
  FunHeader "fun unary_operators(a: i64) -> i64":
   Ident "unary_operators"
   FunArgument(false) "a: i64":
    Ident "a"
    Ident "i64"
   Ident "i64"
  Group ":":
   ReturnStatement "return -a + ~a + !a + ++a + --a":
    BinaryOp "-a + ~a + !a + ++a + --a":
     Ident "+"
     BinaryOp "-a + ~a + !a + ++a":
      Ident "+"
      BinaryOp "-a + ~a + !a":
       Ident "+"
       BinaryOp "-a + ~a":
        Ident "+"
        UnaryOp "-a":
         Ident "-"
         Ident "a"
        UnaryOp "~a":
         Ident "~"
         Ident "a"
       UnaryOp "!a":
        Ident "!"
        Ident "a"
      UnaryOp "++a":
       Ident "++"
       Ident "a"
     UnaryOp "--a":
      Ident "--"
      Ident "a"
 StructDeclaration(None) "struct":
  Ident "Foo"
  Group ":":
   StructField(None, false) "a, b, c: int":
    Ident "a"
    Ident "b"
    Ident "c"
    Ident "int"
 StructDeclaration(None) "struct":
  Ident "Goo"
  Group ":":
   StructField(None, true) "foo: Foo":
    Ident "foo"
    Ident "Foo"
   StructField(None, false) "gva: int":
    Ident "gva"
    Ident "int"
 Fun(None) "fun strings -> i64:\r\n  var hello = \"hello\"\r\n  return 0":
  FunHeader "fun strings -> i64":
   Ident "strings"
   Ident "i64"
  Group ":":
   VarStatement(None, true) "var hello = \"hello\"":
    VarAssign "hello = \"hello\"":
     Group "hello":
      Ident "hello"
     None ""
     Group "=":
      Lit "\"hello\""
   ReturnStatement "return 0":
    Lit "0"
 Fun(None) "fun mutable_ref(a: &Foo):\r\n  a.a = 10\r\n  a.b = 20\r\n  a.c = 30":
  FunHeader "fun mutable_ref(a: &Foo)":
   Ident "mutable_ref"
   FunArgument(false) "a: &Foo":
    Ident "a"
    Ref "&Foo":
     Ident "Foo"
   None ""
  Group ":":
   BinaryOp "a.a = 10":
    Ident "="
    DotExpr "a.a":
     Ident "a"
     Ident "a"
    Lit "10"
   BinaryOp "a.b = 20":
    Ident "="
    DotExpr "a.b":
     Ident "a"
     Ident "b"
    Lit "20"
   BinaryOp "a.c = 30":
    Ident "="
    DotExpr "a.c":
     Ident "a"
     Ident "c"
    Lit "30"
 Fun(None) "fun some_string -> &u8:\r\n  \"\r\nhello there\r\n  \"":
  FunHeader "fun some_string -> &u8":
   Ident "some_string"
   Ref "&u8":
    Ident "u8"
  Group ":":
   Lit "\"\r\nhello there\r\n  \""

fun print(s: &Self, value: &u8)

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): int = VarDecl(Value(2)) |i = 0
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst4[]
    Value(4): int = Cast(Value(1)) |value as int
    Value(5): int = Call(Fun(260), [Value(4), Value(3)]) |(value as int + i)
    Value(6): &u8 = Cast(Value(5)) |((value as int + i) as &u8)
    Value(7): u8 = Deref(Value(6), false) |*((value as int + i) as &u8)
    Value(8): u8 = VarDecl(Value(7)) |value = *((value as int + i) as &u8)
    Value(9): u8 = Lit(Uint(0, 8)) |0u8
    Value(10): bool = Call(Fun(306), [Value(8), Value(9)]) |value == 0u8
    JumpIfTrue(Value(10), Inst(15), []) |value == 0u8
    Jump(Inst(17), []) |

  Inst15[]
    Jump(Inst(5), []) |break

  Inst17[]
    Value(11): int = Lit(Int(1, 0)) |1
    Value(12): int = Call(Fun(260), [Value(3), Value(11)]) |i += 1
    Value(12): int = Assign(Value(3)) |i += 1
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst5[]
    Call(Fun(473), [Value(0), Value(3)]) |s.reserve(i)
    Value(14): &Seq[u8] = Offset(Value(0)) |s.len
    Value(15): Seq[u8] = Deref(Value(14), false) |s.len
    Value(13): int = Offset(Value(15)) |s.len
    Value(16): &u8 = Call(Fun(474), [Value(0), Value(13)]) |s.get_unchecked(s.len)
    Call(Fun(442), [Value(16), Value(1), Value(3)]) |memcpy(s.get_unchecked(s.len), value, i)
    Value(18): &Seq[u8] = Offset(Value(0)) |s.len
    Value(19): Seq[u8] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[u8] = Offset(Value(0)) |s.len
    Value(22): Seq[u8] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Call(Fun(260), [Value(20), Value(3)]) |s.len += i
    Value(23): int = Assign(Value(17)) |s.len += i
    Return(None) |s.len += i


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    sig2 = (i64, i64, i64) windows_fastcall
    fn0 = colocated u0:3 sig0
    fn1 = colocated u0:1 sig1
    fn2 = u0:19 sig2

block0(v0: i64, v1: i64):
    v17 = iconst.i64 0
    v3 -> v17
    v2 = iconst.i64 0
    jump block1(v2)

block1(v4: i64):
    v10 -> v4
    v12 -> v4
    v5 = iadd.i64 v1, v4
    v6 = load.i8 v5
    v7 = iconst.i8 0
    v8 = icmp eq v6, v7
    brnz v8, block2
    jump block3

block2:
    jump block4

block3:
    v9 = iconst.i64 1
    v11 = iadd.i64 v10, v9
    jump block1(v11)

block4:
    call fn0(v0, v12)
    v13 = load.i64 v0+8
    v14 = call fn1(v0, v13)
    call fn2(v14, v1, v12)
    v15 = load.i64 v0+8
    v16 = iadd v15, v12
    store v16, v0+8
    return
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.data
    Value(4): Seq[u8] = Deref(Value(3), false) |s.data
    Value(2): &u8 = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(475), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &u8 = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun reserve(s: &Self, new_cap: int)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(4): Seq[u8] = Deref(Value(3), false) |s.cap
    Value(2): int = Offset(Value(4)) |s.cap
    Value(5): bool = Call(Fun(350), [Value(2), Value(1)]) |s.cap > new_cap
    JumpIfTrue(Value(5), Inst(6), []) |s.cap > new_cap
    Jump(Inst(8), []) |

  Inst6[]
    Return(None) |return

  Inst8[]
    Value(7): &Seq[u8] = Offset(Value(0)) |s.data
    Value(8): Seq[u8] = Deref(Value(7), false) |s.data
    Value(6): &u8 = Offset(Value(8)) |s.data
    Value(10): &Seq[u8] = Offset(Value(0)) |s.data
    Value(11): Seq[u8] = Deref(Value(10), false) |s.data
    Value(9): &u8 = Offset(Value(11)) |s.data
    Value(12): int = Call(Fun(475), []) |sizeof::[T]()
    Value(13): int = Call(Fun(280), [Value(1), Value(12)]) |new_cap * sizeof::[T]()
    Value(14): &u8 = Call(Fun(438), [Value(9), Value(13)]) |realloc(s.data, new_cap * sizeof::[T]())
    Value(14): &u8 = Assign(Value(6)) |s.data = realloc(s.data, new_cap * sizeof::[T]())
    Value(16): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(17): Seq[u8] = Deref(Value(16), false) |s.cap
    Value(15): int = Offset(Value(17)) |s.cap
    Value(1): int = Assign(Value(15)) |s.cap = new_cap
    Return(None) |s.cap = new_cap


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:23 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0+16
    v3 = icmp sgt v2, v1
    brnz v3, block1
    jump block2

block1:
    return

block2:
    v4 = iconst.i64 1
    v5 = imul.i64 v1, v4
    v6 = load.i64 v0
    v7 = call fn0(v6, v5)
    store v7, v0
    store.i64 v1, v0+16
    return
}

fun print_int(s: &Self, value: int)

  Inst1[Value(0), Value(1)]
    Value(2): int = VarDecl(Value(1)) |value = value
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst3[]
    Value(3): int = Lit(Int(0, 0)) |0
    Value(4): bool = Call(Fun(310), [Value(2), Value(3)]) |value == 0
    JumpIfTrue(Value(4), Inst(9), []) |value == 0
    Jump(Inst(11), []) |

  Inst9[]
    Jump(Inst(4), []) |break

  Inst11[]
    Value(5): int = Lit(Int(10, 0)) |10
    Value(6): int = Call(Fun(300), [Value(2), Value(5)]) |value % 10
    Value(7): int = VarDecl(Value(6)) |digit = value % 10
    Value(8): int = Lit(Int(10, 0)) |10
    Value(9): int = Call(Fun(290), [Value(2), Value(8)]) |value / 10
    Value(9): int = Assign(Value(2)) |value = value / 10
    Value(10): u32 = Call(Fun(96), [Value(7)]) |digit.u32()
    Value(11): i32 = Lit(Char('0')) |'0'
    Value(12): u32 = Call(Fun(258), [Value(10), Value(11)]) |(
    Value(13): u8 = Call(Fun(63), [Value(12)]) |(digit.u32() + '0').u8()
    Call(Fun(476), [Value(0), Value(13)]) |s.push((digit.u32() + '0').u8())
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst4[]
    Return(None) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())


function u0:0(i64, i64) fast {
    sig0 = (i64, i8) fast
    fn0 = colocated u0:5 sig0

block0(v0: i64, v1: i64):
    v19 = iconst.i64 0
    v18 -> v19
    v16 = iconst.i64 0
    v2 -> v16
    jump block1(v1, v18)

block1(v4: i64, v17: i64):
    v7 -> v4
    v9 -> v17
    v3 = iconst.i64 0
    v5 = icmp eq v4, v3
    brnz v5, block2
    jump block3

block2:
    jump block4

block3:
    v6 = iconst.i64 10
    v8 = srem.i64 v7, v6
    v10 = iconst.i64 10
    v11 = sdiv.i64 v7, v10
    v12 = ireduce.i32 v8
    v13 = iconst.i32 48
    v14 = iadd v12, v13
    v15 = ireduce.i8 v14
    call fn0(v0, v15)
    jump block1(v11, v8)

block4:
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.len
    Value(4): Seq[u8] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(10): Seq[u8] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(14): Seq[u8] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[u8] = Offset(Value(0)) |s.len
    Value(17): Seq[u8] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[u8] = Offset(Value(0)) |s.data
    Value(22): Seq[u8] = Deref(Value(21), false) |s.data
    Value(20): &u8 = Offset(Value(22)) |s.data
    Value(24): &Seq[u8] = Offset(Value(0)) |s.data
    Value(25): Seq[u8] = Deref(Value(24), false) |s.data
    Value(23): &u8 = Offset(Value(25)) |s.data
    Value(27): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(28): Seq[u8] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(475), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &u8 = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &u8 = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[u8] = Offset(Value(0)) |s.len
    Value(35): Seq[u8] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &u8 = Call(Fun(474), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): u8 = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): u8 = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[u8] = Offset(Value(0)) |s.len
    Value(40): Seq[u8] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i8) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:1 sig1

block0(v0: i64, v1: i8):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 1
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    store.i8 v1, v16
    store.i64 v4, v0+8
    return
}

fun pop_frame

  Inst1[]
    Value(0): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(2): &Seq[StackFrame] = Ref(Value(0)) |stacktrace.pop()
    Value(1): Option[StackFrame] = Call(Fun(477), [Value(2), Value(1)]) |stacktrace.pop()
    Return(None) |stacktrace.pop()


function u0:0() fast {
    ss0 = explicit_slot 32
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:7 sig0

block0:
    v0 = global_value.i64 gv0
    v1 = stack_addr.i64 ss0
    v2 = call fn0(v0, v1)
    return
}

fun pop(s: &Self) -> Option[T]

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(2), Value(5)]) |s.len == 0
    JumpIfTrue(Value(6), Inst(7), []) |s.len == 0
    Jump(Inst(9), []) |

  Inst7[]
    Value(7): Option[StackFrame] = Zeroed |return
    Value(8): Option[StackFrame] = Deref(Value(1), false) |return
    Value(7): Option[StackFrame] = Assign(Value(8)) |return
    Return(Some(Value(1))) |return

  Inst9[]
    Value(10): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(11): Seq[StackFrame] = Deref(Value(10), false) |s.len
    Value(9): int = Offset(Value(11)) |s.len
    Value(12): int = Lit(Int(1, 0)) |1
    Value(13): int = Call(Fun(270), [Value(9), Value(12)]) |s.len - 1
    Value(14): &StackFrame = Call(Fun(478), [Value(0), Value(13)]) |s.get_unchecked(s.len - 1)
    Value(15): StackFrame = Deref(Value(14), false) |*s.get_unchecked(s.len - 1)
    Value(16): StackFrame = VarDecl(Value(15)) |value = *s.get_unchecked(s.len - 1)
    Value(18): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(19): Seq[StackFrame] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Lit(Int(1, 0)) |1
    Value(24): int = Call(Fun(270), [Value(20), Value(23)]) |s.len -= 1
    Value(24): int = Assign(Value(17)) |s.len -= 1
    Value(25): Option[StackFrame] = Call(Fun(479), [Value(16), Value(25)]) |Option::some(value)
    Value(26): Option[StackFrame] = Deref(Value(1), false) |Option::some(value)
    Value(25): Option[StackFrame] = Assign(Value(26)) |Option::some(value)
    Return(Some(Value(1))) |Option::some(value)


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 32
    sig0 = (i64, i64) -> i64 fast
    sig1 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:9 sig0
    fn1 = colocated u0:8 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = load.i64 v0+8
    v4 = icmp eq v3, v2
    brnz v4, block1
    jump block2

block1:
    v5 = iconst.i64 0
    store v5, v1
    store v5, v1+8
    store v5, v1+16
    store v5, v1+24
    return v1

block2:
    v6 = iconst.i64 1
    v7 = load.i64 v0+8
    v8 = isub v7, v6
    v9 = call fn0(v0, v8)
    v10 = stack_addr.i64 ss0
    v11 = load.i64 v9
    store v11, v10
    v12 = load.i64 v9+8
    store v12, v10+8
    v13 = load.i64 v9+16
    store v13, v10+16
    v14 = iconst.i64 1
    v15 = load.i64 v0+8
    v16 = isub v15, v14
    store v16, v0+8
    v17 = stack_addr.i64 ss0
    v18 = stack_addr.i64 ss1
    v19 = call fn1(v17, v18)
    v20 = stack_addr.i64 ss1
    v21 = load.i64 v20
    store v21, v1
    v22 = load.i64 v20+8
    store v22, v1+8
    v23 = load.i64 v20+16
    store v23, v1+16
    v24 = load.i64 v20+24
    store v24, v1+24
    return v1
}

fun some(value: T) -> Self

  Inst1[Value(0), Value(1)]
    Value(2): Option[StackFrame] = Zeroed |option: Self
    Value(3): Option[StackFrame] = VarDecl(Value(2)) |option: Self
    Value(4): StackFrame = Offset(Value(3)) |option.value
    Value(0): StackFrame = Assign(Value(4)) |option.value = value
    Value(5): bool = Offset(Value(3)) |option.is_some
    Value(6): bool = Lit(Bool(true)) |true
    Value(6): bool = Assign(Value(5)) |option.is_some = true
    Value(7): Option[StackFrame] = Deref(Value(1), false) |option
    Value(3): Option[StackFrame] = Assign(Value(7)) |option
    Return(Some(Value(1))) |option


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 32

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    stack_store v2, ss0
    stack_store v2, ss0+8
    stack_store v2, ss0+16
    stack_store v2, ss0+24
    v3 = stack_addr.i64 ss0
    v4 = load.i64 v0
    store v4, v3
    v5 = load.i64 v0+8
    store v5, v3+8
    v6 = load.i64 v0+16
    store v6, v3+16
    v7 = bconst.b1 true
    v8 = bint.i8 v7
    stack_store v8, ss0+24
    v9 = stack_addr.i64 ss0
    v10 = load.i64 v9
    store v10, v1
    v11 = load.i64 v9+8
    store v11, v1+8
    v12 = load.i64 v9+16
    store v12, v1+16
    v13 = load.i64 v9+24
    store v13, v1+24
    return v1
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.data
    Value(2): &StackFrame = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(480), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &StackFrame = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 24
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun push_frame(line, column: int, file: &u8)

  Inst1[Value(0), Value(1), Value(2)]
    Value(3): StackFrame = Zeroed |frame: StackFrame
    Value(4): StackFrame = VarDecl(Value(3)) |frame: StackFrame
    Value(5): int = Offset(Value(4)) |frame.line
    Value(0): int = Assign(Value(5)) |frame.line = line
    Value(6): int = Offset(Value(4)) |frame.column
    Value(1): int = Assign(Value(6)) |frame.column = column
    Value(7): &u8 = Offset(Value(4)) |frame.file
    Value(2): &u8 = Assign(Value(7)) |frame.file = file
    Value(8): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(9): &Seq[StackFrame] = Ref(Value(8)) |stacktrace.push(frame)
    Call(Fun(481), [Value(9), Value(4)]) |stacktrace.push(frame)
    Return(None) |stacktrace.push(frame)


function u0:0(i64, i64, i64) fast {
    ss0 = explicit_slot 24
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64) fast
    fn0 = colocated u0:12 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = iconst.i64 0
    stack_store v3, ss0
    stack_store v3, ss0+8
    stack_store v3, ss0+16
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    v4 = global_value.i64 gv0
    v5 = stack_addr.i64 ss0
    call fn0(v4, v5)
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(10): Seq[StackFrame] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(14): Seq[StackFrame] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(17): Seq[StackFrame] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.data
    Value(20): &StackFrame = Offset(Value(22)) |s.data
    Value(24): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(25): Seq[StackFrame] = Deref(Value(24), false) |s.data
    Value(23): &StackFrame = Offset(Value(25)) |s.data
    Value(27): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(28): Seq[StackFrame] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(480), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &StackFrame = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &StackFrame = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(35): Seq[StackFrame] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &StackFrame = Call(Fun(478), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): StackFrame = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): StackFrame = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(40): Seq[StackFrame] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 24
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    v17 = load.i64 v1
    store v17, v16
    v18 = load.i64 v1+8
    store v18, v16+8
    v19 = load.i64 v1+16
    store v19, v16+16
    store.i64 v4, v0+8
    return
}

fun panic(str: &u8)

  Inst1[Value(0)]
    Value(1): &u8 = Lit(String(Spam { source: Source(0), hash: ID(13432806085582464995), range: 127..135 })) |"panic: "
    Call(Fun(443), [Value(1)]) |print("panic: ")
    Call(Fun(443), [Value(0)]) |print(str)
    Value(2): &u8 = Lit(String(Spam { source: Source(0), hash: ID(655990), range: 137..139 })) |"\n"
    Call(Fun(443), [Value(2)]) |print("\n")
    Value(3): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(4): int = Offset(Value(3)) |stacktrace.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(4), Value(5)]) |stacktrace.len == 0
    JumpIfTrue(Value(6), Inst(11), []) |stacktrace.len == 0
    Jump(Inst(13), []) |

  Inst11[]
    Value(7): &u8 = Lit(String(Spam { source: Source(0), hash: ID(16979661566361224870), range: 214..289 })) |"no stacktrace available, use '-trace' when building to generate stactrace\n"
    Call(Fun(443), [Value(7)]) |print("no stacktrace available, use '-trace' when building to generate stactrace\n")
    Value(8): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(8)]) |exit(1)
    Return(None) |return

  Inst13[]
    Value(9): Seq[u8] = Zeroed |buffer: Seq[u8]
    Value(10): Seq[u8] = VarDecl(Value(9)) |buffer: Seq[u8]
    Value(11): int = Zeroed |i: int
    Value(12): int = VarDecl(Value(11)) |i: int
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst26[]
    Value(13): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(14): int = Offset(Value(13)) |stacktrace.len
    Value(15): bool = Call(Fun(330), [Value(12), Value(14)]) |i >= stacktrace.len
    JumpIfTrue(Value(15), Inst(33), []) |i >= stacktrace.len
    Jump(Inst(35), []) |

  Inst33[]
    Jump(Inst(27), []) |break

  Inst35[]
    Value(16): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(18): &Seq[StackFrame] = Ref(Value(16)) |stacktrace[i]
    Value(17): &StackFrame = Call(Fun(482), [Value(18), Value(12)]) |stacktrace[i]
    Value(19): StackFrame = Deref(Value(17), false) |stacktrace[i]
    Value(20): StackFrame = VarDecl(Value(19)) |frame = stacktrace[i]
    Value(21): int = Offset(Value(20)) |frame.line
    Value(22): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.line)
    Call(Fun(452), [Value(22), Value(21)]) |buffer.print_int(frame.line)
    Value(23): i32 = Lit(Char(':')) |':'
    Value(24): u8 = Call(Fun(59), [Value(23)]) |':'.u8()
    Value(25): &Seq[u8] = Ref(Value(10)) |buffer.push(':'.u8())
    Call(Fun(476), [Value(25), Value(24)]) |buffer.push(':'.u8())
    Value(26): int = Offset(Value(20)) |frame.column
    Value(27): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.column)
    Call(Fun(452), [Value(27), Value(26)]) |buffer.print_int(frame.column)
    Value(28): i32 = Lit(Char(' ')) |' '
    Value(29): u8 = Call(Fun(59), [Value(28)]) |' '.u8()
    Value(30): &Seq[u8] = Ref(Value(10)) |buffer.push(' '.u8())
    Call(Fun(476), [Value(30), Value(29)]) |buffer.push(' '.u8())
    Value(31): &u8 = Offset(Value(20)) |frame.file
    Value(32): &Seq[u8] = Ref(Value(10)) |buffer.print(frame.file)
    Call(Fun(453), [Value(32), Value(31)]) |buffer.print(frame.file)
    Value(33): i32 = Lit(Char('\n')) |'\n'
    Value(34): u8 = Call(Fun(59), [Value(33)]) |'\n'.u8()
    Value(35): &Seq[u8] = Ref(Value(10)) |buffer.push('\n'.u8())
    Call(Fun(476), [Value(35), Value(34)]) |buffer.push('\n'.u8())
    Value(36): int = Lit(Int(1, 0)) |1
    Value(37): int = Call(Fun(260), [Value(12), Value(36)]) |i += 1
    Value(37): int = Assign(Value(12)) |i += 1
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst27[]
    Value(38): i32 = Lit(Char('\u{0}')) |'\x00'
    Value(39): u8 = Call(Fun(59), [Value(38)]) |'\x00'.u8()
    Value(40): &Seq[u8] = Ref(Value(10)) |buffer.push('\x00'.u8())
    Call(Fun(476), [Value(40), Value(39)]) |buffer.push('\x00'.u8())
    Value(41): &u8 = Offset(Value(10)) |buffer.data
    Call(Fun(443), [Value(41)]) |print(buffer.data)
    Value(42): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(42)]) |exit(1)
    Return(None) |exit(1)


function u0:0(i64) fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 24
    gv0 = symbol colocated u1:1
    gv1 = symbol colocated u1:2
    gv2 = symbol colocated u1:0
    gv3 = symbol colocated u1:3
    gv4 = symbol colocated u1:0
    gv5 = symbol colocated u1:0
    sig0 = (i64) windows_fastcall
    sig1 = (i64) windows_fastcall
    sig2 = (i64) windows_fastcall
    sig3 = (i64) windows_fastcall
    sig4 = (i64) windows_fastcall
    sig5 = (i64, i64) -> i64 fast
    sig6 = (i64, i64) fast
    sig7 = (i64, i8) fast
    sig8 = (i64, i64) fast
    sig9 = (i64, i8) fast
    sig10 = (i64, i64) fast
    sig11 = (i64, i8) fast
    sig12 = (i64, i8) fast
    sig13 = (i64) windows_fastcall
    sig14 = (i64) windows_fastcall
    fn0 = u0:18 sig0
    fn1 = u0:18 sig1
    fn2 = u0:18 sig2
    fn3 = u0:18 sig3
    fn4 = u0:17 sig4
    fn5 = colocated u0:14 sig5
    fn6 = colocated u0:4 sig6
    fn7 = colocated u0:5 sig7
    fn8 = colocated u0:4 sig8
    fn9 = colocated u0:5 sig9
    fn10 = colocated u0:0 sig10
    fn11 = colocated u0:5 sig11
    fn12 = colocated u0:5 sig12
    fn13 = u0:18 sig13
    fn14 = u0:17 sig14

block0(v0: i64):
    v46 = iconst.i64 0
    v11 -> v46
    v45 -> v46
    v1 = global_value.i64 gv0
    call fn0(v1)
    call fn1(v0)
    v2 = global_value.i64 gv1
    call fn2(v2)
    v3 = global_value.i64 gv2
    v4 = iconst.i64 0
    v5 = load.i64 v3+8
    v6 = icmp eq v5, v4
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv3
    call fn3(v7)
    v8 = iconst.i64 1
    call fn4(v8)
    return

block2:
    v9 = iconst.i64 0
    stack_store v9, ss0
    stack_store v9, ss0+8
    stack_store v9, ss0+16
    v10 = iconst.i64 0
    jump block3(v10)

block3(v13: i64):
    v17 -> v13
    v12 = global_value.i64 gv4
    v14 = load.i64 v12+8
    v15 = icmp sge v13, v14
    brnz v15, block4
    jump block5

block4:
    jump block6

block5:
    v16 = global_value.i64 gv5
    v18 = call fn5(v16, v17)
    v19 = stack_addr.i64 ss1
    v20 = load.i64 v18
    store v20, v19
    v21 = load.i64 v18+8
    store v21, v19+8
    v22 = load.i64 v18+16
    store v22, v19+16
    v23 = stack_addr.i64 ss0
    v24 = stack_load.i64 ss1
    call fn6(v23, v24)
    v25 = iconst.i32 58
    v26 = ireduce.i8 v25
    v27 = stack_addr.i64 ss0
    call fn7(v27, v26)
    v28 = stack_addr.i64 ss0
    v29 = stack_load.i64 ss1+8
    call fn8(v28, v29)
    v30 = iconst.i32 32
    v31 = ireduce.i8 v30
    v32 = stack_addr.i64 ss0
    call fn9(v32, v31)
    v33 = stack_addr.i64 ss0
    v34 = stack_load.i64 ss1+16
    call fn10(v33, v34)
    v35 = iconst.i32 10
    v36 = ireduce.i8 v35
    v37 = stack_addr.i64 ss0
    call fn11(v37, v36)
    v38 = iconst.i64 1
    v39 = iadd.i64 v17, v38
    jump block3(v39)

block6:
    v40 = iconst.i32 0
    v41 = ireduce.i8 v40
    v42 = stack_addr.i64 ss0
    call fn12(v42, v41)
    v43 = stack_load.i64 ss0
    call fn13(v43)
    v44 = iconst.i64 1
    call fn14(v44)
    return
}

fun __index__(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Call(Fun(483), [Value(0), Value(1)]) |s.assert_in_bounds(index)
    Value(2): &StackFrame = Call(Fun(478), [Value(0), Value(1)]) |s.get_unchecked(index)
    Return(Some(Value(2))) |s.get_unchecked(index)


function u0:0(i64, i64) -> i64 fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    call fn0(v0, v1)
    v2 = call fn1(v0, v1)
    return v2
}

fun assert_in_bounds(s: &Self, index: int)

  Inst1[Value(0), Value(1)]
    Value(2): bool = Call(Fun(484), [Value(0), Value(1)]) |s.in_bounds(index)
    Value(3): bool = Call(Fun(251), [Value(2)]) |!s.in_bounds(index)
    JumpIfTrue(Value(3), Inst(4), []) |!s.in_bounds(index)
    Jump(Inst(6), []) |

  Inst4[]
    Value(4): &u8 = Lit(String(Spam { source: Source(0), hash: ID(6484216913505728610), range: 473..493 })) |"index out of bounds"
    Call(Fun(445), [Value(4)]) |panic("index out of bounds")
    Jump(Inst(6), []) |if !s.in_bounds(index):
      panic("index out of bounds")

  Inst6[]
    Return(None) |if !s.in_bounds(index):
      panic("index out of bounds")


function u0:0(i64, i64) fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64, i64) -> b1 fast
    sig1 = (i64) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:13 sig1

block0(v0: i64, v1: i64):
    v2 = call fn0(v0, v1)
    v3 = bint.i8 v2
    v4 = icmp_imm eq v3, 0
    brnz v4, block1
    jump block2

block1:
    v5 = global_value.i64 gv0
    call fn1(v5)
    jump block2

block2:
    return
}

fun in_bounds(s: &Self, index: int) -> bool

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): bool = Call(Fun(330), [Value(1), Value(2)]) |index >= 0
    Value(5): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(6): Seq[StackFrame] = Deref(Value(5), false) |s.len
    Value(4): int = Offset(Value(6)) |s.len
    Value(7): bool = Call(Fun(360), [Value(1), Value(4)]) |index < s.len
    Value(8): bool = Call(Fun(436), [Value(3), Value(7)]) |index >= 0 & index < s.len
    Return(Some(Value(8))) |index >= 0 & index < s.len


function u0:0(i64, i64) -> b1 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = icmp sge v1, v2
    v4 = load.i64 v0+8
    v5 = icmp slt v1, v4
    v6 = band v3, v5
    return v6
}

fun exit(code: int)


fun print(str: &u8)


fun memcpy(dest: &u8, src: &u8, size: int)


fun memmove(dest: &u8, src: &u8, size: int)


fun memset(ptr: &u8, value: u8, size: int)


fun free(ptr: &u8)


fun realloc(ptr: &u8, size: int) -> &u8


fun alloc(size: int) -> &u8


fun main -> int

  Inst1[]
    Value(0): int = Lit(Int(0, 0)) |0
    Return(Some(Value(0))) |return 0


function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 0
    return v0
}



  Inst1[Value(0), Value(1)]
    Value(2): int = Zeroed |
    Value(3): int = VarDecl(Value(2)) |
    Value(4): int = Call(Fun(485), []) |entry
    Value(4): int = Assign(Value(3)) |entry
    Return(Some(Value(3))) |


function u0:0(i64, i64) -> i64 fast {
    sig0 = () -> i64 fast
    fn0 = colocated u0:25 sig0

block0(v0: i64, v1: i64):
    v5 = iconst.i64 0
    v3 -> v5
    v2 = iconst.i64 0
    v4 = call fn0()
    return v4
}

output:
:end
fun print(s: &Self, value: &u8)

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): int = VarDecl(Value(2)) |i = 0
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst4[]
    Value(4): int = Cast(Value(1)) |value as int
    Value(5): int = Call(Fun(260), [Value(4), Value(3)]) |(value as int + i)
    Value(6): &u8 = Cast(Value(5)) |((value as int + i) as &u8)
    Value(7): u8 = Deref(Value(6), false) |*((value as int + i) as &u8)
    Value(8): u8 = VarDecl(Value(7)) |value = *((value as int + i) as &u8)
    Value(9): u8 = Lit(Uint(0, 8)) |0u8
    Value(10): bool = Call(Fun(306), [Value(8), Value(9)]) |value == 0u8
    JumpIfTrue(Value(10), Inst(15), []) |value == 0u8
    Jump(Inst(17), []) |

  Inst15[]
    Jump(Inst(5), []) |break

  Inst17[]
    Value(11): int = Lit(Int(1, 0)) |1
    Value(12): int = Call(Fun(260), [Value(3), Value(11)]) |i += 1
    Value(12): int = Assign(Value(3)) |i += 1
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst5[]
    Call(Fun(473), [Value(0), Value(3)]) |s.reserve(i)
    Value(14): &Seq[u8] = Offset(Value(0)) |s.len
    Value(15): Seq[u8] = Deref(Value(14), false) |s.len
    Value(13): int = Offset(Value(15)) |s.len
    Value(16): &u8 = Call(Fun(474), [Value(0), Value(13)]) |s.get_unchecked(s.len)
    Call(Fun(442), [Value(16), Value(1), Value(3)]) |memcpy(s.get_unchecked(s.len), value, i)
    Value(18): &Seq[u8] = Offset(Value(0)) |s.len
    Value(19): Seq[u8] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[u8] = Offset(Value(0)) |s.len
    Value(22): Seq[u8] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Call(Fun(260), [Value(20), Value(3)]) |s.len += i
    Value(23): int = Assign(Value(17)) |s.len += i
    Return(None) |s.len += i


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    sig2 = (i64, i64, i64) windows_fastcall
    fn0 = colocated u0:3 sig0
    fn1 = colocated u0:1 sig1
    fn2 = u0:19 sig2

block0(v0: i64, v1: i64):
    v17 = iconst.i64 0
    v3 -> v17
    v2 = iconst.i64 0
    jump block1(v2)

block1(v4: i64):
    v10 -> v4
    v12 -> v4
    v5 = iadd.i64 v1, v4
    v6 = load.i8 v5
    v7 = iconst.i8 0
    v8 = icmp eq v6, v7
    brnz v8, block2
    jump block3

block2:
    jump block4

block3:
    v9 = iconst.i64 1
    v11 = iadd.i64 v10, v9
    jump block1(v11)

block4:
    call fn0(v0, v12)
    v13 = load.i64 v0+8
    v14 = call fn1(v0, v13)
    call fn2(v14, v1, v12)
    v15 = load.i64 v0+8
    v16 = iadd v15, v12
    store v16, v0+8
    return
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.data
    Value(4): Seq[u8] = Deref(Value(3), false) |s.data
    Value(2): &u8 = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(475), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &u8 = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun reserve(s: &Self, new_cap: int)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(4): Seq[u8] = Deref(Value(3), false) |s.cap
    Value(2): int = Offset(Value(4)) |s.cap
    Value(5): bool = Call(Fun(350), [Value(2), Value(1)]) |s.cap > new_cap
    JumpIfTrue(Value(5), Inst(6), []) |s.cap > new_cap
    Jump(Inst(8), []) |

  Inst6[]
    Return(None) |return

  Inst8[]
    Value(7): &Seq[u8] = Offset(Value(0)) |s.data
    Value(8): Seq[u8] = Deref(Value(7), false) |s.data
    Value(6): &u8 = Offset(Value(8)) |s.data
    Value(10): &Seq[u8] = Offset(Value(0)) |s.data
    Value(11): Seq[u8] = Deref(Value(10), false) |s.data
    Value(9): &u8 = Offset(Value(11)) |s.data
    Value(12): int = Call(Fun(475), []) |sizeof::[T]()
    Value(13): int = Call(Fun(280), [Value(1), Value(12)]) |new_cap * sizeof::[T]()
    Value(14): &u8 = Call(Fun(438), [Value(9), Value(13)]) |realloc(s.data, new_cap * sizeof::[T]())
    Value(14): &u8 = Assign(Value(6)) |s.data = realloc(s.data, new_cap * sizeof::[T]())
    Value(16): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(17): Seq[u8] = Deref(Value(16), false) |s.cap
    Value(15): int = Offset(Value(17)) |s.cap
    Value(1): int = Assign(Value(15)) |s.cap = new_cap
    Return(None) |s.cap = new_cap


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:23 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0+16
    v3 = icmp sgt v2, v1
    brnz v3, block1
    jump block2

block1:
    return

block2:
    v4 = iconst.i64 1
    v5 = imul.i64 v1, v4
    v6 = load.i64 v0
    v7 = call fn0(v6, v5)
    store v7, v0
    store.i64 v1, v0+16
    return
}

fun print_int(s: &Self, value: int)

  Inst1[Value(0), Value(1)]
    Value(2): int = VarDecl(Value(1)) |value = value
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst3[]
    Value(3): int = Lit(Int(0, 0)) |0
    Value(4): bool = Call(Fun(310), [Value(2), Value(3)]) |value == 0
    JumpIfTrue(Value(4), Inst(9), []) |value == 0
    Jump(Inst(11), []) |

  Inst9[]
    Jump(Inst(4), []) |break

  Inst11[]
    Value(5): int = Lit(Int(10, 0)) |10
    Value(6): int = Call(Fun(300), [Value(2), Value(5)]) |value % 10
    Value(7): int = VarDecl(Value(6)) |digit = value % 10
    Value(8): int = Lit(Int(10, 0)) |10
    Value(9): int = Call(Fun(290), [Value(2), Value(8)]) |value / 10
    Value(9): int = Assign(Value(2)) |value = value / 10
    Value(10): u32 = Call(Fun(96), [Value(7)]) |digit.u32()
    Value(11): i32 = Lit(Char('0')) |'0'
    Value(12): u32 = Call(Fun(258), [Value(10), Value(11)]) |(
    Value(13): u8 = Call(Fun(63), [Value(12)]) |(digit.u32() + '0').u8()
    Call(Fun(476), [Value(0), Value(13)]) |s.push((digit.u32() + '0').u8())
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst4[]
    Return(None) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())


function u0:0(i64, i64) fast {
    sig0 = (i64, i8) fast
    fn0 = colocated u0:5 sig0

block0(v0: i64, v1: i64):
    v19 = iconst.i64 0
    v18 -> v19
    v16 = iconst.i64 0
    v2 -> v16
    jump block1(v1, v18)

block1(v4: i64, v17: i64):
    v7 -> v4
    v9 -> v17
    v3 = iconst.i64 0
    v5 = icmp eq v4, v3
    brnz v5, block2
    jump block3

block2:
    jump block4

block3:
    v6 = iconst.i64 10
    v8 = srem.i64 v7, v6
    v10 = iconst.i64 10
    v11 = sdiv.i64 v7, v10
    v12 = ireduce.i32 v8
    v13 = iconst.i32 48
    v14 = iadd v12, v13
    v15 = ireduce.i8 v14
    call fn0(v0, v15)
    jump block1(v11, v8)

block4:
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.len
    Value(4): Seq[u8] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(10): Seq[u8] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(14): Seq[u8] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[u8] = Offset(Value(0)) |s.len
    Value(17): Seq[u8] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[u8] = Offset(Value(0)) |s.data
    Value(22): Seq[u8] = Deref(Value(21), false) |s.data
    Value(20): &u8 = Offset(Value(22)) |s.data
    Value(24): &Seq[u8] = Offset(Value(0)) |s.data
    Value(25): Seq[u8] = Deref(Value(24), false) |s.data
    Value(23): &u8 = Offset(Value(25)) |s.data
    Value(27): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(28): Seq[u8] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(475), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &u8 = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &u8 = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[u8] = Offset(Value(0)) |s.len
    Value(35): Seq[u8] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &u8 = Call(Fun(474), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): u8 = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): u8 = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[u8] = Offset(Value(0)) |s.len
    Value(40): Seq[u8] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i8) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:1 sig1

block0(v0: i64, v1: i8):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 1
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    store.i8 v1, v16
    store.i64 v4, v0+8
    return
}

fun pop_frame

  Inst1[]
    Value(0): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(2): &Seq[StackFrame] = Ref(Value(0)) |stacktrace.pop()
    Value(1): Option[StackFrame] = Call(Fun(477), [Value(2), Value(1)]) |stacktrace.pop()
    Return(None) |stacktrace.pop()


function u0:0() fast {
    ss0 = explicit_slot 32
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:7 sig0

block0:
    v0 = global_value.i64 gv0
    v1 = stack_addr.i64 ss0
    v2 = call fn0(v0, v1)
    return
}

fun pop(s: &Self) -> Option[T]

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(2), Value(5)]) |s.len == 0
    JumpIfTrue(Value(6), Inst(7), []) |s.len == 0
    Jump(Inst(9), []) |

  Inst7[]
    Value(7): Option[StackFrame] = Zeroed |return
    Value(8): Option[StackFrame] = Deref(Value(1), false) |return
    Value(7): Option[StackFrame] = Assign(Value(8)) |return
    Return(Some(Value(1))) |return

  Inst9[]
    Value(10): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(11): Seq[StackFrame] = Deref(Value(10), false) |s.len
    Value(9): int = Offset(Value(11)) |s.len
    Value(12): int = Lit(Int(1, 0)) |1
    Value(13): int = Call(Fun(270), [Value(9), Value(12)]) |s.len - 1
    Value(14): &StackFrame = Call(Fun(478), [Value(0), Value(13)]) |s.get_unchecked(s.len - 1)
    Value(15): StackFrame = Deref(Value(14), false) |*s.get_unchecked(s.len - 1)
    Value(16): StackFrame = VarDecl(Value(15)) |value = *s.get_unchecked(s.len - 1)
    Value(18): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(19): Seq[StackFrame] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Lit(Int(1, 0)) |1
    Value(24): int = Call(Fun(270), [Value(20), Value(23)]) |s.len -= 1
    Value(24): int = Assign(Value(17)) |s.len -= 1
    Value(25): Option[StackFrame] = Call(Fun(479), [Value(16), Value(25)]) |Option::some(value)
    Value(26): Option[StackFrame] = Deref(Value(1), false) |Option::some(value)
    Value(25): Option[StackFrame] = Assign(Value(26)) |Option::some(value)
    Return(Some(Value(1))) |Option::some(value)


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 32
    sig0 = (i64, i64) -> i64 fast
    sig1 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:9 sig0
    fn1 = colocated u0:8 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = load.i64 v0+8
    v4 = icmp eq v3, v2
    brnz v4, block1
    jump block2

block1:
    v5 = iconst.i64 0
    store v5, v1
    store v5, v1+8
    store v5, v1+16
    store v5, v1+24
    return v1

block2:
    v6 = iconst.i64 1
    v7 = load.i64 v0+8
    v8 = isub v7, v6
    v9 = call fn0(v0, v8)
    v10 = stack_addr.i64 ss0
    v11 = load.i64 v9
    store v11, v10
    v12 = load.i64 v9+8
    store v12, v10+8
    v13 = load.i64 v9+16
    store v13, v10+16
    v14 = iconst.i64 1
    v15 = load.i64 v0+8
    v16 = isub v15, v14
    store v16, v0+8
    v17 = stack_addr.i64 ss0
    v18 = stack_addr.i64 ss1
    v19 = call fn1(v17, v18)
    v20 = stack_addr.i64 ss1
    v21 = load.i64 v20
    store v21, v1
    v22 = load.i64 v20+8
    store v22, v1+8
    v23 = load.i64 v20+16
    store v23, v1+16
    v24 = load.i64 v20+24
    store v24, v1+24
    return v1
}

fun some(value: T) -> Self

  Inst1[Value(0), Value(1)]
    Value(2): Option[StackFrame] = Zeroed |option: Self
    Value(3): Option[StackFrame] = VarDecl(Value(2)) |option: Self
    Value(4): StackFrame = Offset(Value(3)) |option.value
    Value(0): StackFrame = Assign(Value(4)) |option.value = value
    Value(5): bool = Offset(Value(3)) |option.is_some
    Value(6): bool = Lit(Bool(true)) |true
    Value(6): bool = Assign(Value(5)) |option.is_some = true
    Value(7): Option[StackFrame] = Deref(Value(1), false) |option
    Value(3): Option[StackFrame] = Assign(Value(7)) |option
    Return(Some(Value(1))) |option


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 32

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    stack_store v2, ss0
    stack_store v2, ss0+8
    stack_store v2, ss0+16
    stack_store v2, ss0+24
    v3 = stack_addr.i64 ss0
    v4 = load.i64 v0
    store v4, v3
    v5 = load.i64 v0+8
    store v5, v3+8
    v6 = load.i64 v0+16
    store v6, v3+16
    v7 = bconst.b1 true
    v8 = bint.i8 v7
    stack_store v8, ss0+24
    v9 = stack_addr.i64 ss0
    v10 = load.i64 v9
    store v10, v1
    v11 = load.i64 v9+8
    store v11, v1+8
    v12 = load.i64 v9+16
    store v12, v1+16
    v13 = load.i64 v9+24
    store v13, v1+24
    return v1
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.data
    Value(2): &StackFrame = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(480), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &StackFrame = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 24
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun push_frame(line, column: int, file: &u8)

  Inst1[Value(0), Value(1), Value(2)]
    Value(3): StackFrame = Zeroed |frame: StackFrame
    Value(4): StackFrame = VarDecl(Value(3)) |frame: StackFrame
    Value(5): int = Offset(Value(4)) |frame.line
    Value(0): int = Assign(Value(5)) |frame.line = line
    Value(6): int = Offset(Value(4)) |frame.column
    Value(1): int = Assign(Value(6)) |frame.column = column
    Value(7): &u8 = Offset(Value(4)) |frame.file
    Value(2): &u8 = Assign(Value(7)) |frame.file = file
    Value(8): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(9): &Seq[StackFrame] = Ref(Value(8)) |stacktrace.push(frame)
    Call(Fun(481), [Value(9), Value(4)]) |stacktrace.push(frame)
    Return(None) |stacktrace.push(frame)


function u0:0(i64, i64, i64) fast {
    ss0 = explicit_slot 24
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64) fast
    fn0 = colocated u0:12 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = iconst.i64 0
    stack_store v3, ss0
    stack_store v3, ss0+8
    stack_store v3, ss0+16
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    v4 = global_value.i64 gv0
    v5 = stack_addr.i64 ss0
    call fn0(v4, v5)
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(10): Seq[StackFrame] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(14): Seq[StackFrame] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(17): Seq[StackFrame] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.data
    Value(20): &StackFrame = Offset(Value(22)) |s.data
    Value(24): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(25): Seq[StackFrame] = Deref(Value(24), false) |s.data
    Value(23): &StackFrame = Offset(Value(25)) |s.data
    Value(27): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(28): Seq[StackFrame] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(480), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &StackFrame = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &StackFrame = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(35): Seq[StackFrame] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &StackFrame = Call(Fun(478), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): StackFrame = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): StackFrame = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(40): Seq[StackFrame] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 24
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    v17 = load.i64 v1
    store v17, v16
    v18 = load.i64 v1+8
    store v18, v16+8
    v19 = load.i64 v1+16
    store v19, v16+16
    store.i64 v4, v0+8
    return
}

fun panic(str: &u8)

  Inst1[Value(0)]
    Value(1): &u8 = Lit(String(Spam { source: Source(0), hash: ID(13432806085582464995), range: 127..135 })) |"panic: "
    Call(Fun(443), [Value(1)]) |print("panic: ")
    Call(Fun(443), [Value(0)]) |print(str)
    Value(2): &u8 = Lit(String(Spam { source: Source(0), hash: ID(655990), range: 137..139 })) |"\n"
    Call(Fun(443), [Value(2)]) |print("\n")
    Value(3): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(4): int = Offset(Value(3)) |stacktrace.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(4), Value(5)]) |stacktrace.len == 0
    JumpIfTrue(Value(6), Inst(11), []) |stacktrace.len == 0
    Jump(Inst(13), []) |

  Inst11[]
    Value(7): &u8 = Lit(String(Spam { source: Source(0), hash: ID(16979661566361224870), range: 214..289 })) |"no stacktrace available, use '-trace' when building to generate stactrace\n"
    Call(Fun(443), [Value(7)]) |print("no stacktrace available, use '-trace' when building to generate stactrace\n")
    Value(8): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(8)]) |exit(1)
    Return(None) |return

  Inst13[]
    Value(9): Seq[u8] = Zeroed |buffer: Seq[u8]
    Value(10): Seq[u8] = VarDecl(Value(9)) |buffer: Seq[u8]
    Value(11): int = Zeroed |i: int
    Value(12): int = VarDecl(Value(11)) |i: int
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst26[]
    Value(13): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(14): int = Offset(Value(13)) |stacktrace.len
    Value(15): bool = Call(Fun(330), [Value(12), Value(14)]) |i >= stacktrace.len
    JumpIfTrue(Value(15), Inst(33), []) |i >= stacktrace.len
    Jump(Inst(35), []) |

  Inst33[]
    Jump(Inst(27), []) |break

  Inst35[]
    Value(16): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(18): &Seq[StackFrame] = Ref(Value(16)) |stacktrace[i]
    Value(17): &StackFrame = Call(Fun(482), [Value(18), Value(12)]) |stacktrace[i]
    Value(19): StackFrame = Deref(Value(17), false) |stacktrace[i]
    Value(20): StackFrame = VarDecl(Value(19)) |frame = stacktrace[i]
    Value(21): int = Offset(Value(20)) |frame.line
    Value(22): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.line)
    Call(Fun(452), [Value(22), Value(21)]) |buffer.print_int(frame.line)
    Value(23): i32 = Lit(Char(':')) |':'
    Value(24): u8 = Call(Fun(59), [Value(23)]) |':'.u8()
    Value(25): &Seq[u8] = Ref(Value(10)) |buffer.push(':'.u8())
    Call(Fun(476), [Value(25), Value(24)]) |buffer.push(':'.u8())
    Value(26): int = Offset(Value(20)) |frame.column
    Value(27): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.column)
    Call(Fun(452), [Value(27), Value(26)]) |buffer.print_int(frame.column)
    Value(28): i32 = Lit(Char(' ')) |' '
    Value(29): u8 = Call(Fun(59), [Value(28)]) |' '.u8()
    Value(30): &Seq[u8] = Ref(Value(10)) |buffer.push(' '.u8())
    Call(Fun(476), [Value(30), Value(29)]) |buffer.push(' '.u8())
    Value(31): &u8 = Offset(Value(20)) |frame.file
    Value(32): &Seq[u8] = Ref(Value(10)) |buffer.print(frame.file)
    Call(Fun(453), [Value(32), Value(31)]) |buffer.print(frame.file)
    Value(33): i32 = Lit(Char('\n')) |'\n'
    Value(34): u8 = Call(Fun(59), [Value(33)]) |'\n'.u8()
    Value(35): &Seq[u8] = Ref(Value(10)) |buffer.push('\n'.u8())
    Call(Fun(476), [Value(35), Value(34)]) |buffer.push('\n'.u8())
    Value(36): int = Lit(Int(1, 0)) |1
    Value(37): int = Call(Fun(260), [Value(12), Value(36)]) |i += 1
    Value(37): int = Assign(Value(12)) |i += 1
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst27[]
    Value(38): i32 = Lit(Char('\u{0}')) |'\x00'
    Value(39): u8 = Call(Fun(59), [Value(38)]) |'\x00'.u8()
    Value(40): &Seq[u8] = Ref(Value(10)) |buffer.push('\x00'.u8())
    Call(Fun(476), [Value(40), Value(39)]) |buffer.push('\x00'.u8())
    Value(41): &u8 = Offset(Value(10)) |buffer.data
    Call(Fun(443), [Value(41)]) |print(buffer.data)
    Value(42): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(42)]) |exit(1)
    Return(None) |exit(1)


function u0:0(i64) fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 24
    gv0 = symbol colocated u1:1
    gv1 = symbol colocated u1:2
    gv2 = symbol colocated u1:0
    gv3 = symbol colocated u1:3
    gv4 = symbol colocated u1:0
    gv5 = symbol colocated u1:0
    sig0 = (i64) windows_fastcall
    sig1 = (i64) windows_fastcall
    sig2 = (i64) windows_fastcall
    sig3 = (i64) windows_fastcall
    sig4 = (i64) windows_fastcall
    sig5 = (i64, i64) -> i64 fast
    sig6 = (i64, i64) fast
    sig7 = (i64, i8) fast
    sig8 = (i64, i64) fast
    sig9 = (i64, i8) fast
    sig10 = (i64, i64) fast
    sig11 = (i64, i8) fast
    sig12 = (i64, i8) fast
    sig13 = (i64) windows_fastcall
    sig14 = (i64) windows_fastcall
    fn0 = u0:18 sig0
    fn1 = u0:18 sig1
    fn2 = u0:18 sig2
    fn3 = u0:18 sig3
    fn4 = u0:17 sig4
    fn5 = colocated u0:14 sig5
    fn6 = colocated u0:4 sig6
    fn7 = colocated u0:5 sig7
    fn8 = colocated u0:4 sig8
    fn9 = colocated u0:5 sig9
    fn10 = colocated u0:0 sig10
    fn11 = colocated u0:5 sig11
    fn12 = colocated u0:5 sig12
    fn13 = u0:18 sig13
    fn14 = u0:17 sig14

block0(v0: i64):
    v46 = iconst.i64 0
    v11 -> v46
    v45 -> v46
    v1 = global_value.i64 gv0
    call fn0(v1)
    call fn1(v0)
    v2 = global_value.i64 gv1
    call fn2(v2)
    v3 = global_value.i64 gv2
    v4 = iconst.i64 0
    v5 = load.i64 v3+8
    v6 = icmp eq v5, v4
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv3
    call fn3(v7)
    v8 = iconst.i64 1
    call fn4(v8)
    return

block2:
    v9 = iconst.i64 0
    stack_store v9, ss0
    stack_store v9, ss0+8
    stack_store v9, ss0+16
    v10 = iconst.i64 0
    jump block3(v10)

block3(v13: i64):
    v17 -> v13
    v12 = global_value.i64 gv4
    v14 = load.i64 v12+8
    v15 = icmp sge v13, v14
    brnz v15, block4
    jump block5

block4:
    jump block6

block5:
    v16 = global_value.i64 gv5
    v18 = call fn5(v16, v17)
    v19 = stack_addr.i64 ss1
    v20 = load.i64 v18
    store v20, v19
    v21 = load.i64 v18+8
    store v21, v19+8
    v22 = load.i64 v18+16
    store v22, v19+16
    v23 = stack_addr.i64 ss0
    v24 = stack_load.i64 ss1
    call fn6(v23, v24)
    v25 = iconst.i32 58
    v26 = ireduce.i8 v25
    v27 = stack_addr.i64 ss0
    call fn7(v27, v26)
    v28 = stack_addr.i64 ss0
    v29 = stack_load.i64 ss1+8
    call fn8(v28, v29)
    v30 = iconst.i32 32
    v31 = ireduce.i8 v30
    v32 = stack_addr.i64 ss0
    call fn9(v32, v31)
    v33 = stack_addr.i64 ss0
    v34 = stack_load.i64 ss1+16
    call fn10(v33, v34)
    v35 = iconst.i32 10
    v36 = ireduce.i8 v35
    v37 = stack_addr.i64 ss0
    call fn11(v37, v36)
    v38 = iconst.i64 1
    v39 = iadd.i64 v17, v38
    jump block3(v39)

block6:
    v40 = iconst.i32 0
    v41 = ireduce.i8 v40
    v42 = stack_addr.i64 ss0
    call fn12(v42, v41)
    v43 = stack_load.i64 ss0
    call fn13(v43)
    v44 = iconst.i64 1
    call fn14(v44)
    return
}

fun __index__(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Call(Fun(483), [Value(0), Value(1)]) |s.assert_in_bounds(index)
    Value(2): &StackFrame = Call(Fun(478), [Value(0), Value(1)]) |s.get_unchecked(index)
    Return(Some(Value(2))) |s.get_unchecked(index)


function u0:0(i64, i64) -> i64 fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    call fn0(v0, v1)
    v2 = call fn1(v0, v1)
    return v2
}

fun assert_in_bounds(s: &Self, index: int)

  Inst1[Value(0), Value(1)]
    Value(2): bool = Call(Fun(484), [Value(0), Value(1)]) |s.in_bounds(index)
    Value(3): bool = Call(Fun(251), [Value(2)]) |!s.in_bounds(index)
    JumpIfTrue(Value(3), Inst(4), []) |!s.in_bounds(index)
    Jump(Inst(6), []) |

  Inst4[]
    Value(4): &u8 = Lit(String(Spam { source: Source(0), hash: ID(6484216913505728610), range: 473..493 })) |"index out of bounds"
    Call(Fun(445), [Value(4)]) |panic("index out of bounds")
    Jump(Inst(6), []) |if !s.in_bounds(index):
      panic("index out of bounds")

  Inst6[]
    Return(None) |if !s.in_bounds(index):
      panic("index out of bounds")


function u0:0(i64, i64) fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64, i64) -> b1 fast
    sig1 = (i64) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:13 sig1

block0(v0: i64, v1: i64):
    v2 = call fn0(v0, v1)
    v3 = bint.i8 v2
    v4 = icmp_imm eq v3, 0
    brnz v4, block1
    jump block2

block1:
    v5 = global_value.i64 gv0
    call fn1(v5)
    jump block2

block2:
    return
}

fun in_bounds(s: &Self, index: int) -> bool

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): bool = Call(Fun(330), [Value(1), Value(2)]) |index >= 0
    Value(5): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(6): Seq[StackFrame] = Deref(Value(5), false) |s.len
    Value(4): int = Offset(Value(6)) |s.len
    Value(7): bool = Call(Fun(360), [Value(1), Value(4)]) |index < s.len
    Value(8): bool = Call(Fun(436), [Value(3), Value(7)]) |index >= 0 & index < s.len
    Return(Some(Value(8))) |index >= 0 & index < s.len


function u0:0(i64, i64) -> b1 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = icmp sge v1, v2
    v4 = load.i64 v0+8
    v5 = icmp slt v1, v4
    v6 = band v3, v5
    return v6
}

fun exit(code: int)


fun print(str: &u8)


fun memcpy(dest: &u8, src: &u8, size: int)


fun memmove(dest: &u8, src: &u8, size: int)


fun memset(ptr: &u8, value: u8, size: int)


fun free(ptr: &u8)


fun realloc(ptr: &u8, size: int) -> &u8


fun alloc(size: int) -> &u8


fun main -> int

  Inst1[]
    Value(0): int = Lit(Int(1, 0)) |1
    Value(1): int = Lit(Int(1, 0)) |1
    Value(2): int = Call(Fun(270), [Value(0), Value(1)]) |1 - 1
    Return(Some(Value(2))) |return 1 - 1


function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 1
    v1 = iconst.i64 1
    v2 = isub v0, v1
    return v2
}



  Inst1[Value(0), Value(1)]
    Value(2): int = Zeroed |
    Value(3): int = VarDecl(Value(2)) |
    Value(4): int = Call(Fun(485), []) |entry
    Value(4): int = Assign(Value(3)) |entry
    Return(Some(Value(3))) |


function u0:0(i64, i64) -> i64 fast {
    sig0 = () -> i64 fast
    fn0 = colocated u0:25 sig0

block0(v0: i64, v1: i64):
    v5 = iconst.i64 0
    v3 -> v5
    v2 = iconst.i64 0
    v4 = call fn0()
    return v4
}

output:
:end
fun print(s: &Self, value: &u8)

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): int = VarDecl(Value(2)) |i = 0
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst4[]
    Value(4): int = Cast(Value(1)) |value as int
    Value(5): int = Call(Fun(260), [Value(4), Value(3)]) |(value as int + i)
    Value(6): &u8 = Cast(Value(5)) |((value as int + i) as &u8)
    Value(7): u8 = Deref(Value(6), false) |*((value as int + i) as &u8)
    Value(8): u8 = VarDecl(Value(7)) |value = *((value as int + i) as &u8)
    Value(9): u8 = Lit(Uint(0, 8)) |0u8
    Value(10): bool = Call(Fun(306), [Value(8), Value(9)]) |value == 0u8
    JumpIfTrue(Value(10), Inst(15), []) |value == 0u8
    Jump(Inst(17), []) |

  Inst15[]
    Jump(Inst(5), []) |break

  Inst17[]
    Value(11): int = Lit(Int(1, 0)) |1
    Value(12): int = Call(Fun(260), [Value(3), Value(11)]) |i += 1
    Value(12): int = Assign(Value(3)) |i += 1
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst5[]
    Call(Fun(473), [Value(0), Value(3)]) |s.reserve(i)
    Value(14): &Seq[u8] = Offset(Value(0)) |s.len
    Value(15): Seq[u8] = Deref(Value(14), false) |s.len
    Value(13): int = Offset(Value(15)) |s.len
    Value(16): &u8 = Call(Fun(474), [Value(0), Value(13)]) |s.get_unchecked(s.len)
    Call(Fun(442), [Value(16), Value(1), Value(3)]) |memcpy(s.get_unchecked(s.len), value, i)
    Value(18): &Seq[u8] = Offset(Value(0)) |s.len
    Value(19): Seq[u8] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[u8] = Offset(Value(0)) |s.len
    Value(22): Seq[u8] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Call(Fun(260), [Value(20), Value(3)]) |s.len += i
    Value(23): int = Assign(Value(17)) |s.len += i
    Return(None) |s.len += i


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    sig2 = (i64, i64, i64) windows_fastcall
    fn0 = colocated u0:3 sig0
    fn1 = colocated u0:1 sig1
    fn2 = u0:19 sig2

block0(v0: i64, v1: i64):
    v17 = iconst.i64 0
    v3 -> v17
    v2 = iconst.i64 0
    jump block1(v2)

block1(v4: i64):
    v10 -> v4
    v12 -> v4
    v5 = iadd.i64 v1, v4
    v6 = load.i8 v5
    v7 = iconst.i8 0
    v8 = icmp eq v6, v7
    brnz v8, block2
    jump block3

block2:
    jump block4

block3:
    v9 = iconst.i64 1
    v11 = iadd.i64 v10, v9
    jump block1(v11)

block4:
    call fn0(v0, v12)
    v13 = load.i64 v0+8
    v14 = call fn1(v0, v13)
    call fn2(v14, v1, v12)
    v15 = load.i64 v0+8
    v16 = iadd v15, v12
    store v16, v0+8
    return
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.data
    Value(4): Seq[u8] = Deref(Value(3), false) |s.data
    Value(2): &u8 = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(475), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &u8 = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun reserve(s: &Self, new_cap: int)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(4): Seq[u8] = Deref(Value(3), false) |s.cap
    Value(2): int = Offset(Value(4)) |s.cap
    Value(5): bool = Call(Fun(350), [Value(2), Value(1)]) |s.cap > new_cap
    JumpIfTrue(Value(5), Inst(6), []) |s.cap > new_cap
    Jump(Inst(8), []) |

  Inst6[]
    Return(None) |return

  Inst8[]
    Value(7): &Seq[u8] = Offset(Value(0)) |s.data
    Value(8): Seq[u8] = Deref(Value(7), false) |s.data
    Value(6): &u8 = Offset(Value(8)) |s.data
    Value(10): &Seq[u8] = Offset(Value(0)) |s.data
    Value(11): Seq[u8] = Deref(Value(10), false) |s.data
    Value(9): &u8 = Offset(Value(11)) |s.data
    Value(12): int = Call(Fun(475), []) |sizeof::[T]()
    Value(13): int = Call(Fun(280), [Value(1), Value(12)]) |new_cap * sizeof::[T]()
    Value(14): &u8 = Call(Fun(438), [Value(9), Value(13)]) |realloc(s.data, new_cap * sizeof::[T]())
    Value(14): &u8 = Assign(Value(6)) |s.data = realloc(s.data, new_cap * sizeof::[T]())
    Value(16): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(17): Seq[u8] = Deref(Value(16), false) |s.cap
    Value(15): int = Offset(Value(17)) |s.cap
    Value(1): int = Assign(Value(15)) |s.cap = new_cap
    Return(None) |s.cap = new_cap


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:23 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0+16
    v3 = icmp sgt v2, v1
    brnz v3, block1
    jump block2

block1:
    return

block2:
    v4 = iconst.i64 1
    v5 = imul.i64 v1, v4
    v6 = load.i64 v0
    v7 = call fn0(v6, v5)
    store v7, v0
    store.i64 v1, v0+16
    return
}

fun print_int(s: &Self, value: int)

  Inst1[Value(0), Value(1)]
    Value(2): int = VarDecl(Value(1)) |value = value
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst3[]
    Value(3): int = Lit(Int(0, 0)) |0
    Value(4): bool = Call(Fun(310), [Value(2), Value(3)]) |value == 0
    JumpIfTrue(Value(4), Inst(9), []) |value == 0
    Jump(Inst(11), []) |

  Inst9[]
    Jump(Inst(4), []) |break

  Inst11[]
    Value(5): int = Lit(Int(10, 0)) |10
    Value(6): int = Call(Fun(300), [Value(2), Value(5)]) |value % 10
    Value(7): int = VarDecl(Value(6)) |digit = value % 10
    Value(8): int = Lit(Int(10, 0)) |10
    Value(9): int = Call(Fun(290), [Value(2), Value(8)]) |value / 10
    Value(9): int = Assign(Value(2)) |value = value / 10
    Value(10): u32 = Call(Fun(96), [Value(7)]) |digit.u32()
    Value(11): i32 = Lit(Char('0')) |'0'
    Value(12): u32 = Call(Fun(258), [Value(10), Value(11)]) |(
    Value(13): u8 = Call(Fun(63), [Value(12)]) |(digit.u32() + '0').u8()
    Call(Fun(476), [Value(0), Value(13)]) |s.push((digit.u32() + '0').u8())
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst4[]
    Return(None) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())


function u0:0(i64, i64) fast {
    sig0 = (i64, i8) fast
    fn0 = colocated u0:5 sig0

block0(v0: i64, v1: i64):
    v19 = iconst.i64 0
    v18 -> v19
    v16 = iconst.i64 0
    v2 -> v16
    jump block1(v1, v18)

block1(v4: i64, v17: i64):
    v7 -> v4
    v9 -> v17
    v3 = iconst.i64 0
    v5 = icmp eq v4, v3
    brnz v5, block2
    jump block3

block2:
    jump block4

block3:
    v6 = iconst.i64 10
    v8 = srem.i64 v7, v6
    v10 = iconst.i64 10
    v11 = sdiv.i64 v7, v10
    v12 = ireduce.i32 v8
    v13 = iconst.i32 48
    v14 = iadd v12, v13
    v15 = ireduce.i8 v14
    call fn0(v0, v15)
    jump block1(v11, v8)

block4:
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.len
    Value(4): Seq[u8] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(10): Seq[u8] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(14): Seq[u8] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[u8] = Offset(Value(0)) |s.len
    Value(17): Seq[u8] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[u8] = Offset(Value(0)) |s.data
    Value(22): Seq[u8] = Deref(Value(21), false) |s.data
    Value(20): &u8 = Offset(Value(22)) |s.data
    Value(24): &Seq[u8] = Offset(Value(0)) |s.data
    Value(25): Seq[u8] = Deref(Value(24), false) |s.data
    Value(23): &u8 = Offset(Value(25)) |s.data
    Value(27): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(28): Seq[u8] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(475), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &u8 = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &u8 = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[u8] = Offset(Value(0)) |s.len
    Value(35): Seq[u8] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &u8 = Call(Fun(474), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): u8 = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): u8 = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[u8] = Offset(Value(0)) |s.len
    Value(40): Seq[u8] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i8) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:1 sig1

block0(v0: i64, v1: i8):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 1
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    store.i8 v1, v16
    store.i64 v4, v0+8
    return
}

fun pop_frame

  Inst1[]
    Value(0): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(2): &Seq[StackFrame] = Ref(Value(0)) |stacktrace.pop()
    Value(1): Option[StackFrame] = Call(Fun(477), [Value(2), Value(1)]) |stacktrace.pop()
    Return(None) |stacktrace.pop()


function u0:0() fast {
    ss0 = explicit_slot 32
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:7 sig0

block0:
    v0 = global_value.i64 gv0
    v1 = stack_addr.i64 ss0
    v2 = call fn0(v0, v1)
    return
}

fun pop(s: &Self) -> Option[T]

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(2), Value(5)]) |s.len == 0
    JumpIfTrue(Value(6), Inst(7), []) |s.len == 0
    Jump(Inst(9), []) |

  Inst7[]
    Value(7): Option[StackFrame] = Zeroed |return
    Value(8): Option[StackFrame] = Deref(Value(1), false) |return
    Value(7): Option[StackFrame] = Assign(Value(8)) |return
    Return(Some(Value(1))) |return

  Inst9[]
    Value(10): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(11): Seq[StackFrame] = Deref(Value(10), false) |s.len
    Value(9): int = Offset(Value(11)) |s.len
    Value(12): int = Lit(Int(1, 0)) |1
    Value(13): int = Call(Fun(270), [Value(9), Value(12)]) |s.len - 1
    Value(14): &StackFrame = Call(Fun(478), [Value(0), Value(13)]) |s.get_unchecked(s.len - 1)
    Value(15): StackFrame = Deref(Value(14), false) |*s.get_unchecked(s.len - 1)
    Value(16): StackFrame = VarDecl(Value(15)) |value = *s.get_unchecked(s.len - 1)
    Value(18): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(19): Seq[StackFrame] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Lit(Int(1, 0)) |1
    Value(24): int = Call(Fun(270), [Value(20), Value(23)]) |s.len -= 1
    Value(24): int = Assign(Value(17)) |s.len -= 1
    Value(25): Option[StackFrame] = Call(Fun(479), [Value(16), Value(25)]) |Option::some(value)
    Value(26): Option[StackFrame] = Deref(Value(1), false) |Option::some(value)
    Value(25): Option[StackFrame] = Assign(Value(26)) |Option::some(value)
    Return(Some(Value(1))) |Option::some(value)


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 32
    sig0 = (i64, i64) -> i64 fast
    sig1 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:9 sig0
    fn1 = colocated u0:8 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = load.i64 v0+8
    v4 = icmp eq v3, v2
    brnz v4, block1
    jump block2

block1:
    v5 = iconst.i64 0
    store v5, v1
    store v5, v1+8
    store v5, v1+16
    store v5, v1+24
    return v1

block2:
    v6 = iconst.i64 1
    v7 = load.i64 v0+8
    v8 = isub v7, v6
    v9 = call fn0(v0, v8)
    v10 = stack_addr.i64 ss0
    v11 = load.i64 v9
    store v11, v10
    v12 = load.i64 v9+8
    store v12, v10+8
    v13 = load.i64 v9+16
    store v13, v10+16
    v14 = iconst.i64 1
    v15 = load.i64 v0+8
    v16 = isub v15, v14
    store v16, v0+8
    v17 = stack_addr.i64 ss0
    v18 = stack_addr.i64 ss1
    v19 = call fn1(v17, v18)
    v20 = stack_addr.i64 ss1
    v21 = load.i64 v20
    store v21, v1
    v22 = load.i64 v20+8
    store v22, v1+8
    v23 = load.i64 v20+16
    store v23, v1+16
    v24 = load.i64 v20+24
    store v24, v1+24
    return v1
}

fun some(value: T) -> Self

  Inst1[Value(0), Value(1)]
    Value(2): Option[StackFrame] = Zeroed |option: Self
    Value(3): Option[StackFrame] = VarDecl(Value(2)) |option: Self
    Value(4): StackFrame = Offset(Value(3)) |option.value
    Value(0): StackFrame = Assign(Value(4)) |option.value = value
    Value(5): bool = Offset(Value(3)) |option.is_some
    Value(6): bool = Lit(Bool(true)) |true
    Value(6): bool = Assign(Value(5)) |option.is_some = true
    Value(7): Option[StackFrame] = Deref(Value(1), false) |option
    Value(3): Option[StackFrame] = Assign(Value(7)) |option
    Return(Some(Value(1))) |option


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 32

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    stack_store v2, ss0
    stack_store v2, ss0+8
    stack_store v2, ss0+16
    stack_store v2, ss0+24
    v3 = stack_addr.i64 ss0
    v4 = load.i64 v0
    store v4, v3
    v5 = load.i64 v0+8
    store v5, v3+8
    v6 = load.i64 v0+16
    store v6, v3+16
    v7 = bconst.b1 true
    v8 = bint.i8 v7
    stack_store v8, ss0+24
    v9 = stack_addr.i64 ss0
    v10 = load.i64 v9
    store v10, v1
    v11 = load.i64 v9+8
    store v11, v1+8
    v12 = load.i64 v9+16
    store v12, v1+16
    v13 = load.i64 v9+24
    store v13, v1+24
    return v1
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.data
    Value(2): &StackFrame = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(480), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &StackFrame = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 24
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun push_frame(line, column: int, file: &u8)

  Inst1[Value(0), Value(1), Value(2)]
    Value(3): StackFrame = Zeroed |frame: StackFrame
    Value(4): StackFrame = VarDecl(Value(3)) |frame: StackFrame
    Value(5): int = Offset(Value(4)) |frame.line
    Value(0): int = Assign(Value(5)) |frame.line = line
    Value(6): int = Offset(Value(4)) |frame.column
    Value(1): int = Assign(Value(6)) |frame.column = column
    Value(7): &u8 = Offset(Value(4)) |frame.file
    Value(2): &u8 = Assign(Value(7)) |frame.file = file
    Value(8): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(9): &Seq[StackFrame] = Ref(Value(8)) |stacktrace.push(frame)
    Call(Fun(481), [Value(9), Value(4)]) |stacktrace.push(frame)
    Return(None) |stacktrace.push(frame)


function u0:0(i64, i64, i64) fast {
    ss0 = explicit_slot 24
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64) fast
    fn0 = colocated u0:12 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = iconst.i64 0
    stack_store v3, ss0
    stack_store v3, ss0+8
    stack_store v3, ss0+16
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    v4 = global_value.i64 gv0
    v5 = stack_addr.i64 ss0
    call fn0(v4, v5)
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(10): Seq[StackFrame] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(14): Seq[StackFrame] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(17): Seq[StackFrame] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.data
    Value(20): &StackFrame = Offset(Value(22)) |s.data
    Value(24): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(25): Seq[StackFrame] = Deref(Value(24), false) |s.data
    Value(23): &StackFrame = Offset(Value(25)) |s.data
    Value(27): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(28): Seq[StackFrame] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(480), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &StackFrame = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &StackFrame = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(35): Seq[StackFrame] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &StackFrame = Call(Fun(478), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): StackFrame = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): StackFrame = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(40): Seq[StackFrame] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 24
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    v17 = load.i64 v1
    store v17, v16
    v18 = load.i64 v1+8
    store v18, v16+8
    v19 = load.i64 v1+16
    store v19, v16+16
    store.i64 v4, v0+8
    return
}

fun panic(str: &u8)

  Inst1[Value(0)]
    Value(1): &u8 = Lit(String(Spam { source: Source(0), hash: ID(13432806085582464995), range: 127..135 })) |"panic: "
    Call(Fun(443), [Value(1)]) |print("panic: ")
    Call(Fun(443), [Value(0)]) |print(str)
    Value(2): &u8 = Lit(String(Spam { source: Source(0), hash: ID(655990), range: 137..139 })) |"\n"
    Call(Fun(443), [Value(2)]) |print("\n")
    Value(3): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(4): int = Offset(Value(3)) |stacktrace.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(4), Value(5)]) |stacktrace.len == 0
    JumpIfTrue(Value(6), Inst(11), []) |stacktrace.len == 0
    Jump(Inst(13), []) |

  Inst11[]
    Value(7): &u8 = Lit(String(Spam { source: Source(0), hash: ID(16979661566361224870), range: 214..289 })) |"no stacktrace available, use '-trace' when building to generate stactrace\n"
    Call(Fun(443), [Value(7)]) |print("no stacktrace available, use '-trace' when building to generate stactrace\n")
    Value(8): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(8)]) |exit(1)
    Return(None) |return

  Inst13[]
    Value(9): Seq[u8] = Zeroed |buffer: Seq[u8]
    Value(10): Seq[u8] = VarDecl(Value(9)) |buffer: Seq[u8]
    Value(11): int = Zeroed |i: int
    Value(12): int = VarDecl(Value(11)) |i: int
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst26[]
    Value(13): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(14): int = Offset(Value(13)) |stacktrace.len
    Value(15): bool = Call(Fun(330), [Value(12), Value(14)]) |i >= stacktrace.len
    JumpIfTrue(Value(15), Inst(33), []) |i >= stacktrace.len
    Jump(Inst(35), []) |

  Inst33[]
    Jump(Inst(27), []) |break

  Inst35[]
    Value(16): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(18): &Seq[StackFrame] = Ref(Value(16)) |stacktrace[i]
    Value(17): &StackFrame = Call(Fun(482), [Value(18), Value(12)]) |stacktrace[i]
    Value(19): StackFrame = Deref(Value(17), false) |stacktrace[i]
    Value(20): StackFrame = VarDecl(Value(19)) |frame = stacktrace[i]
    Value(21): int = Offset(Value(20)) |frame.line
    Value(22): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.line)
    Call(Fun(452), [Value(22), Value(21)]) |buffer.print_int(frame.line)
    Value(23): i32 = Lit(Char(':')) |':'
    Value(24): u8 = Call(Fun(59), [Value(23)]) |':'.u8()
    Value(25): &Seq[u8] = Ref(Value(10)) |buffer.push(':'.u8())
    Call(Fun(476), [Value(25), Value(24)]) |buffer.push(':'.u8())
    Value(26): int = Offset(Value(20)) |frame.column
    Value(27): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.column)
    Call(Fun(452), [Value(27), Value(26)]) |buffer.print_int(frame.column)
    Value(28): i32 = Lit(Char(' ')) |' '
    Value(29): u8 = Call(Fun(59), [Value(28)]) |' '.u8()
    Value(30): &Seq[u8] = Ref(Value(10)) |buffer.push(' '.u8())
    Call(Fun(476), [Value(30), Value(29)]) |buffer.push(' '.u8())
    Value(31): &u8 = Offset(Value(20)) |frame.file
    Value(32): &Seq[u8] = Ref(Value(10)) |buffer.print(frame.file)
    Call(Fun(453), [Value(32), Value(31)]) |buffer.print(frame.file)
    Value(33): i32 = Lit(Char('\n')) |'\n'
    Value(34): u8 = Call(Fun(59), [Value(33)]) |'\n'.u8()
    Value(35): &Seq[u8] = Ref(Value(10)) |buffer.push('\n'.u8())
    Call(Fun(476), [Value(35), Value(34)]) |buffer.push('\n'.u8())
    Value(36): int = Lit(Int(1, 0)) |1
    Value(37): int = Call(Fun(260), [Value(12), Value(36)]) |i += 1
    Value(37): int = Assign(Value(12)) |i += 1
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst27[]
    Value(38): i32 = Lit(Char('\u{0}')) |'\x00'
    Value(39): u8 = Call(Fun(59), [Value(38)]) |'\x00'.u8()
    Value(40): &Seq[u8] = Ref(Value(10)) |buffer.push('\x00'.u8())
    Call(Fun(476), [Value(40), Value(39)]) |buffer.push('\x00'.u8())
    Value(41): &u8 = Offset(Value(10)) |buffer.data
    Call(Fun(443), [Value(41)]) |print(buffer.data)
    Value(42): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(42)]) |exit(1)
    Return(None) |exit(1)


function u0:0(i64) fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 24
    gv0 = symbol colocated u1:1
    gv1 = symbol colocated u1:2
    gv2 = symbol colocated u1:0
    gv3 = symbol colocated u1:3
    gv4 = symbol colocated u1:0
    gv5 = symbol colocated u1:0
    sig0 = (i64) windows_fastcall
    sig1 = (i64) windows_fastcall
    sig2 = (i64) windows_fastcall
    sig3 = (i64) windows_fastcall
    sig4 = (i64) windows_fastcall
    sig5 = (i64, i64) -> i64 fast
    sig6 = (i64, i64) fast
    sig7 = (i64, i8) fast
    sig8 = (i64, i64) fast
    sig9 = (i64, i8) fast
    sig10 = (i64, i64) fast
    sig11 = (i64, i8) fast
    sig12 = (i64, i8) fast
    sig13 = (i64) windows_fastcall
    sig14 = (i64) windows_fastcall
    fn0 = u0:18 sig0
    fn1 = u0:18 sig1
    fn2 = u0:18 sig2
    fn3 = u0:18 sig3
    fn4 = u0:17 sig4
    fn5 = colocated u0:14 sig5
    fn6 = colocated u0:4 sig6
    fn7 = colocated u0:5 sig7
    fn8 = colocated u0:4 sig8
    fn9 = colocated u0:5 sig9
    fn10 = colocated u0:0 sig10
    fn11 = colocated u0:5 sig11
    fn12 = colocated u0:5 sig12
    fn13 = u0:18 sig13
    fn14 = u0:17 sig14

block0(v0: i64):
    v46 = iconst.i64 0
    v11 -> v46
    v45 -> v46
    v1 = global_value.i64 gv0
    call fn0(v1)
    call fn1(v0)
    v2 = global_value.i64 gv1
    call fn2(v2)
    v3 = global_value.i64 gv2
    v4 = iconst.i64 0
    v5 = load.i64 v3+8
    v6 = icmp eq v5, v4
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv3
    call fn3(v7)
    v8 = iconst.i64 1
    call fn4(v8)
    return

block2:
    v9 = iconst.i64 0
    stack_store v9, ss0
    stack_store v9, ss0+8
    stack_store v9, ss0+16
    v10 = iconst.i64 0
    jump block3(v10)

block3(v13: i64):
    v17 -> v13
    v12 = global_value.i64 gv4
    v14 = load.i64 v12+8
    v15 = icmp sge v13, v14
    brnz v15, block4
    jump block5

block4:
    jump block6

block5:
    v16 = global_value.i64 gv5
    v18 = call fn5(v16, v17)
    v19 = stack_addr.i64 ss1
    v20 = load.i64 v18
    store v20, v19
    v21 = load.i64 v18+8
    store v21, v19+8
    v22 = load.i64 v18+16
    store v22, v19+16
    v23 = stack_addr.i64 ss0
    v24 = stack_load.i64 ss1
    call fn6(v23, v24)
    v25 = iconst.i32 58
    v26 = ireduce.i8 v25
    v27 = stack_addr.i64 ss0
    call fn7(v27, v26)
    v28 = stack_addr.i64 ss0
    v29 = stack_load.i64 ss1+8
    call fn8(v28, v29)
    v30 = iconst.i32 32
    v31 = ireduce.i8 v30
    v32 = stack_addr.i64 ss0
    call fn9(v32, v31)
    v33 = stack_addr.i64 ss0
    v34 = stack_load.i64 ss1+16
    call fn10(v33, v34)
    v35 = iconst.i32 10
    v36 = ireduce.i8 v35
    v37 = stack_addr.i64 ss0
    call fn11(v37, v36)
    v38 = iconst.i64 1
    v39 = iadd.i64 v17, v38
    jump block3(v39)

block6:
    v40 = iconst.i32 0
    v41 = ireduce.i8 v40
    v42 = stack_addr.i64 ss0
    call fn12(v42, v41)
    v43 = stack_load.i64 ss0
    call fn13(v43)
    v44 = iconst.i64 1
    call fn14(v44)
    return
}

fun __index__(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Call(Fun(483), [Value(0), Value(1)]) |s.assert_in_bounds(index)
    Value(2): &StackFrame = Call(Fun(478), [Value(0), Value(1)]) |s.get_unchecked(index)
    Return(Some(Value(2))) |s.get_unchecked(index)


function u0:0(i64, i64) -> i64 fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    call fn0(v0, v1)
    v2 = call fn1(v0, v1)
    return v2
}

fun assert_in_bounds(s: &Self, index: int)

  Inst1[Value(0), Value(1)]
    Value(2): bool = Call(Fun(484), [Value(0), Value(1)]) |s.in_bounds(index)
    Value(3): bool = Call(Fun(251), [Value(2)]) |!s.in_bounds(index)
    JumpIfTrue(Value(3), Inst(4), []) |!s.in_bounds(index)
    Jump(Inst(6), []) |

  Inst4[]
    Value(4): &u8 = Lit(String(Spam { source: Source(0), hash: ID(6484216913505728610), range: 473..493 })) |"index out of bounds"
    Call(Fun(445), [Value(4)]) |panic("index out of bounds")
    Jump(Inst(6), []) |if !s.in_bounds(index):
      panic("index out of bounds")

  Inst6[]
    Return(None) |if !s.in_bounds(index):
      panic("index out of bounds")


function u0:0(i64, i64) fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64, i64) -> b1 fast
    sig1 = (i64) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:13 sig1

block0(v0: i64, v1: i64):
    v2 = call fn0(v0, v1)
    v3 = bint.i8 v2
    v4 = icmp_imm eq v3, 0
    brnz v4, block1
    jump block2

block1:
    v5 = global_value.i64 gv0
    call fn1(v5)
    jump block2

block2:
    return
}

fun in_bounds(s: &Self, index: int) -> bool

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): bool = Call(Fun(330), [Value(1), Value(2)]) |index >= 0
    Value(5): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(6): Seq[StackFrame] = Deref(Value(5), false) |s.len
    Value(4): int = Offset(Value(6)) |s.len
    Value(7): bool = Call(Fun(360), [Value(1), Value(4)]) |index < s.len
    Value(8): bool = Call(Fun(436), [Value(3), Value(7)]) |index >= 0 & index < s.len
    Return(Some(Value(8))) |index >= 0 & index < s.len


function u0:0(i64, i64) -> b1 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = icmp sge v1, v2
    v4 = load.i64 v0+8
    v5 = icmp slt v1, v4
    v6 = band v3, v5
    return v6
}

fun exit(code: int)


fun print(str: &u8)


fun memcpy(dest: &u8, src: &u8, size: int)


fun memmove(dest: &u8, src: &u8, size: int)


fun memset(ptr: &u8, value: u8, size: int)


fun free(ptr: &u8)


fun realloc(ptr: &u8, size: int) -> &u8


fun alloc(size: int) -> &u8


fun main -> int

  Inst1[]
    Value(0): int = Lit(Int(1, 0)) |1
    Value(1): int = Lit(Int(1, 0)) |1
    Value(2): int = Call(Fun(260), [Value(0), Value(1)]) |1 + 1
    Return(Some(Value(2))) |return 1 + 1


function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 1
    v1 = iconst.i64 1
    v2 = iadd v0, v1
    return v2
}



  Inst1[Value(0), Value(1)]
    Value(2): int = Zeroed |
    Value(3): int = VarDecl(Value(2)) |
    Value(4): int = Call(Fun(485), []) |entry
    Value(4): int = Assign(Value(3)) |entry
    Return(Some(Value(3))) |


function u0:0(i64, i64) -> i64 fast {
    sig0 = () -> i64 fast
    fn0 = colocated u0:25 sig0

block0(v0: i64, v1: i64):
    v5 = iconst.i64 0
    v3 -> v5
    v2 = iconst.i64 0
    v4 = call fn0()
    return v4
}

output:
:end
fun print(s: &Self, value: &u8)

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): int = VarDecl(Value(2)) |i = 0
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst4[]
    Value(4): int = Cast(Value(1)) |value as int
    Value(5): int = Call(Fun(260), [Value(4), Value(3)]) |(value as int + i)
    Value(6): &u8 = Cast(Value(5)) |((value as int + i) as &u8)
    Value(7): u8 = Deref(Value(6), false) |*((value as int + i) as &u8)
    Value(8): u8 = VarDecl(Value(7)) |value = *((value as int + i) as &u8)
    Value(9): u8 = Lit(Uint(0, 8)) |0u8
    Value(10): bool = Call(Fun(306), [Value(8), Value(9)]) |value == 0u8
    JumpIfTrue(Value(10), Inst(15), []) |value == 0u8
    Jump(Inst(17), []) |

  Inst15[]
    Jump(Inst(5), []) |break

  Inst17[]
    Value(11): int = Lit(Int(1, 0)) |1
    Value(12): int = Call(Fun(260), [Value(3), Value(11)]) |i += 1
    Value(12): int = Assign(Value(3)) |i += 1
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst5[]
    Call(Fun(473), [Value(0), Value(3)]) |s.reserve(i)
    Value(14): &Seq[u8] = Offset(Value(0)) |s.len
    Value(15): Seq[u8] = Deref(Value(14), false) |s.len
    Value(13): int = Offset(Value(15)) |s.len
    Value(16): &u8 = Call(Fun(474), [Value(0), Value(13)]) |s.get_unchecked(s.len)
    Call(Fun(442), [Value(16), Value(1), Value(3)]) |memcpy(s.get_unchecked(s.len), value, i)
    Value(18): &Seq[u8] = Offset(Value(0)) |s.len
    Value(19): Seq[u8] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[u8] = Offset(Value(0)) |s.len
    Value(22): Seq[u8] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Call(Fun(260), [Value(20), Value(3)]) |s.len += i
    Value(23): int = Assign(Value(17)) |s.len += i
    Return(None) |s.len += i


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    sig2 = (i64, i64, i64) windows_fastcall
    fn0 = colocated u0:3 sig0
    fn1 = colocated u0:1 sig1
    fn2 = u0:19 sig2

block0(v0: i64, v1: i64):
    v17 = iconst.i64 0
    v3 -> v17
    v2 = iconst.i64 0
    jump block1(v2)

block1(v4: i64):
    v10 -> v4
    v12 -> v4
    v5 = iadd.i64 v1, v4
    v6 = load.i8 v5
    v7 = iconst.i8 0
    v8 = icmp eq v6, v7
    brnz v8, block2
    jump block3

block2:
    jump block4

block3:
    v9 = iconst.i64 1
    v11 = iadd.i64 v10, v9
    jump block1(v11)

block4:
    call fn0(v0, v12)
    v13 = load.i64 v0+8
    v14 = call fn1(v0, v13)
    call fn2(v14, v1, v12)
    v15 = load.i64 v0+8
    v16 = iadd v15, v12
    store v16, v0+8
    return
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.data
    Value(4): Seq[u8] = Deref(Value(3), false) |s.data
    Value(2): &u8 = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(475), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &u8 = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun reserve(s: &Self, new_cap: int)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(4): Seq[u8] = Deref(Value(3), false) |s.cap
    Value(2): int = Offset(Value(4)) |s.cap
    Value(5): bool = Call(Fun(350), [Value(2), Value(1)]) |s.cap > new_cap
    JumpIfTrue(Value(5), Inst(6), []) |s.cap > new_cap
    Jump(Inst(8), []) |

  Inst6[]
    Return(None) |return

  Inst8[]
    Value(7): &Seq[u8] = Offset(Value(0)) |s.data
    Value(8): Seq[u8] = Deref(Value(7), false) |s.data
    Value(6): &u8 = Offset(Value(8)) |s.data
    Value(10): &Seq[u8] = Offset(Value(0)) |s.data
    Value(11): Seq[u8] = Deref(Value(10), false) |s.data
    Value(9): &u8 = Offset(Value(11)) |s.data
    Value(12): int = Call(Fun(475), []) |sizeof::[T]()
    Value(13): int = Call(Fun(280), [Value(1), Value(12)]) |new_cap * sizeof::[T]()
    Value(14): &u8 = Call(Fun(438), [Value(9), Value(13)]) |realloc(s.data, new_cap * sizeof::[T]())
    Value(14): &u8 = Assign(Value(6)) |s.data = realloc(s.data, new_cap * sizeof::[T]())
    Value(16): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(17): Seq[u8] = Deref(Value(16), false) |s.cap
    Value(15): int = Offset(Value(17)) |s.cap
    Value(1): int = Assign(Value(15)) |s.cap = new_cap
    Return(None) |s.cap = new_cap


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:23 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0+16
    v3 = icmp sgt v2, v1
    brnz v3, block1
    jump block2

block1:
    return

block2:
    v4 = iconst.i64 1
    v5 = imul.i64 v1, v4
    v6 = load.i64 v0
    v7 = call fn0(v6, v5)
    store v7, v0
    store.i64 v1, v0+16
    return
}

fun print_int(s: &Self, value: int)

  Inst1[Value(0), Value(1)]
    Value(2): int = VarDecl(Value(1)) |value = value
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst3[]
    Value(3): int = Lit(Int(0, 0)) |0
    Value(4): bool = Call(Fun(310), [Value(2), Value(3)]) |value == 0
    JumpIfTrue(Value(4), Inst(9), []) |value == 0
    Jump(Inst(11), []) |

  Inst9[]
    Jump(Inst(4), []) |break

  Inst11[]
    Value(5): int = Lit(Int(10, 0)) |10
    Value(6): int = Call(Fun(300), [Value(2), Value(5)]) |value % 10
    Value(7): int = VarDecl(Value(6)) |digit = value % 10
    Value(8): int = Lit(Int(10, 0)) |10
    Value(9): int = Call(Fun(290), [Value(2), Value(8)]) |value / 10
    Value(9): int = Assign(Value(2)) |value = value / 10
    Value(10): u32 = Call(Fun(96), [Value(7)]) |digit.u32()
    Value(11): i32 = Lit(Char('0')) |'0'
    Value(12): u32 = Call(Fun(258), [Value(10), Value(11)]) |(
    Value(13): u8 = Call(Fun(63), [Value(12)]) |(digit.u32() + '0').u8()
    Call(Fun(476), [Value(0), Value(13)]) |s.push((digit.u32() + '0').u8())
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst4[]
    Return(None) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())


function u0:0(i64, i64) fast {
    sig0 = (i64, i8) fast
    fn0 = colocated u0:5 sig0

block0(v0: i64, v1: i64):
    v19 = iconst.i64 0
    v18 -> v19
    v16 = iconst.i64 0
    v2 -> v16
    jump block1(v1, v18)

block1(v4: i64, v17: i64):
    v7 -> v4
    v9 -> v17
    v3 = iconst.i64 0
    v5 = icmp eq v4, v3
    brnz v5, block2
    jump block3

block2:
    jump block4

block3:
    v6 = iconst.i64 10
    v8 = srem.i64 v7, v6
    v10 = iconst.i64 10
    v11 = sdiv.i64 v7, v10
    v12 = ireduce.i32 v8
    v13 = iconst.i32 48
    v14 = iadd v12, v13
    v15 = ireduce.i8 v14
    call fn0(v0, v15)
    jump block1(v11, v8)

block4:
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.len
    Value(4): Seq[u8] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(10): Seq[u8] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(14): Seq[u8] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[u8] = Offset(Value(0)) |s.len
    Value(17): Seq[u8] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[u8] = Offset(Value(0)) |s.data
    Value(22): Seq[u8] = Deref(Value(21), false) |s.data
    Value(20): &u8 = Offset(Value(22)) |s.data
    Value(24): &Seq[u8] = Offset(Value(0)) |s.data
    Value(25): Seq[u8] = Deref(Value(24), false) |s.data
    Value(23): &u8 = Offset(Value(25)) |s.data
    Value(27): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(28): Seq[u8] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(475), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &u8 = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &u8 = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[u8] = Offset(Value(0)) |s.len
    Value(35): Seq[u8] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &u8 = Call(Fun(474), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): u8 = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): u8 = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[u8] = Offset(Value(0)) |s.len
    Value(40): Seq[u8] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i8) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:1 sig1

block0(v0: i64, v1: i8):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 1
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    store.i8 v1, v16
    store.i64 v4, v0+8
    return
}

fun pop_frame

  Inst1[]
    Value(0): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(2): &Seq[StackFrame] = Ref(Value(0)) |stacktrace.pop()
    Value(1): Option[StackFrame] = Call(Fun(477), [Value(2), Value(1)]) |stacktrace.pop()
    Return(None) |stacktrace.pop()


function u0:0() fast {
    ss0 = explicit_slot 32
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:7 sig0

block0:
    v0 = global_value.i64 gv0
    v1 = stack_addr.i64 ss0
    v2 = call fn0(v0, v1)
    return
}

fun pop(s: &Self) -> Option[T]

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(2), Value(5)]) |s.len == 0
    JumpIfTrue(Value(6), Inst(7), []) |s.len == 0
    Jump(Inst(9), []) |

  Inst7[]
    Value(7): Option[StackFrame] = Zeroed |return
    Value(8): Option[StackFrame] = Deref(Value(1), false) |return
    Value(7): Option[StackFrame] = Assign(Value(8)) |return
    Return(Some(Value(1))) |return

  Inst9[]
    Value(10): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(11): Seq[StackFrame] = Deref(Value(10), false) |s.len
    Value(9): int = Offset(Value(11)) |s.len
    Value(12): int = Lit(Int(1, 0)) |1
    Value(13): int = Call(Fun(270), [Value(9), Value(12)]) |s.len - 1
    Value(14): &StackFrame = Call(Fun(478), [Value(0), Value(13)]) |s.get_unchecked(s.len - 1)
    Value(15): StackFrame = Deref(Value(14), false) |*s.get_unchecked(s.len - 1)
    Value(16): StackFrame = VarDecl(Value(15)) |value = *s.get_unchecked(s.len - 1)
    Value(18): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(19): Seq[StackFrame] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Lit(Int(1, 0)) |1
    Value(24): int = Call(Fun(270), [Value(20), Value(23)]) |s.len -= 1
    Value(24): int = Assign(Value(17)) |s.len -= 1
    Value(25): Option[StackFrame] = Call(Fun(479), [Value(16), Value(25)]) |Option::some(value)
    Value(26): Option[StackFrame] = Deref(Value(1), false) |Option::some(value)
    Value(25): Option[StackFrame] = Assign(Value(26)) |Option::some(value)
    Return(Some(Value(1))) |Option::some(value)


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 32
    sig0 = (i64, i64) -> i64 fast
    sig1 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:9 sig0
    fn1 = colocated u0:8 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = load.i64 v0+8
    v4 = icmp eq v3, v2
    brnz v4, block1
    jump block2

block1:
    v5 = iconst.i64 0
    store v5, v1
    store v5, v1+8
    store v5, v1+16
    store v5, v1+24
    return v1

block2:
    v6 = iconst.i64 1
    v7 = load.i64 v0+8
    v8 = isub v7, v6
    v9 = call fn0(v0, v8)
    v10 = stack_addr.i64 ss0
    v11 = load.i64 v9
    store v11, v10
    v12 = load.i64 v9+8
    store v12, v10+8
    v13 = load.i64 v9+16
    store v13, v10+16
    v14 = iconst.i64 1
    v15 = load.i64 v0+8
    v16 = isub v15, v14
    store v16, v0+8
    v17 = stack_addr.i64 ss0
    v18 = stack_addr.i64 ss1
    v19 = call fn1(v17, v18)
    v20 = stack_addr.i64 ss1
    v21 = load.i64 v20
    store v21, v1
    v22 = load.i64 v20+8
    store v22, v1+8
    v23 = load.i64 v20+16
    store v23, v1+16
    v24 = load.i64 v20+24
    store v24, v1+24
    return v1
}

fun some(value: T) -> Self

  Inst1[Value(0), Value(1)]
    Value(2): Option[StackFrame] = Zeroed |option: Self
    Value(3): Option[StackFrame] = VarDecl(Value(2)) |option: Self
    Value(4): StackFrame = Offset(Value(3)) |option.value
    Value(0): StackFrame = Assign(Value(4)) |option.value = value
    Value(5): bool = Offset(Value(3)) |option.is_some
    Value(6): bool = Lit(Bool(true)) |true
    Value(6): bool = Assign(Value(5)) |option.is_some = true
    Value(7): Option[StackFrame] = Deref(Value(1), false) |option
    Value(3): Option[StackFrame] = Assign(Value(7)) |option
    Return(Some(Value(1))) |option


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 32

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    stack_store v2, ss0
    stack_store v2, ss0+8
    stack_store v2, ss0+16
    stack_store v2, ss0+24
    v3 = stack_addr.i64 ss0
    v4 = load.i64 v0
    store v4, v3
    v5 = load.i64 v0+8
    store v5, v3+8
    v6 = load.i64 v0+16
    store v6, v3+16
    v7 = bconst.b1 true
    v8 = bint.i8 v7
    stack_store v8, ss0+24
    v9 = stack_addr.i64 ss0
    v10 = load.i64 v9
    store v10, v1
    v11 = load.i64 v9+8
    store v11, v1+8
    v12 = load.i64 v9+16
    store v12, v1+16
    v13 = load.i64 v9+24
    store v13, v1+24
    return v1
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.data
    Value(2): &StackFrame = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(480), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &StackFrame = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 24
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun push_frame(line, column: int, file: &u8)

  Inst1[Value(0), Value(1), Value(2)]
    Value(3): StackFrame = Zeroed |frame: StackFrame
    Value(4): StackFrame = VarDecl(Value(3)) |frame: StackFrame
    Value(5): int = Offset(Value(4)) |frame.line
    Value(0): int = Assign(Value(5)) |frame.line = line
    Value(6): int = Offset(Value(4)) |frame.column
    Value(1): int = Assign(Value(6)) |frame.column = column
    Value(7): &u8 = Offset(Value(4)) |frame.file
    Value(2): &u8 = Assign(Value(7)) |frame.file = file
    Value(8): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(9): &Seq[StackFrame] = Ref(Value(8)) |stacktrace.push(frame)
    Call(Fun(481), [Value(9), Value(4)]) |stacktrace.push(frame)
    Return(None) |stacktrace.push(frame)


function u0:0(i64, i64, i64) fast {
    ss0 = explicit_slot 24
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64) fast
    fn0 = colocated u0:12 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = iconst.i64 0
    stack_store v3, ss0
    stack_store v3, ss0+8
    stack_store v3, ss0+16
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    v4 = global_value.i64 gv0
    v5 = stack_addr.i64 ss0
    call fn0(v4, v5)
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(10): Seq[StackFrame] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(14): Seq[StackFrame] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(17): Seq[StackFrame] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.data
    Value(20): &StackFrame = Offset(Value(22)) |s.data
    Value(24): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(25): Seq[StackFrame] = Deref(Value(24), false) |s.data
    Value(23): &StackFrame = Offset(Value(25)) |s.data
    Value(27): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(28): Seq[StackFrame] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(480), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &StackFrame = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &StackFrame = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(35): Seq[StackFrame] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &StackFrame = Call(Fun(478), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): StackFrame = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): StackFrame = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(40): Seq[StackFrame] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 24
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    v17 = load.i64 v1
    store v17, v16
    v18 = load.i64 v1+8
    store v18, v16+8
    v19 = load.i64 v1+16
    store v19, v16+16
    store.i64 v4, v0+8
    return
}

fun panic(str: &u8)

  Inst1[Value(0)]
    Value(1): &u8 = Lit(String(Spam { source: Source(0), hash: ID(13432806085582464995), range: 127..135 })) |"panic: "
    Call(Fun(443), [Value(1)]) |print("panic: ")
    Call(Fun(443), [Value(0)]) |print(str)
    Value(2): &u8 = Lit(String(Spam { source: Source(0), hash: ID(655990), range: 137..139 })) |"\n"
    Call(Fun(443), [Value(2)]) |print("\n")
    Value(3): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(4): int = Offset(Value(3)) |stacktrace.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(4), Value(5)]) |stacktrace.len == 0
    JumpIfTrue(Value(6), Inst(11), []) |stacktrace.len == 0
    Jump(Inst(13), []) |

  Inst11[]
    Value(7): &u8 = Lit(String(Spam { source: Source(0), hash: ID(16979661566361224870), range: 214..289 })) |"no stacktrace available, use '-trace' when building to generate stactrace\n"
    Call(Fun(443), [Value(7)]) |print("no stacktrace available, use '-trace' when building to generate stactrace\n")
    Value(8): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(8)]) |exit(1)
    Return(None) |return

  Inst13[]
    Value(9): Seq[u8] = Zeroed |buffer: Seq[u8]
    Value(10): Seq[u8] = VarDecl(Value(9)) |buffer: Seq[u8]
    Value(11): int = Zeroed |i: int
    Value(12): int = VarDecl(Value(11)) |i: int
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst26[]
    Value(13): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(14): int = Offset(Value(13)) |stacktrace.len
    Value(15): bool = Call(Fun(330), [Value(12), Value(14)]) |i >= stacktrace.len
    JumpIfTrue(Value(15), Inst(33), []) |i >= stacktrace.len
    Jump(Inst(35), []) |

  Inst33[]
    Jump(Inst(27), []) |break

  Inst35[]
    Value(16): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(18): &Seq[StackFrame] = Ref(Value(16)) |stacktrace[i]
    Value(17): &StackFrame = Call(Fun(482), [Value(18), Value(12)]) |stacktrace[i]
    Value(19): StackFrame = Deref(Value(17), false) |stacktrace[i]
    Value(20): StackFrame = VarDecl(Value(19)) |frame = stacktrace[i]
    Value(21): int = Offset(Value(20)) |frame.line
    Value(22): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.line)
    Call(Fun(452), [Value(22), Value(21)]) |buffer.print_int(frame.line)
    Value(23): i32 = Lit(Char(':')) |':'
    Value(24): u8 = Call(Fun(59), [Value(23)]) |':'.u8()
    Value(25): &Seq[u8] = Ref(Value(10)) |buffer.push(':'.u8())
    Call(Fun(476), [Value(25), Value(24)]) |buffer.push(':'.u8())
    Value(26): int = Offset(Value(20)) |frame.column
    Value(27): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.column)
    Call(Fun(452), [Value(27), Value(26)]) |buffer.print_int(frame.column)
    Value(28): i32 = Lit(Char(' ')) |' '
    Value(29): u8 = Call(Fun(59), [Value(28)]) |' '.u8()
    Value(30): &Seq[u8] = Ref(Value(10)) |buffer.push(' '.u8())
    Call(Fun(476), [Value(30), Value(29)]) |buffer.push(' '.u8())
    Value(31): &u8 = Offset(Value(20)) |frame.file
    Value(32): &Seq[u8] = Ref(Value(10)) |buffer.print(frame.file)
    Call(Fun(453), [Value(32), Value(31)]) |buffer.print(frame.file)
    Value(33): i32 = Lit(Char('\n')) |'\n'
    Value(34): u8 = Call(Fun(59), [Value(33)]) |'\n'.u8()
    Value(35): &Seq[u8] = Ref(Value(10)) |buffer.push('\n'.u8())
    Call(Fun(476), [Value(35), Value(34)]) |buffer.push('\n'.u8())
    Value(36): int = Lit(Int(1, 0)) |1
    Value(37): int = Call(Fun(260), [Value(12), Value(36)]) |i += 1
    Value(37): int = Assign(Value(12)) |i += 1
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst27[]
    Value(38): i32 = Lit(Char('\u{0}')) |'\x00'
    Value(39): u8 = Call(Fun(59), [Value(38)]) |'\x00'.u8()
    Value(40): &Seq[u8] = Ref(Value(10)) |buffer.push('\x00'.u8())
    Call(Fun(476), [Value(40), Value(39)]) |buffer.push('\x00'.u8())
    Value(41): &u8 = Offset(Value(10)) |buffer.data
    Call(Fun(443), [Value(41)]) |print(buffer.data)
    Value(42): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(42)]) |exit(1)
    Return(None) |exit(1)


function u0:0(i64) fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 24
    gv0 = symbol colocated u1:1
    gv1 = symbol colocated u1:2
    gv2 = symbol colocated u1:0
    gv3 = symbol colocated u1:3
    gv4 = symbol colocated u1:0
    gv5 = symbol colocated u1:0
    sig0 = (i64) windows_fastcall
    sig1 = (i64) windows_fastcall
    sig2 = (i64) windows_fastcall
    sig3 = (i64) windows_fastcall
    sig4 = (i64) windows_fastcall
    sig5 = (i64, i64) -> i64 fast
    sig6 = (i64, i64) fast
    sig7 = (i64, i8) fast
    sig8 = (i64, i64) fast
    sig9 = (i64, i8) fast
    sig10 = (i64, i64) fast
    sig11 = (i64, i8) fast
    sig12 = (i64, i8) fast
    sig13 = (i64) windows_fastcall
    sig14 = (i64) windows_fastcall
    fn0 = u0:18 sig0
    fn1 = u0:18 sig1
    fn2 = u0:18 sig2
    fn3 = u0:18 sig3
    fn4 = u0:17 sig4
    fn5 = colocated u0:14 sig5
    fn6 = colocated u0:4 sig6
    fn7 = colocated u0:5 sig7
    fn8 = colocated u0:4 sig8
    fn9 = colocated u0:5 sig9
    fn10 = colocated u0:0 sig10
    fn11 = colocated u0:5 sig11
    fn12 = colocated u0:5 sig12
    fn13 = u0:18 sig13
    fn14 = u0:17 sig14

block0(v0: i64):
    v46 = iconst.i64 0
    v11 -> v46
    v45 -> v46
    v1 = global_value.i64 gv0
    call fn0(v1)
    call fn1(v0)
    v2 = global_value.i64 gv1
    call fn2(v2)
    v3 = global_value.i64 gv2
    v4 = iconst.i64 0
    v5 = load.i64 v3+8
    v6 = icmp eq v5, v4
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv3
    call fn3(v7)
    v8 = iconst.i64 1
    call fn4(v8)
    return

block2:
    v9 = iconst.i64 0
    stack_store v9, ss0
    stack_store v9, ss0+8
    stack_store v9, ss0+16
    v10 = iconst.i64 0
    jump block3(v10)

block3(v13: i64):
    v17 -> v13
    v12 = global_value.i64 gv4
    v14 = load.i64 v12+8
    v15 = icmp sge v13, v14
    brnz v15, block4
    jump block5

block4:
    jump block6

block5:
    v16 = global_value.i64 gv5
    v18 = call fn5(v16, v17)
    v19 = stack_addr.i64 ss1
    v20 = load.i64 v18
    store v20, v19
    v21 = load.i64 v18+8
    store v21, v19+8
    v22 = load.i64 v18+16
    store v22, v19+16
    v23 = stack_addr.i64 ss0
    v24 = stack_load.i64 ss1
    call fn6(v23, v24)
    v25 = iconst.i32 58
    v26 = ireduce.i8 v25
    v27 = stack_addr.i64 ss0
    call fn7(v27, v26)
    v28 = stack_addr.i64 ss0
    v29 = stack_load.i64 ss1+8
    call fn8(v28, v29)
    v30 = iconst.i32 32
    v31 = ireduce.i8 v30
    v32 = stack_addr.i64 ss0
    call fn9(v32, v31)
    v33 = stack_addr.i64 ss0
    v34 = stack_load.i64 ss1+16
    call fn10(v33, v34)
    v35 = iconst.i32 10
    v36 = ireduce.i8 v35
    v37 = stack_addr.i64 ss0
    call fn11(v37, v36)
    v38 = iconst.i64 1
    v39 = iadd.i64 v17, v38
    jump block3(v39)

block6:
    v40 = iconst.i32 0
    v41 = ireduce.i8 v40
    v42 = stack_addr.i64 ss0
    call fn12(v42, v41)
    v43 = stack_load.i64 ss0
    call fn13(v43)
    v44 = iconst.i64 1
    call fn14(v44)
    return
}

fun __index__(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Call(Fun(483), [Value(0), Value(1)]) |s.assert_in_bounds(index)
    Value(2): &StackFrame = Call(Fun(478), [Value(0), Value(1)]) |s.get_unchecked(index)
    Return(Some(Value(2))) |s.get_unchecked(index)


function u0:0(i64, i64) -> i64 fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    call fn0(v0, v1)
    v2 = call fn1(v0, v1)
    return v2
}

fun assert_in_bounds(s: &Self, index: int)

  Inst1[Value(0), Value(1)]
    Value(2): bool = Call(Fun(484), [Value(0), Value(1)]) |s.in_bounds(index)
    Value(3): bool = Call(Fun(251), [Value(2)]) |!s.in_bounds(index)
    JumpIfTrue(Value(3), Inst(4), []) |!s.in_bounds(index)
    Jump(Inst(6), []) |

  Inst4[]
    Value(4): &u8 = Lit(String(Spam { source: Source(0), hash: ID(6484216913505728610), range: 473..493 })) |"index out of bounds"
    Call(Fun(445), [Value(4)]) |panic("index out of bounds")
    Jump(Inst(6), []) |if !s.in_bounds(index):
      panic("index out of bounds")

  Inst6[]
    Return(None) |if !s.in_bounds(index):
      panic("index out of bounds")


function u0:0(i64, i64) fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64, i64) -> b1 fast
    sig1 = (i64) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:13 sig1

block0(v0: i64, v1: i64):
    v2 = call fn0(v0, v1)
    v3 = bint.i8 v2
    v4 = icmp_imm eq v3, 0
    brnz v4, block1
    jump block2

block1:
    v5 = global_value.i64 gv0
    call fn1(v5)
    jump block2

block2:
    return
}

fun in_bounds(s: &Self, index: int) -> bool

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): bool = Call(Fun(330), [Value(1), Value(2)]) |index >= 0
    Value(5): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(6): Seq[StackFrame] = Deref(Value(5), false) |s.len
    Value(4): int = Offset(Value(6)) |s.len
    Value(7): bool = Call(Fun(360), [Value(1), Value(4)]) |index < s.len
    Value(8): bool = Call(Fun(436), [Value(3), Value(7)]) |index >= 0 & index < s.len
    Return(Some(Value(8))) |index >= 0 & index < s.len


function u0:0(i64, i64) -> b1 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = icmp sge v1, v2
    v4 = load.i64 v0+8
    v5 = icmp slt v1, v4
    v6 = band v3, v5
    return v6
}

fun exit(code: int)


fun print(str: &u8)


fun memcpy(dest: &u8, src: &u8, size: int)


fun memmove(dest: &u8, src: &u8, size: int)


fun memset(ptr: &u8, value: u8, size: int)


fun free(ptr: &u8)


fun realloc(ptr: &u8, size: int) -> &u8


fun alloc(size: int) -> &u8


fun main -> int

  Inst1[]
    Value(0): int = Lit(Int(1, 0)) |1
    Value(1): int = Lit(Int(1, 0)) |1
    Value(2): bool = Call(Fun(310), [Value(0), Value(1)]) |1 == 1
    JumpIfTrue(Value(2), Inst(5), []) |1 == 1
    Jump(Inst(8), []) |:

  Inst5[]
    Value(3): int = Lit(Int(0, 0)) |0
    Jump(Inst(7), [Value(3)]) |if 1 == 1: 0 else: 1

  Inst8[]
    Value(5): int = Lit(Int(1, 0)) |1
    Jump(Inst(7), [Value(5)]) |1

  Inst7[Value(4)]
    Return(Some(Value(4))) |return if 1 == 1: 0 else: 1


function u0:0() -> i64 fast {
block0:
    v1 = iconst.i64 1
    v2 = iconst.i64 1
    v3 = icmp eq v1, v2
    brnz v3, block1
    jump block2

block1:
    v4 = iconst.i64 0
    jump block3(v4)

block2:
    v5 = iconst.i64 1
    jump block3(v5)

block3(v0: i64):
    return v0
}



  Inst1[Value(0), Value(1)]
    Value(2): int = Zeroed |
    Value(3): int = VarDecl(Value(2)) |
    Value(4): int = Call(Fun(485), []) |entry
    Value(4): int = Assign(Value(3)) |entry
    Return(Some(Value(3))) |


function u0:0(i64, i64) -> i64 fast {
    sig0 = () -> i64 fast
    fn0 = colocated u0:25 sig0

block0(v0: i64, v1: i64):
    v5 = iconst.i64 0
    v3 -> v5
    v2 = iconst.i64 0
    v4 = call fn0()
    return v4
}

output:
:end
fun print(s: &Self, value: &u8)

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): int = VarDecl(Value(2)) |i = 0
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst4[]
    Value(4): int = Cast(Value(1)) |value as int
    Value(5): int = Call(Fun(260), [Value(4), Value(3)]) |(value as int + i)
    Value(6): &u8 = Cast(Value(5)) |((value as int + i) as &u8)
    Value(7): u8 = Deref(Value(6), false) |*((value as int + i) as &u8)
    Value(8): u8 = VarDecl(Value(7)) |value = *((value as int + i) as &u8)
    Value(9): u8 = Lit(Uint(0, 8)) |0u8
    Value(10): bool = Call(Fun(306), [Value(8), Value(9)]) |value == 0u8
    JumpIfTrue(Value(10), Inst(15), []) |value == 0u8
    Jump(Inst(17), []) |

  Inst15[]
    Jump(Inst(5), []) |break

  Inst17[]
    Value(11): int = Lit(Int(1, 0)) |1
    Value(12): int = Call(Fun(260), [Value(3), Value(11)]) |i += 1
    Value(12): int = Assign(Value(3)) |i += 1
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst5[]
    Call(Fun(473), [Value(0), Value(3)]) |s.reserve(i)
    Value(14): &Seq[u8] = Offset(Value(0)) |s.len
    Value(15): Seq[u8] = Deref(Value(14), false) |s.len
    Value(13): int = Offset(Value(15)) |s.len
    Value(16): &u8 = Call(Fun(474), [Value(0), Value(13)]) |s.get_unchecked(s.len)
    Call(Fun(442), [Value(16), Value(1), Value(3)]) |memcpy(s.get_unchecked(s.len), value, i)
    Value(18): &Seq[u8] = Offset(Value(0)) |s.len
    Value(19): Seq[u8] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[u8] = Offset(Value(0)) |s.len
    Value(22): Seq[u8] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Call(Fun(260), [Value(20), Value(3)]) |s.len += i
    Value(23): int = Assign(Value(17)) |s.len += i
    Return(None) |s.len += i


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    sig2 = (i64, i64, i64) windows_fastcall
    fn0 = colocated u0:3 sig0
    fn1 = colocated u0:1 sig1
    fn2 = u0:19 sig2

block0(v0: i64, v1: i64):
    v17 = iconst.i64 0
    v3 -> v17
    v2 = iconst.i64 0
    jump block1(v2)

block1(v4: i64):
    v10 -> v4
    v12 -> v4
    v5 = iadd.i64 v1, v4
    v6 = load.i8 v5
    v7 = iconst.i8 0
    v8 = icmp eq v6, v7
    brnz v8, block2
    jump block3

block2:
    jump block4

block3:
    v9 = iconst.i64 1
    v11 = iadd.i64 v10, v9
    jump block1(v11)

block4:
    call fn0(v0, v12)
    v13 = load.i64 v0+8
    v14 = call fn1(v0, v13)
    call fn2(v14, v1, v12)
    v15 = load.i64 v0+8
    v16 = iadd v15, v12
    store v16, v0+8
    return
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.data
    Value(4): Seq[u8] = Deref(Value(3), false) |s.data
    Value(2): &u8 = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(475), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &u8 = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun reserve(s: &Self, new_cap: int)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(4): Seq[u8] = Deref(Value(3), false) |s.cap
    Value(2): int = Offset(Value(4)) |s.cap
    Value(5): bool = Call(Fun(350), [Value(2), Value(1)]) |s.cap > new_cap
    JumpIfTrue(Value(5), Inst(6), []) |s.cap > new_cap
    Jump(Inst(8), []) |

  Inst6[]
    Return(None) |return

  Inst8[]
    Value(7): &Seq[u8] = Offset(Value(0)) |s.data
    Value(8): Seq[u8] = Deref(Value(7), false) |s.data
    Value(6): &u8 = Offset(Value(8)) |s.data
    Value(10): &Seq[u8] = Offset(Value(0)) |s.data
    Value(11): Seq[u8] = Deref(Value(10), false) |s.data
    Value(9): &u8 = Offset(Value(11)) |s.data
    Value(12): int = Call(Fun(475), []) |sizeof::[T]()
    Value(13): int = Call(Fun(280), [Value(1), Value(12)]) |new_cap * sizeof::[T]()
    Value(14): &u8 = Call(Fun(438), [Value(9), Value(13)]) |realloc(s.data, new_cap * sizeof::[T]())
    Value(14): &u8 = Assign(Value(6)) |s.data = realloc(s.data, new_cap * sizeof::[T]())
    Value(16): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(17): Seq[u8] = Deref(Value(16), false) |s.cap
    Value(15): int = Offset(Value(17)) |s.cap
    Value(1): int = Assign(Value(15)) |s.cap = new_cap
    Return(None) |s.cap = new_cap


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:23 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0+16
    v3 = icmp sgt v2, v1
    brnz v3, block1
    jump block2

block1:
    return

block2:
    v4 = iconst.i64 1
    v5 = imul.i64 v1, v4
    v6 = load.i64 v0
    v7 = call fn0(v6, v5)
    store v7, v0
    store.i64 v1, v0+16
    return
}

fun print_int(s: &Self, value: int)

  Inst1[Value(0), Value(1)]
    Value(2): int = VarDecl(Value(1)) |value = value
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst3[]
    Value(3): int = Lit(Int(0, 0)) |0
    Value(4): bool = Call(Fun(310), [Value(2), Value(3)]) |value == 0
    JumpIfTrue(Value(4), Inst(9), []) |value == 0
    Jump(Inst(11), []) |

  Inst9[]
    Jump(Inst(4), []) |break

  Inst11[]
    Value(5): int = Lit(Int(10, 0)) |10
    Value(6): int = Call(Fun(300), [Value(2), Value(5)]) |value % 10
    Value(7): int = VarDecl(Value(6)) |digit = value % 10
    Value(8): int = Lit(Int(10, 0)) |10
    Value(9): int = Call(Fun(290), [Value(2), Value(8)]) |value / 10
    Value(9): int = Assign(Value(2)) |value = value / 10
    Value(10): u32 = Call(Fun(96), [Value(7)]) |digit.u32()
    Value(11): i32 = Lit(Char('0')) |'0'
    Value(12): u32 = Call(Fun(258), [Value(10), Value(11)]) |(
    Value(13): u8 = Call(Fun(63), [Value(12)]) |(digit.u32() + '0').u8()
    Call(Fun(476), [Value(0), Value(13)]) |s.push((digit.u32() + '0').u8())
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst4[]
    Return(None) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())


function u0:0(i64, i64) fast {
    sig0 = (i64, i8) fast
    fn0 = colocated u0:5 sig0

block0(v0: i64, v1: i64):
    v19 = iconst.i64 0
    v18 -> v19
    v16 = iconst.i64 0
    v2 -> v16
    jump block1(v1, v18)

block1(v4: i64, v17: i64):
    v7 -> v4
    v9 -> v17
    v3 = iconst.i64 0
    v5 = icmp eq v4, v3
    brnz v5, block2
    jump block3

block2:
    jump block4

block3:
    v6 = iconst.i64 10
    v8 = srem.i64 v7, v6
    v10 = iconst.i64 10
    v11 = sdiv.i64 v7, v10
    v12 = ireduce.i32 v8
    v13 = iconst.i32 48
    v14 = iadd v12, v13
    v15 = ireduce.i8 v14
    call fn0(v0, v15)
    jump block1(v11, v8)

block4:
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.len
    Value(4): Seq[u8] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(10): Seq[u8] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(14): Seq[u8] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[u8] = Offset(Value(0)) |s.len
    Value(17): Seq[u8] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[u8] = Offset(Value(0)) |s.data
    Value(22): Seq[u8] = Deref(Value(21), false) |s.data
    Value(20): &u8 = Offset(Value(22)) |s.data
    Value(24): &Seq[u8] = Offset(Value(0)) |s.data
    Value(25): Seq[u8] = Deref(Value(24), false) |s.data
    Value(23): &u8 = Offset(Value(25)) |s.data
    Value(27): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(28): Seq[u8] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(475), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &u8 = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &u8 = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[u8] = Offset(Value(0)) |s.len
    Value(35): Seq[u8] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &u8 = Call(Fun(474), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): u8 = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): u8 = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[u8] = Offset(Value(0)) |s.len
    Value(40): Seq[u8] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i8) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:1 sig1

block0(v0: i64, v1: i8):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 1
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    store.i8 v1, v16
    store.i64 v4, v0+8
    return
}

fun pop_frame

  Inst1[]
    Value(0): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(2): &Seq[StackFrame] = Ref(Value(0)) |stacktrace.pop()
    Value(1): Option[StackFrame] = Call(Fun(477), [Value(2), Value(1)]) |stacktrace.pop()
    Return(None) |stacktrace.pop()


function u0:0() fast {
    ss0 = explicit_slot 32
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:7 sig0

block0:
    v0 = global_value.i64 gv0
    v1 = stack_addr.i64 ss0
    v2 = call fn0(v0, v1)
    return
}

fun pop(s: &Self) -> Option[T]

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(2), Value(5)]) |s.len == 0
    JumpIfTrue(Value(6), Inst(7), []) |s.len == 0
    Jump(Inst(9), []) |

  Inst7[]
    Value(7): Option[StackFrame] = Zeroed |return
    Value(8): Option[StackFrame] = Deref(Value(1), false) |return
    Value(7): Option[StackFrame] = Assign(Value(8)) |return
    Return(Some(Value(1))) |return

  Inst9[]
    Value(10): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(11): Seq[StackFrame] = Deref(Value(10), false) |s.len
    Value(9): int = Offset(Value(11)) |s.len
    Value(12): int = Lit(Int(1, 0)) |1
    Value(13): int = Call(Fun(270), [Value(9), Value(12)]) |s.len - 1
    Value(14): &StackFrame = Call(Fun(478), [Value(0), Value(13)]) |s.get_unchecked(s.len - 1)
    Value(15): StackFrame = Deref(Value(14), false) |*s.get_unchecked(s.len - 1)
    Value(16): StackFrame = VarDecl(Value(15)) |value = *s.get_unchecked(s.len - 1)
    Value(18): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(19): Seq[StackFrame] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Lit(Int(1, 0)) |1
    Value(24): int = Call(Fun(270), [Value(20), Value(23)]) |s.len -= 1
    Value(24): int = Assign(Value(17)) |s.len -= 1
    Value(25): Option[StackFrame] = Call(Fun(479), [Value(16), Value(25)]) |Option::some(value)
    Value(26): Option[StackFrame] = Deref(Value(1), false) |Option::some(value)
    Value(25): Option[StackFrame] = Assign(Value(26)) |Option::some(value)
    Return(Some(Value(1))) |Option::some(value)


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 32
    sig0 = (i64, i64) -> i64 fast
    sig1 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:9 sig0
    fn1 = colocated u0:8 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = load.i64 v0+8
    v4 = icmp eq v3, v2
    brnz v4, block1
    jump block2

block1:
    v5 = iconst.i64 0
    store v5, v1
    store v5, v1+8
    store v5, v1+16
    store v5, v1+24
    return v1

block2:
    v6 = iconst.i64 1
    v7 = load.i64 v0+8
    v8 = isub v7, v6
    v9 = call fn0(v0, v8)
    v10 = stack_addr.i64 ss0
    v11 = load.i64 v9
    store v11, v10
    v12 = load.i64 v9+8
    store v12, v10+8
    v13 = load.i64 v9+16
    store v13, v10+16
    v14 = iconst.i64 1
    v15 = load.i64 v0+8
    v16 = isub v15, v14
    store v16, v0+8
    v17 = stack_addr.i64 ss0
    v18 = stack_addr.i64 ss1
    v19 = call fn1(v17, v18)
    v20 = stack_addr.i64 ss1
    v21 = load.i64 v20
    store v21, v1
    v22 = load.i64 v20+8
    store v22, v1+8
    v23 = load.i64 v20+16
    store v23, v1+16
    v24 = load.i64 v20+24
    store v24, v1+24
    return v1
}

fun some(value: T) -> Self

  Inst1[Value(0), Value(1)]
    Value(2): Option[StackFrame] = Zeroed |option: Self
    Value(3): Option[StackFrame] = VarDecl(Value(2)) |option: Self
    Value(4): StackFrame = Offset(Value(3)) |option.value
    Value(0): StackFrame = Assign(Value(4)) |option.value = value
    Value(5): bool = Offset(Value(3)) |option.is_some
    Value(6): bool = Lit(Bool(true)) |true
    Value(6): bool = Assign(Value(5)) |option.is_some = true
    Value(7): Option[StackFrame] = Deref(Value(1), false) |option
    Value(3): Option[StackFrame] = Assign(Value(7)) |option
    Return(Some(Value(1))) |option


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 32

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    stack_store v2, ss0
    stack_store v2, ss0+8
    stack_store v2, ss0+16
    stack_store v2, ss0+24
    v3 = stack_addr.i64 ss0
    v4 = load.i64 v0
    store v4, v3
    v5 = load.i64 v0+8
    store v5, v3+8
    v6 = load.i64 v0+16
    store v6, v3+16
    v7 = bconst.b1 true
    v8 = bint.i8 v7
    stack_store v8, ss0+24
    v9 = stack_addr.i64 ss0
    v10 = load.i64 v9
    store v10, v1
    v11 = load.i64 v9+8
    store v11, v1+8
    v12 = load.i64 v9+16
    store v12, v1+16
    v13 = load.i64 v9+24
    store v13, v1+24
    return v1
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.data
    Value(2): &StackFrame = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(480), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &StackFrame = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 24
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun push_frame(line, column: int, file: &u8)

  Inst1[Value(0), Value(1), Value(2)]
    Value(3): StackFrame = Zeroed |frame: StackFrame
    Value(4): StackFrame = VarDecl(Value(3)) |frame: StackFrame
    Value(5): int = Offset(Value(4)) |frame.line
    Value(0): int = Assign(Value(5)) |frame.line = line
    Value(6): int = Offset(Value(4)) |frame.column
    Value(1): int = Assign(Value(6)) |frame.column = column
    Value(7): &u8 = Offset(Value(4)) |frame.file
    Value(2): &u8 = Assign(Value(7)) |frame.file = file
    Value(8): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(9): &Seq[StackFrame] = Ref(Value(8)) |stacktrace.push(frame)
    Call(Fun(481), [Value(9), Value(4)]) |stacktrace.push(frame)
    Return(None) |stacktrace.push(frame)


function u0:0(i64, i64, i64) fast {
    ss0 = explicit_slot 24
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64) fast
    fn0 = colocated u0:12 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = iconst.i64 0
    stack_store v3, ss0
    stack_store v3, ss0+8
    stack_store v3, ss0+16
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    v4 = global_value.i64 gv0
    v5 = stack_addr.i64 ss0
    call fn0(v4, v5)
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(10): Seq[StackFrame] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(14): Seq[StackFrame] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(17): Seq[StackFrame] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.data
    Value(20): &StackFrame = Offset(Value(22)) |s.data
    Value(24): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(25): Seq[StackFrame] = Deref(Value(24), false) |s.data
    Value(23): &StackFrame = Offset(Value(25)) |s.data
    Value(27): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(28): Seq[StackFrame] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(480), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &StackFrame = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &StackFrame = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(35): Seq[StackFrame] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &StackFrame = Call(Fun(478), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): StackFrame = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): StackFrame = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(40): Seq[StackFrame] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 24
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    v17 = load.i64 v1
    store v17, v16
    v18 = load.i64 v1+8
    store v18, v16+8
    v19 = load.i64 v1+16
    store v19, v16+16
    store.i64 v4, v0+8
    return
}

fun panic(str: &u8)

  Inst1[Value(0)]
    Value(1): &u8 = Lit(String(Spam { source: Source(0), hash: ID(13432806085582464995), range: 127..135 })) |"panic: "
    Call(Fun(443), [Value(1)]) |print("panic: ")
    Call(Fun(443), [Value(0)]) |print(str)
    Value(2): &u8 = Lit(String(Spam { source: Source(0), hash: ID(655990), range: 137..139 })) |"\n"
    Call(Fun(443), [Value(2)]) |print("\n")
    Value(3): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(4): int = Offset(Value(3)) |stacktrace.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(4), Value(5)]) |stacktrace.len == 0
    JumpIfTrue(Value(6), Inst(11), []) |stacktrace.len == 0
    Jump(Inst(13), []) |

  Inst11[]
    Value(7): &u8 = Lit(String(Spam { source: Source(0), hash: ID(16979661566361224870), range: 214..289 })) |"no stacktrace available, use '-trace' when building to generate stactrace\n"
    Call(Fun(443), [Value(7)]) |print("no stacktrace available, use '-trace' when building to generate stactrace\n")
    Value(8): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(8)]) |exit(1)
    Return(None) |return

  Inst13[]
    Value(9): Seq[u8] = Zeroed |buffer: Seq[u8]
    Value(10): Seq[u8] = VarDecl(Value(9)) |buffer: Seq[u8]
    Value(11): int = Zeroed |i: int
    Value(12): int = VarDecl(Value(11)) |i: int
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst26[]
    Value(13): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(14): int = Offset(Value(13)) |stacktrace.len
    Value(15): bool = Call(Fun(330), [Value(12), Value(14)]) |i >= stacktrace.len
    JumpIfTrue(Value(15), Inst(33), []) |i >= stacktrace.len
    Jump(Inst(35), []) |

  Inst33[]
    Jump(Inst(27), []) |break

  Inst35[]
    Value(16): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(18): &Seq[StackFrame] = Ref(Value(16)) |stacktrace[i]
    Value(17): &StackFrame = Call(Fun(482), [Value(18), Value(12)]) |stacktrace[i]
    Value(19): StackFrame = Deref(Value(17), false) |stacktrace[i]
    Value(20): StackFrame = VarDecl(Value(19)) |frame = stacktrace[i]
    Value(21): int = Offset(Value(20)) |frame.line
    Value(22): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.line)
    Call(Fun(452), [Value(22), Value(21)]) |buffer.print_int(frame.line)
    Value(23): i32 = Lit(Char(':')) |':'
    Value(24): u8 = Call(Fun(59), [Value(23)]) |':'.u8()
    Value(25): &Seq[u8] = Ref(Value(10)) |buffer.push(':'.u8())
    Call(Fun(476), [Value(25), Value(24)]) |buffer.push(':'.u8())
    Value(26): int = Offset(Value(20)) |frame.column
    Value(27): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.column)
    Call(Fun(452), [Value(27), Value(26)]) |buffer.print_int(frame.column)
    Value(28): i32 = Lit(Char(' ')) |' '
    Value(29): u8 = Call(Fun(59), [Value(28)]) |' '.u8()
    Value(30): &Seq[u8] = Ref(Value(10)) |buffer.push(' '.u8())
    Call(Fun(476), [Value(30), Value(29)]) |buffer.push(' '.u8())
    Value(31): &u8 = Offset(Value(20)) |frame.file
    Value(32): &Seq[u8] = Ref(Value(10)) |buffer.print(frame.file)
    Call(Fun(453), [Value(32), Value(31)]) |buffer.print(frame.file)
    Value(33): i32 = Lit(Char('\n')) |'\n'
    Value(34): u8 = Call(Fun(59), [Value(33)]) |'\n'.u8()
    Value(35): &Seq[u8] = Ref(Value(10)) |buffer.push('\n'.u8())
    Call(Fun(476), [Value(35), Value(34)]) |buffer.push('\n'.u8())
    Value(36): int = Lit(Int(1, 0)) |1
    Value(37): int = Call(Fun(260), [Value(12), Value(36)]) |i += 1
    Value(37): int = Assign(Value(12)) |i += 1
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst27[]
    Value(38): i32 = Lit(Char('\u{0}')) |'\x00'
    Value(39): u8 = Call(Fun(59), [Value(38)]) |'\x00'.u8()
    Value(40): &Seq[u8] = Ref(Value(10)) |buffer.push('\x00'.u8())
    Call(Fun(476), [Value(40), Value(39)]) |buffer.push('\x00'.u8())
    Value(41): &u8 = Offset(Value(10)) |buffer.data
    Call(Fun(443), [Value(41)]) |print(buffer.data)
    Value(42): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(42)]) |exit(1)
    Return(None) |exit(1)


function u0:0(i64) fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 24
    gv0 = symbol colocated u1:1
    gv1 = symbol colocated u1:2
    gv2 = symbol colocated u1:0
    gv3 = symbol colocated u1:3
    gv4 = symbol colocated u1:0
    gv5 = symbol colocated u1:0
    sig0 = (i64) windows_fastcall
    sig1 = (i64) windows_fastcall
    sig2 = (i64) windows_fastcall
    sig3 = (i64) windows_fastcall
    sig4 = (i64) windows_fastcall
    sig5 = (i64, i64) -> i64 fast
    sig6 = (i64, i64) fast
    sig7 = (i64, i8) fast
    sig8 = (i64, i64) fast
    sig9 = (i64, i8) fast
    sig10 = (i64, i64) fast
    sig11 = (i64, i8) fast
    sig12 = (i64, i8) fast
    sig13 = (i64) windows_fastcall
    sig14 = (i64) windows_fastcall
    fn0 = u0:18 sig0
    fn1 = u0:18 sig1
    fn2 = u0:18 sig2
    fn3 = u0:18 sig3
    fn4 = u0:17 sig4
    fn5 = colocated u0:14 sig5
    fn6 = colocated u0:4 sig6
    fn7 = colocated u0:5 sig7
    fn8 = colocated u0:4 sig8
    fn9 = colocated u0:5 sig9
    fn10 = colocated u0:0 sig10
    fn11 = colocated u0:5 sig11
    fn12 = colocated u0:5 sig12
    fn13 = u0:18 sig13
    fn14 = u0:17 sig14

block0(v0: i64):
    v46 = iconst.i64 0
    v11 -> v46
    v45 -> v46
    v1 = global_value.i64 gv0
    call fn0(v1)
    call fn1(v0)
    v2 = global_value.i64 gv1
    call fn2(v2)
    v3 = global_value.i64 gv2
    v4 = iconst.i64 0
    v5 = load.i64 v3+8
    v6 = icmp eq v5, v4
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv3
    call fn3(v7)
    v8 = iconst.i64 1
    call fn4(v8)
    return

block2:
    v9 = iconst.i64 0
    stack_store v9, ss0
    stack_store v9, ss0+8
    stack_store v9, ss0+16
    v10 = iconst.i64 0
    jump block3(v10)

block3(v13: i64):
    v17 -> v13
    v12 = global_value.i64 gv4
    v14 = load.i64 v12+8
    v15 = icmp sge v13, v14
    brnz v15, block4
    jump block5

block4:
    jump block6

block5:
    v16 = global_value.i64 gv5
    v18 = call fn5(v16, v17)
    v19 = stack_addr.i64 ss1
    v20 = load.i64 v18
    store v20, v19
    v21 = load.i64 v18+8
    store v21, v19+8
    v22 = load.i64 v18+16
    store v22, v19+16
    v23 = stack_addr.i64 ss0
    v24 = stack_load.i64 ss1
    call fn6(v23, v24)
    v25 = iconst.i32 58
    v26 = ireduce.i8 v25
    v27 = stack_addr.i64 ss0
    call fn7(v27, v26)
    v28 = stack_addr.i64 ss0
    v29 = stack_load.i64 ss1+8
    call fn8(v28, v29)
    v30 = iconst.i32 32
    v31 = ireduce.i8 v30
    v32 = stack_addr.i64 ss0
    call fn9(v32, v31)
    v33 = stack_addr.i64 ss0
    v34 = stack_load.i64 ss1+16
    call fn10(v33, v34)
    v35 = iconst.i32 10
    v36 = ireduce.i8 v35
    v37 = stack_addr.i64 ss0
    call fn11(v37, v36)
    v38 = iconst.i64 1
    v39 = iadd.i64 v17, v38
    jump block3(v39)

block6:
    v40 = iconst.i32 0
    v41 = ireduce.i8 v40
    v42 = stack_addr.i64 ss0
    call fn12(v42, v41)
    v43 = stack_load.i64 ss0
    call fn13(v43)
    v44 = iconst.i64 1
    call fn14(v44)
    return
}

fun __index__(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Call(Fun(483), [Value(0), Value(1)]) |s.assert_in_bounds(index)
    Value(2): &StackFrame = Call(Fun(478), [Value(0), Value(1)]) |s.get_unchecked(index)
    Return(Some(Value(2))) |s.get_unchecked(index)


function u0:0(i64, i64) -> i64 fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    call fn0(v0, v1)
    v2 = call fn1(v0, v1)
    return v2
}

fun assert_in_bounds(s: &Self, index: int)

  Inst1[Value(0), Value(1)]
    Value(2): bool = Call(Fun(484), [Value(0), Value(1)]) |s.in_bounds(index)
    Value(3): bool = Call(Fun(251), [Value(2)]) |!s.in_bounds(index)
    JumpIfTrue(Value(3), Inst(4), []) |!s.in_bounds(index)
    Jump(Inst(6), []) |

  Inst4[]
    Value(4): &u8 = Lit(String(Spam { source: Source(0), hash: ID(6484216913505728610), range: 473..493 })) |"index out of bounds"
    Call(Fun(445), [Value(4)]) |panic("index out of bounds")
    Jump(Inst(6), []) |if !s.in_bounds(index):
      panic("index out of bounds")

  Inst6[]
    Return(None) |if !s.in_bounds(index):
      panic("index out of bounds")


function u0:0(i64, i64) fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64, i64) -> b1 fast
    sig1 = (i64) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:13 sig1

block0(v0: i64, v1: i64):
    v2 = call fn0(v0, v1)
    v3 = bint.i8 v2
    v4 = icmp_imm eq v3, 0
    brnz v4, block1
    jump block2

block1:
    v5 = global_value.i64 gv0
    call fn1(v5)
    jump block2

block2:
    return
}

fun in_bounds(s: &Self, index: int) -> bool

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): bool = Call(Fun(330), [Value(1), Value(2)]) |index >= 0
    Value(5): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(6): Seq[StackFrame] = Deref(Value(5), false) |s.len
    Value(4): int = Offset(Value(6)) |s.len
    Value(7): bool = Call(Fun(360), [Value(1), Value(4)]) |index < s.len
    Value(8): bool = Call(Fun(436), [Value(3), Value(7)]) |index >= 0 & index < s.len
    Return(Some(Value(8))) |index >= 0 & index < s.len


function u0:0(i64, i64) -> b1 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = icmp sge v1, v2
    v4 = load.i64 v0+8
    v5 = icmp slt v1, v4
    v6 = band v3, v5
    return v6
}

fun exit(code: int)


fun print(str: &u8)


fun memcpy(dest: &u8, src: &u8, size: int)


fun memmove(dest: &u8, src: &u8, size: int)


fun memset(ptr: &u8, value: u8, size: int)


fun free(ptr: &u8)


fun realloc(ptr: &u8, size: int) -> &u8


fun alloc(size: int) -> &u8


fun foo

  Inst1[]
    Value(0): &u8 = Lit(String(Spam { source: Source(0), hash: ID(28793803289591898), range: 573..577 })) |"foo"
    Value(1): int = Lit(Int(11, 0)) |panic("foo")
    Value(2): int = Lit(Int(3, 0)) |panic("foo")
    Value(3): &u8 = Lit(String(Spam { source: Source(0), hash: ID(3362311186304783455), range: 577..605 })) |panic("foo")
    Call(Fun(446), [Value(1), Value(2), Value(3)]) |panic("foo")
    Call(Fun(445), [Value(0)]) |panic("foo")
    Call(Fun(447), []) |panic("foo")
    Return(None) |panic("foo")


function u0:0() fast {
    gv0 = symbol colocated u1:5
    gv1 = symbol colocated u1:6
    sig0 = (i64, i64, i64) fast
    sig1 = (i64) fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:13 sig1
    fn2 = colocated u0:6 sig2

block0:
    v0 = global_value.i64 gv0
    v1 = iconst.i64 11
    v2 = iconst.i64 3
    v3 = global_value.i64 gv1
    call fn0(v1, v2, v3)
    call fn1(v0)
    call fn2()
    return
}

fun goo

  Inst1[]
    Value(0): int = Lit(Int(8, 0)) |foo()
    Value(1): int = Lit(Int(3, 0)) |foo()
    Value(2): &u8 = Lit(String(Spam { source: Source(0), hash: ID(3362311186304783455), range: 605..633 })) |foo()
    Call(Fun(446), [Value(0), Value(1), Value(2)]) |foo()
    Call(Fun(487), []) |foo()
    Call(Fun(447), []) |foo()
    Return(None) |foo()


function u0:0() fast {
    gv0 = symbol colocated u1:6
    sig0 = (i64, i64, i64) fast
    sig1 = () fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:25 sig1
    fn2 = colocated u0:6 sig2

block0:
    v0 = iconst.i64 8
    v1 = iconst.i64 3
    v2 = global_value.i64 gv0
    call fn0(v0, v1, v2)
    call fn1()
    call fn2()
    return
}

fun main -> int

  Inst1[]
    Value(0): int = Lit(Int(4, 0)) |goo()
    Value(1): int = Lit(Int(3, 0)) |goo()
    Value(2): &u8 = Lit(String(Spam { source: Source(0), hash: ID(3362311186304783455), range: 633..661 })) |goo()
    Call(Fun(446), [Value(0), Value(1), Value(2)]) |goo()
    Call(Fun(486), []) |goo()
    Call(Fun(447), []) |goo()
    Value(3): int = Lit(Int(1, 0)) |1
    Return(Some(Value(3))) |return 1


function u0:0() -> i64 fast {
    gv0 = symbol colocated u1:6
    sig0 = (i64, i64, i64) fast
    sig1 = () fast
    sig2 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2

block0:
    v0 = iconst.i64 4
    v1 = iconst.i64 3
    v2 = global_value.i64 gv0
    call fn0(v0, v1, v2)
    call fn1()
    call fn2()
    v3 = iconst.i64 1
    return v3
}



  Inst1[Value(0), Value(1)]
    Value(2): int = Zeroed |
    Value(3): int = VarDecl(Value(2)) |
    Value(4): int = Call(Fun(485), []) |entry
    Value(4): int = Assign(Value(3)) |entry
    Return(Some(Value(3))) |


function u0:0(i64, i64) -> i64 fast {
    sig0 = () -> i64 fast
    fn0 = colocated u0:27 sig0

block0(v0: i64, v1: i64):
    v5 = iconst.i64 0
    v3 -> v5
    v2 = iconst.i64 0
    v4 = call fn0()
    return v4
}

output:
panic: foo
4:3 src/gen/test_project\root.mf
8:3 src/gen/test_project\root.mf
11:3 src/gen/test_project\root.mf
:end
fun print(s: &Self, value: &u8)

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): int = VarDecl(Value(2)) |i = 0
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst4[]
    Value(4): int = Cast(Value(1)) |value as int
    Value(5): int = Call(Fun(260), [Value(4), Value(3)]) |(value as int + i)
    Value(6): &u8 = Cast(Value(5)) |((value as int + i) as &u8)
    Value(7): u8 = Deref(Value(6), false) |*((value as int + i) as &u8)
    Value(8): u8 = VarDecl(Value(7)) |value = *((value as int + i) as &u8)
    Value(9): u8 = Lit(Uint(0, 8)) |0u8
    Value(10): bool = Call(Fun(306), [Value(8), Value(9)]) |value == 0u8
    JumpIfTrue(Value(10), Inst(15), []) |value == 0u8
    Jump(Inst(17), []) |

  Inst15[]
    Jump(Inst(5), []) |break

  Inst17[]
    Value(11): int = Lit(Int(1, 0)) |1
    Value(12): int = Call(Fun(260), [Value(3), Value(11)]) |i += 1
    Value(12): int = Assign(Value(3)) |i += 1
    Jump(Inst(4), []) |loop:
      let value = *((value as int + i) as &u8)
      if value == 0u8:
        break
      i += 1

  Inst5[]
    Call(Fun(473), [Value(0), Value(3)]) |s.reserve(i)
    Value(14): &Seq[u8] = Offset(Value(0)) |s.len
    Value(15): Seq[u8] = Deref(Value(14), false) |s.len
    Value(13): int = Offset(Value(15)) |s.len
    Value(16): &u8 = Call(Fun(474), [Value(0), Value(13)]) |s.get_unchecked(s.len)
    Call(Fun(442), [Value(16), Value(1), Value(3)]) |memcpy(s.get_unchecked(s.len), value, i)
    Value(18): &Seq[u8] = Offset(Value(0)) |s.len
    Value(19): Seq[u8] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[u8] = Offset(Value(0)) |s.len
    Value(22): Seq[u8] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Call(Fun(260), [Value(20), Value(3)]) |s.len += i
    Value(23): int = Assign(Value(17)) |s.len += i
    Return(None) |s.len += i


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    sig2 = (i64, i64, i64) windows_fastcall
    fn0 = colocated u0:3 sig0
    fn1 = colocated u0:1 sig1
    fn2 = u0:19 sig2

block0(v0: i64, v1: i64):
    v17 = iconst.i64 0
    v3 -> v17
    v2 = iconst.i64 0
    jump block1(v2)

block1(v4: i64):
    v10 -> v4
    v12 -> v4
    v5 = iadd.i64 v1, v4
    v6 = load.i8 v5
    v7 = iconst.i8 0
    v8 = icmp eq v6, v7
    brnz v8, block2
    jump block3

block2:
    jump block4

block3:
    v9 = iconst.i64 1
    v11 = iadd.i64 v10, v9
    jump block1(v11)

block4:
    call fn0(v0, v12)
    v13 = load.i64 v0+8
    v14 = call fn1(v0, v13)
    call fn2(v14, v1, v12)
    v15 = load.i64 v0+8
    v16 = iadd v15, v12
    store v16, v0+8
    return
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.data
    Value(4): Seq[u8] = Deref(Value(3), false) |s.data
    Value(2): &u8 = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(475), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &u8 = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun reserve(s: &Self, new_cap: int)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(4): Seq[u8] = Deref(Value(3), false) |s.cap
    Value(2): int = Offset(Value(4)) |s.cap
    Value(5): bool = Call(Fun(350), [Value(2), Value(1)]) |s.cap > new_cap
    JumpIfTrue(Value(5), Inst(6), []) |s.cap > new_cap
    Jump(Inst(8), []) |

  Inst6[]
    Return(None) |return

  Inst8[]
    Value(7): &Seq[u8] = Offset(Value(0)) |s.data
    Value(8): Seq[u8] = Deref(Value(7), false) |s.data
    Value(6): &u8 = Offset(Value(8)) |s.data
    Value(10): &Seq[u8] = Offset(Value(0)) |s.data
    Value(11): Seq[u8] = Deref(Value(10), false) |s.data
    Value(9): &u8 = Offset(Value(11)) |s.data
    Value(12): int = Call(Fun(475), []) |sizeof::[T]()
    Value(13): int = Call(Fun(280), [Value(1), Value(12)]) |new_cap * sizeof::[T]()
    Value(14): &u8 = Call(Fun(438), [Value(9), Value(13)]) |realloc(s.data, new_cap * sizeof::[T]())
    Value(14): &u8 = Assign(Value(6)) |s.data = realloc(s.data, new_cap * sizeof::[T]())
    Value(16): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(17): Seq[u8] = Deref(Value(16), false) |s.cap
    Value(15): int = Offset(Value(17)) |s.cap
    Value(1): int = Assign(Value(15)) |s.cap = new_cap
    Return(None) |s.cap = new_cap


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:23 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0+16
    v3 = icmp sgt v2, v1
    brnz v3, block1
    jump block2

block1:
    return

block2:
    v4 = iconst.i64 1
    v5 = imul.i64 v1, v4
    v6 = load.i64 v0
    v7 = call fn0(v6, v5)
    store v7, v0
    store.i64 v1, v0+16
    return
}

fun print_int(s: &Self, value: int)

  Inst1[Value(0), Value(1)]
    Value(2): int = VarDecl(Value(1)) |value = value
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst3[]
    Value(3): int = Lit(Int(0, 0)) |0
    Value(4): bool = Call(Fun(310), [Value(2), Value(3)]) |value == 0
    JumpIfTrue(Value(4), Inst(9), []) |value == 0
    Jump(Inst(11), []) |

  Inst9[]
    Jump(Inst(4), []) |break

  Inst11[]
    Value(5): int = Lit(Int(10, 0)) |10
    Value(6): int = Call(Fun(300), [Value(2), Value(5)]) |value % 10
    Value(7): int = VarDecl(Value(6)) |digit = value % 10
    Value(8): int = Lit(Int(10, 0)) |10
    Value(9): int = Call(Fun(290), [Value(2), Value(8)]) |value / 10
    Value(9): int = Assign(Value(2)) |value = value / 10
    Value(10): u32 = Call(Fun(96), [Value(7)]) |digit.u32()
    Value(11): i32 = Lit(Char('0')) |'0'
    Value(12): u32 = Call(Fun(258), [Value(10), Value(11)]) |(
    Value(13): u8 = Call(Fun(63), [Value(12)]) |(digit.u32() + '0').u8()
    Call(Fun(476), [Value(0), Value(13)]) |s.push((digit.u32() + '0').u8())
    Jump(Inst(3), []) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())

  Inst4[]
    Return(None) |loop:
      if value == 0:
        break
      var digit = value % 10
      value = value / 10
      s.push((digit.u32() + '0').u8())


function u0:0(i64, i64) fast {
    sig0 = (i64, i8) fast
    fn0 = colocated u0:5 sig0

block0(v0: i64, v1: i64):
    v19 = iconst.i64 0
    v18 -> v19
    v16 = iconst.i64 0
    v2 -> v16
    jump block1(v1, v18)

block1(v4: i64, v17: i64):
    v7 -> v4
    v9 -> v17
    v3 = iconst.i64 0
    v5 = icmp eq v4, v3
    brnz v5, block2
    jump block3

block2:
    jump block4

block3:
    v6 = iconst.i64 10
    v8 = srem.i64 v7, v6
    v10 = iconst.i64 10
    v11 = sdiv.i64 v7, v10
    v12 = ireduce.i32 v8
    v13 = iconst.i32 48
    v14 = iadd v12, v13
    v15 = ireduce.i8 v14
    call fn0(v0, v15)
    jump block1(v11, v8)

block4:
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[u8] = Offset(Value(0)) |s.len
    Value(4): Seq[u8] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(10): Seq[u8] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(14): Seq[u8] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[u8] = Offset(Value(0)) |s.len
    Value(17): Seq[u8] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[u8] = Offset(Value(0)) |s.data
    Value(22): Seq[u8] = Deref(Value(21), false) |s.data
    Value(20): &u8 = Offset(Value(22)) |s.data
    Value(24): &Seq[u8] = Offset(Value(0)) |s.data
    Value(25): Seq[u8] = Deref(Value(24), false) |s.data
    Value(23): &u8 = Offset(Value(25)) |s.data
    Value(27): &Seq[u8] = Offset(Value(0)) |s.cap
    Value(28): Seq[u8] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(475), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &u8 = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &u8 = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[u8] = Offset(Value(0)) |s.len
    Value(35): Seq[u8] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &u8 = Call(Fun(474), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): u8 = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): u8 = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[u8] = Offset(Value(0)) |s.len
    Value(40): Seq[u8] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i8) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:1 sig1

block0(v0: i64, v1: i8):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 1
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    store.i8 v1, v16
    store.i64 v4, v0+8
    return
}

fun pop_frame

  Inst1[]
    Value(0): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(2): &Seq[StackFrame] = Ref(Value(0)) |stacktrace.pop()
    Value(1): Option[StackFrame] = Call(Fun(477), [Value(2), Value(1)]) |stacktrace.pop()
    Return(None) |stacktrace.pop()


function u0:0() fast {
    ss0 = explicit_slot 32
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:7 sig0

block0:
    v0 = global_value.i64 gv0
    v1 = stack_addr.i64 ss0
    v2 = call fn0(v0, v1)
    return
}

fun pop(s: &Self) -> Option[T]

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(2), Value(5)]) |s.len == 0
    JumpIfTrue(Value(6), Inst(7), []) |s.len == 0
    Jump(Inst(9), []) |

  Inst7[]
    Value(7): Option[StackFrame] = Zeroed |return
    Value(8): Option[StackFrame] = Deref(Value(1), false) |return
    Value(7): Option[StackFrame] = Assign(Value(8)) |return
    Return(Some(Value(1))) |return

  Inst9[]
    Value(10): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(11): Seq[StackFrame] = Deref(Value(10), false) |s.len
    Value(9): int = Offset(Value(11)) |s.len
    Value(12): int = Lit(Int(1, 0)) |1
    Value(13): int = Call(Fun(270), [Value(9), Value(12)]) |s.len - 1
    Value(14): &StackFrame = Call(Fun(478), [Value(0), Value(13)]) |s.get_unchecked(s.len - 1)
    Value(15): StackFrame = Deref(Value(14), false) |*s.get_unchecked(s.len - 1)
    Value(16): StackFrame = VarDecl(Value(15)) |value = *s.get_unchecked(s.len - 1)
    Value(18): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(19): Seq[StackFrame] = Deref(Value(18), false) |s.len
    Value(17): int = Offset(Value(19)) |s.len
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.len
    Value(20): int = Offset(Value(22)) |s.len
    Value(23): int = Lit(Int(1, 0)) |1
    Value(24): int = Call(Fun(270), [Value(20), Value(23)]) |s.len -= 1
    Value(24): int = Assign(Value(17)) |s.len -= 1
    Value(25): Option[StackFrame] = Call(Fun(479), [Value(16), Value(25)]) |Option::some(value)
    Value(26): Option[StackFrame] = Deref(Value(1), false) |Option::some(value)
    Value(25): Option[StackFrame] = Assign(Value(26)) |Option::some(value)
    Return(Some(Value(1))) |Option::some(value)


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 32
    sig0 = (i64, i64) -> i64 fast
    sig1 = (i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:9 sig0
    fn1 = colocated u0:8 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = load.i64 v0+8
    v4 = icmp eq v3, v2
    brnz v4, block1
    jump block2

block1:
    v5 = iconst.i64 0
    store v5, v1
    store v5, v1+8
    store v5, v1+16
    store v5, v1+24
    return v1

block2:
    v6 = iconst.i64 1
    v7 = load.i64 v0+8
    v8 = isub v7, v6
    v9 = call fn0(v0, v8)
    v10 = stack_addr.i64 ss0
    v11 = load.i64 v9
    store v11, v10
    v12 = load.i64 v9+8
    store v12, v10+8
    v13 = load.i64 v9+16
    store v13, v10+16
    v14 = iconst.i64 1
    v15 = load.i64 v0+8
    v16 = isub v15, v14
    store v16, v0+8
    v17 = stack_addr.i64 ss0
    v18 = stack_addr.i64 ss1
    v19 = call fn1(v17, v18)
    v20 = stack_addr.i64 ss1
    v21 = load.i64 v20
    store v21, v1
    v22 = load.i64 v20+8
    store v22, v1+8
    v23 = load.i64 v20+16
    store v23, v1+16
    v24 = load.i64 v20+24
    store v24, v1+24
    return v1
}

fun some(value: T) -> Self

  Inst1[Value(0), Value(1)]
    Value(2): Option[StackFrame] = Zeroed |option: Self
    Value(3): Option[StackFrame] = VarDecl(Value(2)) |option: Self
    Value(4): StackFrame = Offset(Value(3)) |option.value
    Value(0): StackFrame = Assign(Value(4)) |option.value = value
    Value(5): bool = Offset(Value(3)) |option.is_some
    Value(6): bool = Lit(Bool(true)) |true
    Value(6): bool = Assign(Value(5)) |option.is_some = true
    Value(7): Option[StackFrame] = Deref(Value(1), false) |option
    Value(3): Option[StackFrame] = Assign(Value(7)) |option
    Return(Some(Value(1))) |option


function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 32

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    stack_store v2, ss0
    stack_store v2, ss0+8
    stack_store v2, ss0+16
    stack_store v2, ss0+24
    v3 = stack_addr.i64 ss0
    v4 = load.i64 v0
    store v4, v3
    v5 = load.i64 v0+8
    store v5, v3+8
    v6 = load.i64 v0+16
    store v6, v3+16
    v7 = bconst.b1 true
    v8 = bint.i8 v7
    stack_store v8, ss0+24
    v9 = stack_addr.i64 ss0
    v10 = load.i64 v9
    store v10, v1
    v11 = load.i64 v9+8
    store v11, v1+8
    v12 = load.i64 v9+16
    store v12, v1+16
    v13 = load.i64 v9+24
    store v13, v1+24
    return v1
}

fun get_unchecked(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.data
    Value(2): &StackFrame = Offset(Value(4)) |s.data
    Value(5): int = Cast(Value(2)) |s.data as int
    Value(6): int = Call(Fun(480), []) |sizeof::[T]()
    Value(7): int = Call(Fun(280), [Value(1), Value(6)]) |index * sizeof::[T]()
    Value(8): int = Call(Fun(260), [Value(5), Value(7)]) |(s.data as int + index * sizeof::[T]())
    Value(9): &StackFrame = Cast(Value(8)) |(s.data as int + index * sizeof::[T]()) as &T
    Return(Some(Value(9))) |(s.data as int + index * sizeof::[T]()) as &T


function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 24
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun sizeof[T] -> int


fun push_frame(line, column: int, file: &u8)

  Inst1[Value(0), Value(1), Value(2)]
    Value(3): StackFrame = Zeroed |frame: StackFrame
    Value(4): StackFrame = VarDecl(Value(3)) |frame: StackFrame
    Value(5): int = Offset(Value(4)) |frame.line
    Value(0): int = Assign(Value(5)) |frame.line = line
    Value(6): int = Offset(Value(4)) |frame.column
    Value(1): int = Assign(Value(6)) |frame.column = column
    Value(7): &u8 = Offset(Value(4)) |frame.file
    Value(2): &u8 = Assign(Value(7)) |frame.file = file
    Value(8): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(9): &Seq[StackFrame] = Ref(Value(8)) |stacktrace.push(frame)
    Call(Fun(481), [Value(9), Value(4)]) |stacktrace.push(frame)
    Return(None) |stacktrace.push(frame)


function u0:0(i64, i64, i64) fast {
    ss0 = explicit_slot 24
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64) fast
    fn0 = colocated u0:12 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = iconst.i64 0
    stack_store v3, ss0
    stack_store v3, ss0+8
    stack_store v3, ss0+16
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    v4 = global_value.i64 gv0
    v5 = stack_addr.i64 ss0
    call fn0(v4, v5)
    return
}

fun push(s: &Self, value: T)

  Inst1[Value(0), Value(1)]
    Value(3): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(4): Seq[StackFrame] = Deref(Value(3), false) |s.len
    Value(2): int = Offset(Value(4)) |s.len
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(260), [Value(2), Value(5)]) |s.len + 1
    Value(7): int = VarDecl(Value(6)) |new_len = s.len + 1
    Value(9): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(10): Seq[StackFrame] = Deref(Value(9), false) |s.cap
    Value(8): int = Offset(Value(10)) |s.cap
    Value(11): bool = Call(Fun(350), [Value(7), Value(8)]) |new_len > s.cap
    JumpIfTrue(Value(11), Inst(12), []) |new_len > s.cap
    Jump(Inst(14), []) |

  Inst12[]
    Value(13): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(14): Seq[StackFrame] = Deref(Value(13), false) |s.cap
    Value(12): int = Offset(Value(14)) |s.cap
    Value(16): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(17): Seq[StackFrame] = Deref(Value(16), false) |s.len
    Value(15): int = Offset(Value(17)) |s.len
    Value(18): int = Lit(Int(2, 0)) |2
    Value(19): int = Call(Fun(280), [Value(15), Value(18)]) |s.len * 2
    Value(19): int = Assign(Value(12)) |s.cap = s.len * 2
    Value(21): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(22): Seq[StackFrame] = Deref(Value(21), false) |s.data
    Value(20): &StackFrame = Offset(Value(22)) |s.data
    Value(24): &Seq[StackFrame] = Offset(Value(0)) |s.data
    Value(25): Seq[StackFrame] = Deref(Value(24), false) |s.data
    Value(23): &StackFrame = Offset(Value(25)) |s.data
    Value(27): &Seq[StackFrame] = Offset(Value(0)) |s.cap
    Value(28): Seq[StackFrame] = Deref(Value(27), false) |s.cap
    Value(26): int = Offset(Value(28)) |s.cap
    Value(29): int = Call(Fun(480), []) |sizeof::[T]()
    Value(30): int = Call(Fun(280), [Value(26), Value(29)]) |s.cap * sizeof::[T]()
    Value(31): &u8 = Call(Fun(438), [Value(23), Value(30)]) |realloc(s.data, s.cap * sizeof::[T]())
    Value(32): &StackFrame = Cast(Value(31)) |realloc(s.data, s.cap * sizeof::[T]()) as &T
    Value(32): &StackFrame = Assign(Value(20)) |s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
    Jump(Inst(14), []) |if new_len > s.cap:
      s.cap = s.len * 2
      s.data = realloc(s.data, s.cap * sizeof::[T]()) as &T
      pass

  Inst14[]
    Value(34): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(35): Seq[StackFrame] = Deref(Value(34), false) |s.len
    Value(33): int = Offset(Value(35)) |s.len
    Value(36): &StackFrame = Call(Fun(478), [Value(0), Value(33)]) |s.get_unchecked(s.len)
    Value(37): StackFrame = Deref(Value(36), true) |*s.get_unchecked(s.len)
    Value(1): StackFrame = Assign(Value(37)) |*s.get_unchecked(s.len) = value
    Value(39): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(40): Seq[StackFrame] = Deref(Value(39), false) |s.len
    Value(38): int = Offset(Value(40)) |s.len
    Value(7): int = Assign(Value(38)) |s.len = new_len
    Return(None) |s.len = new_len


function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64) -> i64 fast
    fn0 = u0:23 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = load.i64 v0+8
    v9 = imul v8, v7
    store v9, v0+16
    v10 = iconst.i64 24
    v11 = load.i64 v0+16
    v12 = imul v11, v10
    v13 = load.i64 v0
    v14 = call fn0(v13, v12)
    store v14, v0
    jump block2

block2:
    v15 = load.i64 v0+8
    v16 = call fn1(v0, v15)
    v17 = load.i64 v1
    store v17, v16
    v18 = load.i64 v1+8
    store v18, v16+8
    v19 = load.i64 v1+16
    store v19, v16+16
    store.i64 v4, v0+8
    return
}

fun panic(str: &u8)

  Inst1[Value(0)]
    Value(1): &u8 = Lit(String(Spam { source: Source(0), hash: ID(13432806085582464995), range: 127..135 })) |"panic: "
    Call(Fun(443), [Value(1)]) |print("panic: ")
    Call(Fun(443), [Value(0)]) |print(str)
    Value(2): &u8 = Lit(String(Spam { source: Source(0), hash: ID(655990), range: 137..139 })) |"\n"
    Call(Fun(443), [Value(2)]) |print("\n")
    Value(3): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(4): int = Offset(Value(3)) |stacktrace.len
    Value(5): int = Lit(Int(0, 0)) |0
    Value(6): bool = Call(Fun(310), [Value(4), Value(5)]) |stacktrace.len == 0
    JumpIfTrue(Value(6), Inst(11), []) |stacktrace.len == 0
    Jump(Inst(13), []) |

  Inst11[]
    Value(7): &u8 = Lit(String(Spam { source: Source(0), hash: ID(16979661566361224870), range: 214..289 })) |"no stacktrace available, use '-trace' when building to generate stactrace\n"
    Call(Fun(443), [Value(7)]) |print("no stacktrace available, use '-trace' when building to generate stactrace\n")
    Value(8): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(8)]) |exit(1)
    Return(None) |return

  Inst13[]
    Value(9): Seq[u8] = Zeroed |buffer: Seq[u8]
    Value(10): Seq[u8] = VarDecl(Value(9)) |buffer: Seq[u8]
    Value(11): int = Zeroed |i: int
    Value(12): int = VarDecl(Value(11)) |i: int
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst26[]
    Value(13): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(14): int = Offset(Value(13)) |stacktrace.len
    Value(15): bool = Call(Fun(330), [Value(12), Value(14)]) |i >= stacktrace.len
    JumpIfTrue(Value(15), Inst(33), []) |i >= stacktrace.len
    Jump(Inst(35), []) |

  Inst33[]
    Jump(Inst(27), []) |break

  Inst35[]
    Value(16): Seq[StackFrame] = GlobalLoad(Global(0)) |stacktrace
    Value(18): &Seq[StackFrame] = Ref(Value(16)) |stacktrace[i]
    Value(17): &StackFrame = Call(Fun(482), [Value(18), Value(12)]) |stacktrace[i]
    Value(19): StackFrame = Deref(Value(17), false) |stacktrace[i]
    Value(20): StackFrame = VarDecl(Value(19)) |frame = stacktrace[i]
    Value(21): int = Offset(Value(20)) |frame.line
    Value(22): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.line)
    Call(Fun(452), [Value(22), Value(21)]) |buffer.print_int(frame.line)
    Value(23): i32 = Lit(Char(':')) |':'
    Value(24): u8 = Call(Fun(59), [Value(23)]) |':'.u8()
    Value(25): &Seq[u8] = Ref(Value(10)) |buffer.push(':'.u8())
    Call(Fun(476), [Value(25), Value(24)]) |buffer.push(':'.u8())
    Value(26): int = Offset(Value(20)) |frame.column
    Value(27): &Seq[u8] = Ref(Value(10)) |buffer.print_int(frame.column)
    Call(Fun(452), [Value(27), Value(26)]) |buffer.print_int(frame.column)
    Value(28): i32 = Lit(Char(' ')) |' '
    Value(29): u8 = Call(Fun(59), [Value(28)]) |' '.u8()
    Value(30): &Seq[u8] = Ref(Value(10)) |buffer.push(' '.u8())
    Call(Fun(476), [Value(30), Value(29)]) |buffer.push(' '.u8())
    Value(31): &u8 = Offset(Value(20)) |frame.file
    Value(32): &Seq[u8] = Ref(Value(10)) |buffer.print(frame.file)
    Call(Fun(453), [Value(32), Value(31)]) |buffer.print(frame.file)
    Value(33): i32 = Lit(Char('\n')) |'\n'
    Value(34): u8 = Call(Fun(59), [Value(33)]) |'\n'.u8()
    Value(35): &Seq[u8] = Ref(Value(10)) |buffer.push('\n'.u8())
    Call(Fun(476), [Value(35), Value(34)]) |buffer.push('\n'.u8())
    Value(36): int = Lit(Int(1, 0)) |1
    Value(37): int = Call(Fun(260), [Value(12), Value(36)]) |i += 1
    Value(37): int = Assign(Value(12)) |i += 1
    Jump(Inst(26), []) |loop:
    if i >= stacktrace.len:
      break
    
    var frame = stacktrace[i]
    
    buffer.print_int(frame.line)
    buffer.push(':'.u8())
    buffer.print_int(frame.column)
    buffer.push(' '.u8())
    buffer.print(frame.file)
    buffer.push('\n'.u8())

    i += 1

  Inst27[]
    Value(38): i32 = Lit(Char('\u{0}')) |'\x00'
    Value(39): u8 = Call(Fun(59), [Value(38)]) |'\x00'.u8()
    Value(40): &Seq[u8] = Ref(Value(10)) |buffer.push('\x00'.u8())
    Call(Fun(476), [Value(40), Value(39)]) |buffer.push('\x00'.u8())
    Value(41): &u8 = Offset(Value(10)) |buffer.data
    Call(Fun(443), [Value(41)]) |print(buffer.data)
    Value(42): int = Lit(Int(1, 0)) |1
    Call(Fun(444), [Value(42)]) |exit(1)
    Return(None) |exit(1)


function u0:0(i64) fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 24
    gv0 = symbol colocated u1:1
    gv1 = symbol colocated u1:2
    gv2 = symbol colocated u1:0
    gv3 = symbol colocated u1:3
    gv4 = symbol colocated u1:0
    gv5 = symbol colocated u1:0
    sig0 = (i64) windows_fastcall
    sig1 = (i64) windows_fastcall
    sig2 = (i64) windows_fastcall
    sig3 = (i64) windows_fastcall
    sig4 = (i64) windows_fastcall
    sig5 = (i64, i64) -> i64 fast
    sig6 = (i64, i64) fast
    sig7 = (i64, i8) fast
    sig8 = (i64, i64) fast
    sig9 = (i64, i8) fast
    sig10 = (i64, i64) fast
    sig11 = (i64, i8) fast
    sig12 = (i64, i8) fast
    sig13 = (i64) windows_fastcall
    sig14 = (i64) windows_fastcall
    fn0 = u0:18 sig0
    fn1 = u0:18 sig1
    fn2 = u0:18 sig2
    fn3 = u0:18 sig3
    fn4 = u0:17 sig4
    fn5 = colocated u0:14 sig5
    fn6 = colocated u0:4 sig6
    fn7 = colocated u0:5 sig7
    fn8 = colocated u0:4 sig8
    fn9 = colocated u0:5 sig9
    fn10 = colocated u0:0 sig10
    fn11 = colocated u0:5 sig11
    fn12 = colocated u0:5 sig12
    fn13 = u0:18 sig13
    fn14 = u0:17 sig14

block0(v0: i64):
    v46 = iconst.i64 0
    v11 -> v46
    v45 -> v46
    v1 = global_value.i64 gv0
    call fn0(v1)
    call fn1(v0)
    v2 = global_value.i64 gv1
    call fn2(v2)
    v3 = global_value.i64 gv2
    v4 = iconst.i64 0
    v5 = load.i64 v3+8
    v6 = icmp eq v5, v4
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv3
    call fn3(v7)
    v8 = iconst.i64 1
    call fn4(v8)
    return

block2:
    v9 = iconst.i64 0
    stack_store v9, ss0
    stack_store v9, ss0+8
    stack_store v9, ss0+16
    v10 = iconst.i64 0
    jump block3(v10)

block3(v13: i64):
    v17 -> v13
    v12 = global_value.i64 gv4
    v14 = load.i64 v12+8
    v15 = icmp sge v13, v14
    brnz v15, block4
    jump block5

block4:
    jump block6

block5:
    v16 = global_value.i64 gv5
    v18 = call fn5(v16, v17)
    v19 = stack_addr.i64 ss1
    v20 = load.i64 v18
    store v20, v19
    v21 = load.i64 v18+8
    store v21, v19+8
    v22 = load.i64 v18+16
    store v22, v19+16
    v23 = stack_addr.i64 ss0
    v24 = stack_load.i64 ss1
    call fn6(v23, v24)
    v25 = iconst.i32 58
    v26 = ireduce.i8 v25
    v27 = stack_addr.i64 ss0
    call fn7(v27, v26)
    v28 = stack_addr.i64 ss0
    v29 = stack_load.i64 ss1+8
    call fn8(v28, v29)
    v30 = iconst.i32 32
    v31 = ireduce.i8 v30
    v32 = stack_addr.i64 ss0
    call fn9(v32, v31)
    v33 = stack_addr.i64 ss0
    v34 = stack_load.i64 ss1+16
    call fn10(v33, v34)
    v35 = iconst.i32 10
    v36 = ireduce.i8 v35
    v37 = stack_addr.i64 ss0
    call fn11(v37, v36)
    v38 = iconst.i64 1
    v39 = iadd.i64 v17, v38
    jump block3(v39)

block6:
    v40 = iconst.i32 0
    v41 = ireduce.i8 v40
    v42 = stack_addr.i64 ss0
    call fn12(v42, v41)
    v43 = stack_load.i64 ss0
    call fn13(v43)
    v44 = iconst.i64 1
    call fn14(v44)
    return
}

fun __index__(s: &Self, index: int) -> &T

  Inst1[Value(0), Value(1)]
    Call(Fun(483), [Value(0), Value(1)]) |s.assert_in_bounds(index)
    Value(2): &StackFrame = Call(Fun(478), [Value(0), Value(1)]) |s.get_unchecked(index)
    Return(Some(Value(2))) |s.get_unchecked(index)


function u0:0(i64, i64) -> i64 fast {
    sig0 = (i64, i64) fast
    sig1 = (i64, i64) -> i64 fast
    fn0 = colocated u0:15 sig0
    fn1 = colocated u0:9 sig1

block0(v0: i64, v1: i64):
    call fn0(v0, v1)
    v2 = call fn1(v0, v1)
    return v2
}

fun assert_in_bounds(s: &Self, index: int)

  Inst1[Value(0), Value(1)]
    Value(2): bool = Call(Fun(484), [Value(0), Value(1)]) |s.in_bounds(index)
    Value(3): bool = Call(Fun(251), [Value(2)]) |!s.in_bounds(index)
    JumpIfTrue(Value(3), Inst(4), []) |!s.in_bounds(index)
    Jump(Inst(6), []) |

  Inst4[]
    Value(4): &u8 = Lit(String(Spam { source: Source(0), hash: ID(6484216913505728610), range: 473..493 })) |"index out of bounds"
    Call(Fun(445), [Value(4)]) |panic("index out of bounds")
    Jump(Inst(6), []) |if !s.in_bounds(index):
      panic("index out of bounds")

  Inst6[]
    Return(None) |if !s.in_bounds(index):
      panic("index out of bounds")


function u0:0(i64, i64) fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64, i64) -> b1 fast
    sig1 = (i64) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:13 sig1

block0(v0: i64, v1: i64):
    v2 = call fn0(v0, v1)
    v3 = bint.i8 v2
    v4 = icmp_imm eq v3, 0
    brnz v4, block1
    jump block2

block1:
    v5 = global_value.i64 gv0
    call fn1(v5)
    jump block2

block2:
    return
}

fun in_bounds(s: &Self, index: int) -> bool

  Inst1[Value(0), Value(1)]
    Value(2): int = Lit(Int(0, 0)) |0
    Value(3): bool = Call(Fun(330), [Value(1), Value(2)]) |index >= 0
    Value(5): &Seq[StackFrame] = Offset(Value(0)) |s.len
    Value(6): Seq[StackFrame] = Deref(Value(5), false) |s.len
    Value(4): int = Offset(Value(6)) |s.len
    Value(7): bool = Call(Fun(360), [Value(1), Value(4)]) |index < s.len
    Value(8): bool = Call(Fun(436), [Value(3), Value(7)]) |index >= 0 & index < s.len
    Return(Some(Value(8))) |index >= 0 & index < s.len


function u0:0(i64, i64) -> b1 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = icmp sge v1, v2
    v4 = load.i64 v0+8
    v5 = icmp slt v1, v4
    v6 = band v3, v5
    return v6
}

fun exit(code: int)


fun print(str: &u8)


fun memcpy(dest: &u8, src: &u8, size: int)


fun memmove(dest: &u8, src: &u8, size: int)


fun memset(ptr: &u8, value: u8, size: int)


fun free(ptr: &u8)


fun realloc(ptr: &u8, size: int) -> &u8


fun alloc(size: int) -> &u8


fun main -> int

  Inst1[]
    Value(0): int = Lit(Int(10, 0)) |10
    Value(1): int = VarDecl(Value(0)) |v = 10
    Value(3): int = Lit(Int(24, 0)) |fib_loop(v)
    Value(4): int = Lit(Int(10, 0)) |fib_loop(v)
    Value(5): &u8 = Lit(String(Spam { source: Source(0), hash: ID(3362311186304783455), range: 569..597 })) |fib_loop(v)
    Call(Fun(446), [Value(3), Value(4), Value(5)]) |fib_loop(v)
    Value(2): int = Call(Fun(486), [Value(1)]) |fib_loop(v)
    Call(Fun(447), []) |fib_loop(v)
    Value(7): int = Lit(Int(24, 0)) |fib(v)
    Value(8): int = Lit(Int(24, 0)) |fib(v)
    Value(9): &u8 = Lit(String(Spam { source: Source(0), hash: ID(3362311186304783455), range: 597..625 })) |fib(v)
    Call(Fun(446), [Value(7), Value(8), Value(9)]) |fib(v)
    Value(6): int = Call(Fun(485), [Value(1)]) |fib(v)
    Call(Fun(447), []) |fib(v)
    Value(10): int = Call(Fun(270), [Value(2), Value(6)]) |fib_loop(v) - fib(v)
    Return(Some(Value(10))) |return fib_loop(v) - fib(v)


function u0:0() -> i64 fast {
    gv0 = symbol colocated u1:5
    gv1 = symbol colocated u1:5
    sig0 = (i64, i64, i64) fast
    sig1 = (i64) -> i64 fast
    sig2 = () fast
    sig3 = (i64, i64, i64) fast
    sig4 = (i64) -> i64 fast
    sig5 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:26 sig1
    fn2 = colocated u0:6 sig2
    fn3 = colocated u0:11 sig3
    fn4 = colocated u0:27 sig4
    fn5 = colocated u0:6 sig5

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 24
    v2 = iconst.i64 10
    v3 = global_value.i64 gv0
    call fn0(v1, v2, v3)
    v4 = call fn1(v0)
    call fn2()
    v5 = iconst.i64 24
    v6 = iconst.i64 24
    v7 = global_value.i64 gv1
    call fn3(v5, v6, v7)
    v8 = call fn4(v0)
    call fn5()
    v9 = isub v4, v8
    return v9
}

fun fib_loop(v: int) -> int

  Inst1[Value(0)]
    Value(1): int = Lit(Int(1, 0)) |1
    Value(2): int = VarDecl(Value(1)) |a, b, c = 1
    Value(3): int = VarDecl(Value(2)) |a, b, c = 1
    Value(4): int = VarDecl(Value(2)) |a, b, c = 1
    Value(5): int = VarDecl(Value(0)) |v = v
    Jump(Inst(7), []) |loop'a:
    c = a + b
    a = b
    b = c
    v = v - 1
    if v == 1:
      break'a

  Inst7[]
    Value(6): int = Call(Fun(260), [Value(2), Value(3)]) |a + b
    Value(6): int = Assign(Value(4)) |c = a + b
    Value(3): int = Assign(Value(2)) |a = b
    Value(4): int = Assign(Value(3)) |b = c
    Value(7): int = Lit(Int(1, 0)) |1
    Value(8): int = Call(Fun(270), [Value(5), Value(7)]) |v - 1
    Value(8): int = Assign(Value(5)) |v = v - 1
    Value(9): int = Lit(Int(1, 0)) |1
    Value(10): bool = Call(Fun(310), [Value(5), Value(9)]) |v == 1
    JumpIfTrue(Value(10), Inst(20), []) |v == 1
    Jump(Inst(22), []) |

  Inst20[]
    Jump(Inst(8), []) |break'a

  Inst22[]
    Jump(Inst(7), []) |loop'a:
    c = a + b
    a = b
    b = c
    v = v - 1
    if v == 1:
      break'a

  Inst8[]
    Return(Some(Value(4))) |return c


function u0:0(i64) -> i64 fast {
block0(v0: i64):
    v19 = iconst.i64 0
    v5 -> v19
    v18 = iconst.i64 0
    v4 -> v18
    v17 = iconst.i64 0
    v3 -> v17
    v16 = iconst.i64 0
    v2 -> v16
    v1 = iconst.i64 1
    jump block1(v1, v1, v1, v0)

block1(v6: i64, v7: i64, v9: i64, v11: i64):
    v20 -> v7
    v8 = iadd v6, v7
    v15 -> v8
    v21 -> v8
    v22 -> v8
    v10 = iconst.i64 1
    v12 = isub v11, v10
    v23 -> v12
    v13 = iconst.i64 1
    v14 = icmp eq v12, v13
    brnz v14, block2
    jump block3

block2:
    jump block4

block3:
    jump block1(v20, v21, v22, v23)

block4:
    return v15
}

fun fib(v: int) -> int

  Inst1[Value(0)]
    Value(1): int = Lit(Int(2, 0)) |2
    Value(2): bool = Call(Fun(360), [Value(0), Value(1)]) |v < 2
    JumpIfTrue(Value(2), Inst(4), []) |v < 2
    Jump(Inst(7), []) |:

  Inst4[]
    Value(3): int = Lit(Int(1, 0)) |1
    Jump(Inst(6), [Value(3)]) |if v < 2:
    1
  else:
    fib(v - 1) + fib(v - 2)

  Inst7[]
    Value(5): int = Lit(Int(1, 0)) |1
    Value(6): int = Call(Fun(270), [Value(0), Value(5)]) |v - 1
    Value(8): int = Lit(Int(6, 0)) |fib(v - 1)
    Value(9): int = Lit(Int(5, 0)) |fib(v - 1)
    Value(10): &u8 = Lit(String(Spam { source: Source(0), hash: ID(3362311186304783455), range: 625..653 })) |fib(v - 1)
    Call(Fun(446), [Value(8), Value(9), Value(10)]) |fib(v - 1)
    Value(7): int = Call(Fun(485), [Value(6)]) |fib(v - 1)
    Call(Fun(447), []) |fib(v - 1)
    Value(11): int = Lit(Int(2, 0)) |2
    Value(12): int = Call(Fun(270), [Value(0), Value(11)]) |v - 2
    Value(14): int = Lit(Int(6, 0)) |fib(v - 2)
    Value(15): int = Lit(Int(18, 0)) |fib(v - 2)
    Value(16): &u8 = Lit(String(Spam { source: Source(0), hash: ID(3362311186304783455), range: 653..681 })) |fib(v - 2)
    Call(Fun(446), [Value(14), Value(15), Value(16)]) |fib(v - 2)
    Value(13): int = Call(Fun(485), [Value(12)]) |fib(v - 2)
    Call(Fun(447), []) |fib(v - 2)
    Value(17): int = Call(Fun(260), [Value(7), Value(13)]) |fib(v - 1) + fib(v - 2)
    Jump(Inst(6), [Value(17)]) |fib(v - 1) + fib(v - 2)

  Inst6[Value(4)]
    Return(Some(Value(4))) |return if v < 2:
    1
  else:
    fib(v - 1) + fib(v - 2)


function u0:0(i64) -> i64 fast {
    gv0 = symbol colocated u1:5
    gv1 = symbol colocated u1:5
    sig0 = (i64, i64, i64) fast
    sig1 = (i64) -> i64 fast
    sig2 = () fast
    sig3 = (i64, i64, i64) fast
    sig4 = (i64) -> i64 fast
    sig5 = () fast
    fn0 = colocated u0:11 sig0
    fn1 = colocated u0:27 sig1
    fn2 = colocated u0:6 sig2
    fn3 = colocated u0:11 sig3
    fn4 = colocated u0:27 sig4
    fn5 = colocated u0:6 sig5

block0(v0: i64):
    v2 = iconst.i64 2
    v3 = icmp slt v0, v2
    brnz v3, block1
    jump block2

block1:
    v4 = iconst.i64 1
    jump block3(v4)

block2:
    v5 = iconst.i64 1
    v6 = isub.i64 v0, v5
    v7 = iconst.i64 6
    v8 = iconst.i64 5
    v9 = global_value.i64 gv0
    call fn0(v7, v8, v9)
    v10 = call fn1(v6)
    call fn2()
    v11 = iconst.i64 2
    v12 = isub.i64 v0, v11
    v13 = iconst.i64 6
    v14 = iconst.i64 18
    v15 = global_value.i64 gv1
    call fn3(v13, v14, v15)
    v16 = call fn4(v12)
    call fn5()
    v17 = iadd v10, v16
    jump block3(v17)

block3(v1: i64):
    return v1
}



  Inst1[Value(0), Value(1)]
    Value(2): int = Zeroed |
    Value(3): int = VarDecl(Value(2)) |
    Value(4): int = Call(Fun(487), []) |entry
    Value(4): int = Assign(Value(3)) |entry
    Return(Some(Value(3))) |


function u0:0(i64, i64) -> i64 fast {
    sig0 = () -> i64 fast
    fn0 = colocated u0:25 sig0

block0(v0: i64, v1: i64):
    v5 = iconst.i64 0
    v3 -> v5
    v2 = iconst.i64 0
    v4 = call fn0()
    return v4
}

output:
:end
