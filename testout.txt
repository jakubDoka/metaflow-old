Dummy1
[(Dummy(1), 0)]
0
Dummy(1)
[]
[(Dummy(1), 0)]
Ok(Arguments { filename: "file", flags: ["flag", "flag"], field_flags: [("flag", "value")], args: ["arg", "arg"] })
Ok(Arguments { filename: "file", flags: [], field_flags: [], args: ["string value"] })
Token { kind: Use, spam: "use", line_data: LineData { line: 1, column: 0, file_name: "test_code.pmh" } }
Token { kind: Extern, spam: "extern", line_data: LineData { line: 1, column: 4, file_name: "test_code.pmh" } }
Token { kind: String([102, 111, 111, 47, 109, 111, 111]), spam: "\"foo/moo\"", line_data: LineData { line: 1, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 1, column: 21, file_name: "test_code.pmh" } }
Token { kind: Use, spam: "use", line_data: LineData { line: 2, column: 0, file_name: "test_code.pmh" } }
Token { kind: Extern, spam: "extern", line_data: LineData { line: 2, column: 4, file_name: "test_code.pmh" } }
Token { kind: String([102, 111, 111, 47, 109, 111, 111, 47, 103, 111, 111]), spam: "\"foo/moo/goo\"", line_data: LineData { line: 2, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 2, column: 25, file_name: "test_code.pmh" } }
Token { kind: Use, spam: "use", line_data: LineData { line: 3, column: 0, file_name: "test_code.pmh" } }
Token { kind: String([102, 111, 111, 47, 109, 111, 111]), spam: "\"foo/moo\"", line_data: LineData { line: 3, column: 4, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 3, column: 14, file_name: "test_code.pmh" } }
Token { kind: Use, spam: "use", line_data: LineData { line: 4, column: 0, file_name: "test_code.pmh" } }
Token { kind: String([102, 111, 111, 47, 103, 111, 111, 47, 110, 111, 111]), spam: "\"foo/goo/noo\"", line_data: LineData { line: 4, column: 4, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 4, column: 18, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 5, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 6, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "flo", line_data: LineData { line: 6, column: 4, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 6, column: 7, file_name: "test_code.pmh" } }
Token { kind: Pass, spam: "pass", line_data: LineData { line: 6, column: 9, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 6, column: 14, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 7, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 8, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "foo", line_data: LineData { line: 8, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, spam: "(", line_data: LineData { line: 8, column: 7, file_name: "test_code.pmh" } }
Token { kind: RPar, spam: ")", line_data: LineData { line: 8, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 8, column: 9, file_name: "test_code.pmh" } }
Token { kind: Pass, spam: "pass", line_data: LineData { line: 8, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 8, column: 16, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 9, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 10, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "goo", line_data: LineData { line: 10, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, spam: "(", line_data: LineData { line: 10, column: 7, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 10, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 10, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i8", line_data: LineData { line: 10, column: 11, file_name: "test_code.pmh" } }
Token { kind: Comma, spam: ",", line_data: LineData { line: 10, column: 13, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "b", line_data: LineData { line: 10, column: 15, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 10, column: 16, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i8", line_data: LineData { line: 10, column: 18, file_name: "test_code.pmh" } }
Token { kind: RPar, spam: ")", line_data: LineData { line: 10, column: 20, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 10, column: 21, file_name: "test_code.pmh" } }
Token { kind: Pass, spam: "pass", line_data: LineData { line: 10, column: 23, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 10, column: 28, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 11, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 12, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "loo", line_data: LineData { line: 12, column: 4, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 12, column: 7, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 12, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "noo", line_data: LineData { line: 13, column: 2, file_name: "test_code.pmh" } }
Token { kind: DoubleColon, spam: "::", line_data: LineData { line: 13, column: 5, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "loo", line_data: LineData { line: 13, column: 7, file_name: "test_code.pmh" } }
Token { kind: DoubleColon, spam: "::", line_data: LineData { line: 13, column: 10, file_name: "test_code.pmh" } }
Token { kind: LBra, spam: "[", line_data: LineData { line: 13, column: 12, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i8", line_data: LineData { line: 13, column: 13, file_name: "test_code.pmh" } }
Token { kind: RBra, spam: "]", line_data: LineData { line: 13, column: 15, file_name: "test_code.pmh" } }
Token { kind: LPar, spam: "(", line_data: LineData { line: 13, column: 16, file_name: "test_code.pmh" } }
Token { kind: RPar, spam: ")", line_data: LineData { line: 13, column: 17, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 13, column: 19, file_name: "test_code.pmh" } }
Token { kind: Pass, spam: "pass", line_data: LineData { line: 14, column: 2, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 14, column: 7, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 15, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 16, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "main", line_data: LineData { line: 16, column: 4, file_name: "test_code.pmh" } }
Token { kind: RArrow, spam: "->", line_data: LineData { line: 16, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 16, column: 12, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 16, column: 15, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 16, column: 17, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 17, column: 2, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), spam: "10", line_data: LineData { line: 17, column: 9, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "+", line_data: LineData { line: 17, column: 12, file_name: "test_code.pmh" } }
Token { kind: Int(4, 64), spam: "4", line_data: LineData { line: 17, column: 14, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "-", line_data: LineData { line: 17, column: 16, file_name: "test_code.pmh" } }
Token { kind: Int(2, 64), spam: "2", line_data: LineData { line: 17, column: 18, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "*", line_data: LineData { line: 17, column: 20, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), spam: "1", line_data: LineData { line: 17, column: 22, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "+", line_data: LineData { line: 17, column: 24, file_name: "test_code.pmh" } }
Token { kind: Int(8, 64), spam: "8", line_data: LineData { line: 17, column: 26, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 17, column: 28, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 18, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 19, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "operator_stress_test", line_data: LineData { line: 19, column: 4, file_name: "test_code.pmh" } }
Token { kind: RArrow, spam: "->", line_data: LineData { line: 19, column: 25, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 19, column: 28, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 19, column: 31, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 19, column: 33, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 20, column: 2, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), spam: "10", line_data: LineData { line: 20, column: 9, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "+", line_data: LineData { line: 20, column: 12, file_name: "test_code.pmh" } }
Token { kind: Int(2, 64), spam: "2", line_data: LineData { line: 20, column: 14, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "*", line_data: LineData { line: 20, column: 16, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), spam: "1", line_data: LineData { line: 20, column: 18, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "-", line_data: LineData { line: 20, column: 20, file_name: "test_code.pmh" } }
Token { kind: Int(9, 64), spam: "9", line_data: LineData { line: 20, column: 22, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "|", line_data: LineData { line: 20, column: 24, file_name: "test_code.pmh" } }
Token { kind: Int(4, 64), spam: "4", line_data: LineData { line: 20, column: 26, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "&", line_data: LineData { line: 20, column: 28, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), spam: "1", line_data: LineData { line: 20, column: 30, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "^", line_data: LineData { line: 20, column: 32, file_name: "test_code.pmh" } }
Token { kind: Int(2, 64), spam: "2", line_data: LineData { line: 20, column: 34, file_name: "test_code.pmh" } }
Token { kind: Op, spam: ">>", line_data: LineData { line: 20, column: 36, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), spam: "1", line_data: LineData { line: 20, column: 39, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "<<", line_data: LineData { line: 20, column: 41, file_name: "test_code.pmh" } }
Token { kind: Int(7, 64), spam: "7", line_data: LineData { line: 20, column: 44, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "min", line_data: LineData { line: 20, column: 46, file_name: "test_code.pmh" } }
Token { kind: Int(20, 64), spam: "20", line_data: LineData { line: 20, column: 50, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "max", line_data: LineData { line: 20, column: 53, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), spam: "10", line_data: LineData { line: 20, column: 57, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 20, column: 60, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 21, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 22, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "conditional", line_data: LineData { line: 22, column: 4, file_name: "test_code.pmh" } }
Token { kind: RArrow, spam: "->", line_data: LineData { line: 22, column: 16, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 22, column: 19, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 22, column: 22, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 22, column: 24, file_name: "test_code.pmh" } }
Token { kind: If, spam: "if", line_data: LineData { line: 23, column: 2, file_name: "test_code.pmh" } }
Token { kind: Bool(false), spam: "false", line_data: LineData { line: 23, column: 5, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 23, column: 10, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 23, column: 12, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 24, column: 4, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), spam: "10", line_data: LineData { line: 24, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 24, column: 14, file_name: "test_code.pmh" } }
Token { kind: Elif, spam: "elif", line_data: LineData { line: 25, column: 2, file_name: "test_code.pmh" } }
Token { kind: Bool(true), spam: "true", line_data: LineData { line: 25, column: 7, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 25, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 25, column: 13, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 26, column: 4, file_name: "test_code.pmh" } }
Token { kind: If, spam: "if", line_data: LineData { line: 26, column: 11, file_name: "test_code.pmh" } }
Token { kind: Bool(true), spam: "true", line_data: LineData { line: 26, column: 14, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 26, column: 18, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), spam: "10", line_data: LineData { line: 26, column: 20, file_name: "test_code.pmh" } }
Token { kind: Else, spam: "else", line_data: LineData { line: 26, column: 23, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 26, column: 27, file_name: "test_code.pmh" } }
Token { kind: Int(20, 64), spam: "20", line_data: LineData { line: 26, column: 29, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 26, column: 32, file_name: "test_code.pmh" } }
Token { kind: Else, spam: "else", line_data: LineData { line: 27, column: 2, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 27, column: 6, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 27, column: 8, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 28, column: 4, file_name: "test_code.pmh" } }
Token { kind: Int(0, 64), spam: "0", line_data: LineData { line: 28, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 28, column: 13, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 29, column: 1, file_name: "test_code.pmh" } }
Token { kind: Attr, spam: "attr", line_data: LineData { line: 30, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "inline", line_data: LineData { line: 30, column: 5, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 30, column: 12, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "always", line_data: LineData { line: 30, column: 14, file_name: "test_code.pmh" } }
Token { kind: Comma, spam: ",", line_data: LineData { line: 30, column: 20, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "call_conv", line_data: LineData { line: 30, column: 22, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 30, column: 32, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "cold", line_data: LineData { line: 30, column: 34, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 30, column: 39, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 31, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "inline_fn", line_data: LineData { line: 31, column: 4, file_name: "test_code.pmh" } }
Token { kind: RArrow, spam: "->", line_data: LineData { line: 31, column: 14, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "u32", line_data: LineData { line: 31, column: 17, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 31, column: 20, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 31, column: 22, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 32, column: 2, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), spam: "10", line_data: LineData { line: 32, column: 9, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 32, column: 12, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 33, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 34, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "fib", line_data: LineData { line: 34, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, spam: "(", line_data: LineData { line: 34, column: 7, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "v", line_data: LineData { line: 34, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 34, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 34, column: 11, file_name: "test_code.pmh" } }
Token { kind: RPar, spam: ")", line_data: LineData { line: 34, column: 14, file_name: "test_code.pmh" } }
Token { kind: RArrow, spam: "->", line_data: LineData { line: 34, column: 16, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 34, column: 19, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 34, column: 22, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 34, column: 24, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 35, column: 2, file_name: "test_code.pmh" } }
Token { kind: If, spam: "if", line_data: LineData { line: 35, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "v", line_data: LineData { line: 35, column: 12, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "==", line_data: LineData { line: 35, column: 14, file_name: "test_code.pmh" } }
Token { kind: Int(0, 64), spam: "0", line_data: LineData { line: 35, column: 17, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "|", line_data: LineData { line: 35, column: 19, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "v", line_data: LineData { line: 35, column: 21, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "==", line_data: LineData { line: 35, column: 23, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), spam: "1", line_data: LineData { line: 35, column: 26, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 35, column: 27, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 35, column: 29, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), spam: "1", line_data: LineData { line: 36, column: 4, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 36, column: 6, file_name: "test_code.pmh" } }
Token { kind: Else, spam: "else", line_data: LineData { line: 37, column: 2, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 37, column: 6, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 37, column: 8, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "fib", line_data: LineData { line: 38, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, spam: "(", line_data: LineData { line: 38, column: 7, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "v", line_data: LineData { line: 38, column: 8, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "-", line_data: LineData { line: 38, column: 10, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), spam: "1", line_data: LineData { line: 38, column: 12, file_name: "test_code.pmh" } }
Token { kind: RPar, spam: ")", line_data: LineData { line: 38, column: 13, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "+", line_data: LineData { line: 38, column: 15, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "fib", line_data: LineData { line: 38, column: 17, file_name: "test_code.pmh" } }
Token { kind: LPar, spam: "(", line_data: LineData { line: 38, column: 20, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "v", line_data: LineData { line: 38, column: 21, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "-", line_data: LineData { line: 38, column: 23, file_name: "test_code.pmh" } }
Token { kind: Int(2, 64), spam: "2", line_data: LineData { line: 38, column: 25, file_name: "test_code.pmh" } }
Token { kind: RPar, spam: ")", line_data: LineData { line: 38, column: 26, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 38, column: 28, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 39, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 40, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "fib_loop", line_data: LineData { line: 40, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, spam: "(", line_data: LineData { line: 40, column: 12, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "v", line_data: LineData { line: 40, column: 13, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 40, column: 14, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 40, column: 16, file_name: "test_code.pmh" } }
Token { kind: RPar, spam: ")", line_data: LineData { line: 40, column: 19, file_name: "test_code.pmh" } }
Token { kind: RArrow, spam: "->", line_data: LineData { line: 40, column: 21, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 40, column: 24, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 40, column: 27, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 40, column: 29, file_name: "test_code.pmh" } }
Token { kind: Var, spam: "var", line_data: LineData { line: 41, column: 2, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 41, column: 6, file_name: "test_code.pmh" } }
Token { kind: Comma, spam: ",", line_data: LineData { line: 41, column: 7, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "b", line_data: LineData { line: 41, column: 9, file_name: "test_code.pmh" } }
Token { kind: Comma, spam: ",", line_data: LineData { line: 41, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "c", line_data: LineData { line: 41, column: 12, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 41, column: 14, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), spam: "1", line_data: LineData { line: 41, column: 16, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 41, column: 18, file_name: "test_code.pmh" } }
Token { kind: Loop, spam: "loop", line_data: LineData { line: 42, column: 2, file_name: "test_code.pmh" } }
Token { kind: Label, spam: "'a", line_data: LineData { line: 42, column: 6, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 42, column: 8, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 42, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "c", line_data: LineData { line: 43, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 43, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 43, column: 8, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "+", line_data: LineData { line: 43, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "b", line_data: LineData { line: 43, column: 12, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 43, column: 14, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 44, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 44, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "b", line_data: LineData { line: 44, column: 8, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 44, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "b", line_data: LineData { line: 45, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 45, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "c", line_data: LineData { line: 45, column: 8, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 45, column: 10, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "v", line_data: LineData { line: 46, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 46, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "v", line_data: LineData { line: 46, column: 8, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "-", line_data: LineData { line: 46, column: 10, file_name: "test_code.pmh" } }
Token { kind: Int(1, 64), spam: "1", line_data: LineData { line: 46, column: 12, file_name: "test_code.pmh" } }
Token { kind: Indent(2), spam: "\n    ", line_data: LineData { line: 46, column: 14, file_name: "test_code.pmh" } }
Token { kind: If, spam: "if", line_data: LineData { line: 47, column: 4, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "v", line_data: LineData { line: 47, column: 7, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "==", line_data: LineData { line: 47, column: 9, file_name: "test_code.pmh" } }
Token { kind: Int(0, 64), spam: "0", line_data: LineData { line: 47, column: 12, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 47, column: 13, file_name: "test_code.pmh" } }
Token { kind: Indent(3), spam: "\n      ", line_data: LineData { line: 47, column: 15, file_name: "test_code.pmh" } }
Token { kind: Break, spam: "break", line_data: LineData { line: 48, column: 6, file_name: "test_code.pmh" } }
Token { kind: Label, spam: "'a", line_data: LineData { line: 48, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 48, column: 14, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 49, column: 2, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "c", line_data: LineData { line: 49, column: 9, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 49, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 50, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 51, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "unary_operators", line_data: LineData { line: 51, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, spam: "(", line_data: LineData { line: 51, column: 19, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 51, column: 20, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 51, column: 21, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 51, column: 23, file_name: "test_code.pmh" } }
Token { kind: RPar, spam: ")", line_data: LineData { line: 51, column: 26, file_name: "test_code.pmh" } }
Token { kind: RArrow, spam: "->", line_data: LineData { line: 51, column: 28, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 51, column: 31, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 51, column: 34, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 51, column: 36, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 52, column: 2, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "-", line_data: LineData { line: 52, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 52, column: 10, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "+", line_data: LineData { line: 52, column: 12, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "~", line_data: LineData { line: 52, column: 14, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 52, column: 15, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "+", line_data: LineData { line: 52, column: 17, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "!", line_data: LineData { line: 52, column: 19, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 52, column: 20, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "+", line_data: LineData { line: 52, column: 22, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "++", line_data: LineData { line: 52, column: 24, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 52, column: 26, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "+", line_data: LineData { line: 52, column: 28, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "--", line_data: LineData { line: 52, column: 30, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 52, column: 32, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 52, column: 34, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 53, column: 1, file_name: "test_code.pmh" } }
Token { kind: Struct, spam: "struct", line_data: LineData { line: 54, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "Foo", line_data: LineData { line: 54, column: 7, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 54, column: 10, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 54, column: 12, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 55, column: 2, file_name: "test_code.pmh" } }
Token { kind: Comma, spam: ",", line_data: LineData { line: 55, column: 3, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "b", line_data: LineData { line: 55, column: 5, file_name: "test_code.pmh" } }
Token { kind: Comma, spam: ",", line_data: LineData { line: 55, column: 6, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "c", line_data: LineData { line: 55, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 55, column: 9, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 55, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 55, column: 15, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 56, column: 1, file_name: "test_code.pmh" } }
Token { kind: Struct, spam: "struct", line_data: LineData { line: 57, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "Goo", line_data: LineData { line: 57, column: 7, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 57, column: 10, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 57, column: 12, file_name: "test_code.pmh" } }
Token { kind: Embed, spam: "embed", line_data: LineData { line: 58, column: 2, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "foo", line_data: LineData { line: 58, column: 8, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 58, column: 11, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "Foo", line_data: LineData { line: 58, column: 13, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 58, column: 17, file_name: "test_code.pmh" } }
Token { kind: Attr, spam: "attr", line_data: LineData { line: 59, column: 2, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "something", line_data: LineData { line: 59, column: 7, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 59, column: 17, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "gva", line_data: LineData { line: 60, column: 2, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 60, column: 5, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 60, column: 7, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 60, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 61, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 62, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "strings", line_data: LineData { line: 62, column: 4, file_name: "test_code.pmh" } }
Token { kind: RArrow, spam: "->", line_data: LineData { line: 62, column: 12, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "i64", line_data: LineData { line: 62, column: 15, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 62, column: 18, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 62, column: 20, file_name: "test_code.pmh" } }
Token { kind: Var, spam: "var", line_data: LineData { line: 63, column: 2, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "hello", line_data: LineData { line: 63, column: 6, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 63, column: 12, file_name: "test_code.pmh" } }
Token { kind: String([104, 101, 108, 108, 111]), spam: "\"hello\"", line_data: LineData { line: 63, column: 14, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 63, column: 22, file_name: "test_code.pmh" } }
Token { kind: Return, spam: "return", line_data: LineData { line: 64, column: 2, file_name: "test_code.pmh" } }
Token { kind: Int(0, 64), spam: "0", line_data: LineData { line: 64, column: 9, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 64, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n", line_data: LineData { line: 65, column: 1, file_name: "test_code.pmh" } }
Token { kind: Fun, spam: "fun", line_data: LineData { line: 66, column: 0, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "mutable_ref", line_data: LineData { line: 66, column: 4, file_name: "test_code.pmh" } }
Token { kind: LPar, spam: "(", line_data: LineData { line: 66, column: 15, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 66, column: 16, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 66, column: 17, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "&", line_data: LineData { line: 66, column: 19, file_name: "test_code.pmh" } }
Token { kind: Var, spam: "var", line_data: LineData { line: 66, column: 20, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "Foo", line_data: LineData { line: 66, column: 24, file_name: "test_code.pmh" } }
Token { kind: RPar, spam: ")", line_data: LineData { line: 66, column: 27, file_name: "test_code.pmh" } }
Token { kind: Colon, spam: ":", line_data: LineData { line: 66, column: 28, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 66, column: 30, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 67, column: 2, file_name: "test_code.pmh" } }
Token { kind: Dot, spam: ".", line_data: LineData { line: 67, column: 3, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 67, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 67, column: 6, file_name: "test_code.pmh" } }
Token { kind: Int(10, 64), spam: "10", line_data: LineData { line: 67, column: 8, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 67, column: 11, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 68, column: 2, file_name: "test_code.pmh" } }
Token { kind: Dot, spam: ".", line_data: LineData { line: 68, column: 3, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "b", line_data: LineData { line: 68, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 68, column: 6, file_name: "test_code.pmh" } }
Token { kind: Int(20, 64), spam: "20", line_data: LineData { line: 68, column: 8, file_name: "test_code.pmh" } }
Token { kind: Indent(1), spam: "\n  ", line_data: LineData { line: 68, column: 11, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "a", line_data: LineData { line: 69, column: 2, file_name: "test_code.pmh" } }
Token { kind: Dot, spam: ".", line_data: LineData { line: 69, column: 3, file_name: "test_code.pmh" } }
Token { kind: Ident, spam: "c", line_data: LineData { line: 69, column: 4, file_name: "test_code.pmh" } }
Token { kind: Op, spam: "=", line_data: LineData { line: 69, column: 6, file_name: "test_code.pmh" } }
Token { kind: Int(30, 64), spam: "30", line_data: LineData { line: 69, column: 8, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 69, column: 11, file_name: "test_code.pmh" } }
Token { kind: Indent(0), spam: "\n\r", line_data: LineData { line: 70, column: 1, file_name: "test_code.pmh" } }
Group 'use' "use":
 UseStatement(true) 'use' "use":
  None end of file ""
  Lit string "\"foo/moo\""
 UseStatement(true) 'use' "use":
  None end of file ""
  Lit string "\"foo/moo/goo\""
 UseStatement(false) 'use' "use":
  None end of file ""
  Lit string "\"foo/moo\""
 UseStatement(false) 'use' "use":
  None end of file ""
  Lit string "\"foo/goo/noo\""
 Fun(Private) 'fun' "fun flo: pass":
  FunHeader 'fun' "fun flo":
   Ident ident "flo"
   None end of file ""
  Group ':' ":"
 Fun(Private) 'fun' "fun foo(): pass":
  FunHeader 'fun' "fun foo()":
   Ident ident "foo"
   None end of file ""
  Group ':' ":"
 Fun(Private) 'fun' "fun goo(a: i8, b: i8): pass":
  FunHeader 'fun' "fun goo(a: i8, b: i8)":
   Ident ident "goo"
   FunArgument(false) ident "a: i8":
    Ident ident "a"
    Ident ident "i8"
   FunArgument(false) ident "b: i8":
    Ident ident "b"
    Ident ident "i8"
   None end of file ""
  Group ':' ":"
 Fun(Private) 'fun' "fun loo:\r\n  noo::loo::[i8]()\r\n  pass":
  FunHeader 'fun' "fun loo":
   Ident ident "loo"
   None end of file ""
  Group ':' ":":
   Call(false) ident "noo::loo::[i8]()":
    Instantiation ident "noo::loo::[i8]":
     ExplicitPackage ident "noo::loo":
      Ident ident "noo"
      Ident ident "loo"
     Ident ident "i8"
 Fun(Private) 'fun' "fun main -> i64:\r\n  return 10 + 4 - 2 * 1 + 8":
  FunHeader 'fun' "fun main -> i64":
   Ident ident "main"
   Ident ident "i64"
  Group ':' ":":
   ReturnStatement 'return' "return 10 + 4 - 2 * 1 + 8":
    BinaryOp integer "10 + 4 - 2 * 1 + 8":
     Ident operator "-"
     BinaryOp integer "10 + 4":
      Ident operator "+"
      Lit integer "10"
      Lit integer "4"
     BinaryOp integer "2 * 1 + 8":
      Ident operator "+"
      BinaryOp integer "2 * 1":
       Ident operator "*"
       Lit integer "2"
       Lit integer "1"
      Lit integer "8"
 Fun(Private) 'fun' "fun operator_stress_test -> i64:\r\n  return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
  FunHeader 'fun' "fun operator_stress_test -> i64":
   Ident ident "operator_stress_test"
   Ident ident "i64"
  Group ':' ":":
   ReturnStatement 'return' "return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
    BinaryOp integer "10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
     Ident operator "+"
     Lit integer "10"
     BinaryOp integer "2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
      Ident operator "|"
      BinaryOp integer "2 * 1 - 9":
       Ident operator "-"
       BinaryOp integer "2 * 1":
        Ident operator "*"
        Lit integer "2"
        Lit integer "1"
       Lit integer "9"
      BinaryOp integer "4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
       Ident operator "^"
       BinaryOp integer "4 & 1":
        Ident operator "&"
        Lit integer "4"
        Lit integer "1"
       BinaryOp integer "2 >> 1 << 7 min 20 max 10":
        Ident operator "max"
        BinaryOp integer "2 >> 1 << 7 min 20":
         Ident operator "min"
         BinaryOp integer "2 >> 1 << 7":
          Ident operator "<<"
          BinaryOp integer "2 >> 1":
           Ident operator ">>"
           Lit integer "2"
           Lit integer "1"
          Lit integer "7"
         Lit integer "20"
        Lit integer "10"
 Fun(Private) 'fun' "fun conditional -> i64:\r\n  if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
  FunHeader 'fun' "fun conditional -> i64":
   Ident ident "conditional"
   Ident ident "i64"
  Group ':' ":":
   IfExpr 'if' "if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
    Lit boolean "false"
    Group ':' ":":
     ReturnStatement 'return' "return 10":
      Lit integer "10"
    Group 'elif' "elif":
     IfExpr 'elif' "elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
      Lit boolean "true"
      Group ':' ":":
       ReturnStatement 'return' "return if true: 10 else: 20":
        IfExpr 'if' "if true: 10 else: 20":
         Lit boolean "true"
         Group ':' ":":
          Lit integer "10"
         Group ':' ":":
          Lit integer "20"
      Group ':' ":":
       ReturnStatement 'return' "return 0":
        Lit integer "0"
 Attribute 'attr' "attr inline = always, call_conv = cold":
  AttributeAssign ident "inline = always":
   Ident ident "inline"
   Ident ident "always"
  AttributeAssign ident "call_conv = cold":
   Ident ident "call_conv"
   Ident ident "cold"
 Fun(Private) 'fun' "fun inline_fn -> u32:\r\n  return 10":
  FunHeader 'fun' "fun inline_fn -> u32":
   Ident ident "inline_fn"
   Ident ident "u32"
  Group ':' ":":
   ReturnStatement 'return' "return 10":
    Lit integer "10"
 Fun(Private) 'fun' "fun fib(v: i64) -> i64:\r\n  return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
  FunHeader 'fun' "fun fib(v: i64) -> i64":
   Ident ident "fib"
   FunArgument(false) ident "v: i64":
    Ident ident "v"
    Ident ident "i64"
   Ident ident "i64"
  Group ':' ":":
   ReturnStatement 'return' "return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
    IfExpr 'if' "if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
     BinaryOp ident "v == 0 | v == 1":
      Ident operator "|"
      BinaryOp ident "v == 0":
       Ident operator "=="
       Ident ident "v"
       Lit integer "0"
      BinaryOp ident "v == 1":
       Ident operator "=="
       Ident ident "v"
       Lit integer "1"
     Group ':' ":":
      Lit integer "1"
     Group ':' ":":
      BinaryOp ident "fib(v - 1) + fib(v - 2)":
       Ident operator "+"
       Call(false) ident "fib(v - 1)":
        Ident ident "fib"
        BinaryOp ident "v - 1":
         Ident operator "-"
         Ident ident "v"
         Lit integer "1"
       Call(false) ident "fib(v - 2)":
        Ident ident "fib"
        BinaryOp ident "v - 2":
         Ident operator "-"
         Ident ident "v"
         Lit integer "2"
 Fun(Private) 'fun' "fun fib_loop(v: i64) -> i64:\r\n  var a, b, c = 1\r\n  loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r\n  return c":
  FunHeader 'fun' "fun fib_loop(v: i64) -> i64":
   Ident ident "fib_loop"
   FunArgument(false) ident "v: i64":
    Ident ident "v"
    Ident ident "i64"
   Ident ident "i64"
  Group ':' ":":
   VarStatement(true) 'var' "var a, b, c = 1":
    VarAssign ident "a, b, c = 1":
     Group ident "a":
      Ident ident "a"
      Ident ident "b"
      Ident ident "c"
     None end of file ""
     Group operator "=":
      Lit integer "1"
      Ident ident "a"
      Ident ident "a"
   Loop 'loop' "loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a":
    Ident 'label' "'a"
    Group ':' ":":
     BinaryOp ident "c = a + b":
      Ident operator "="
      Ident ident "c"
      BinaryOp ident "a + b":
       Ident operator "+"
       Ident ident "a"
       Ident ident "b"
     BinaryOp ident "a = b":
      Ident operator "="
      Ident ident "a"
      Ident ident "b"
     BinaryOp ident "b = c":
      Ident operator "="
      Ident ident "b"
      Ident ident "c"
     BinaryOp ident "v = v - 1":
      Ident operator "="
      Ident ident "v"
      BinaryOp ident "v - 1":
       Ident operator "-"
       Ident ident "v"
       Lit integer "1"
     IfExpr 'if' "if v == 0:\r\n      break'a":
      BinaryOp ident "v == 0":
       Ident operator "=="
       Ident ident "v"
       Lit integer "0"
      Group ':' ":":
       Break 'break' "break'a":
        Ident 'label' "'a"
        None end of file ""
      None end of file ""
   ReturnStatement 'return' "return c":
    Ident ident "c"
 Fun(Private) 'fun' "fun unary_operators(a: i64) -> i64:\r\n  return -a + ~a + !a + ++a + --a":
  FunHeader 'fun' "fun unary_operators(a: i64) -> i64":
   Ident ident "unary_operators"
   FunArgument(false) ident "a: i64":
    Ident ident "a"
    Ident ident "i64"
   Ident ident "i64"
  Group ':' ":":
   ReturnStatement 'return' "return -a + ~a + !a + ++a + --a":
    BinaryOp operator "-a + ~a + !a + ++a + --a":
     Ident operator "+"
     BinaryOp operator "-a + ~a + !a + ++a":
      Ident operator "+"
      BinaryOp operator "-a + ~a + !a":
       Ident operator "+"
       BinaryOp operator "-a + ~a":
        Ident operator "+"
        UnaryOp operator "-a":
         Ident operator "-"
         Ident ident "a"
        UnaryOp operator "~a":
         Ident operator "~"
         Ident ident "a"
       UnaryOp operator "!a":
        Ident operator "!"
        Ident ident "a"
      UnaryOp operator "++a":
       Ident operator "++"
       Ident ident "a"
     UnaryOp operator "--a":
      Ident operator "--"
      Ident ident "a"
 StructDeclaration(Private) 'struct' "struct":
  Ident ident "Foo"
  Group ':' ":":
   StructField(false) ident "a, b, c: i64":
    Ident ident "a"
    Ident ident "b"
    Ident ident "c"
    Ident ident "i64"
 StructDeclaration(Private) 'struct' "struct":
  Ident ident "Goo"
  Group ':' ":":
   StructField(true) ident "foo: Foo":
    Ident ident "foo"
    Ident ident "Foo"
   Attribute 'attr' "attr something":
    AttributeElement ident "something":
     Ident ident "something"
   StructField(false) ident "gva: i64":
    Ident ident "gva"
    Ident ident "i64"
 Fun(Private) 'fun' "fun strings -> i64:\r\n  var hello = \"hello\"\r\n  return 0":
  FunHeader 'fun' "fun strings -> i64":
   Ident ident "strings"
   Ident ident "i64"
  Group ':' ":":
   VarStatement(true) 'var' "var hello = \"hello\"":
    VarAssign ident "hello = \"hello\"":
     Group ident "hello":
      Ident ident "hello"
     None end of file ""
     Group operator "=":
      Lit string "\"hello\""
   ReturnStatement 'return' "return 0":
    Lit integer "0"
 Fun(Private) 'fun' "fun mutable_ref(a: &var Foo):\r\n  a.a = 10\r\n  a.b = 20\r\n  a.c = 30":
  FunHeader 'fun' "fun mutable_ref(a: &var Foo)":
   Ident ident "mutable_ref"
   FunArgument(false) ident "a: &var Foo":
    Ident ident "a"
    Ref(true) operator "&var Foo":
     Ident ident "Foo"
   None end of file ""
  Group ':' ":":
   BinaryOp ident "a.a = 10":
    Ident operator "="
    DotExpr ident "a.a":
     Ident ident "a"
     Ident ident "a"
    Lit integer "10"
   BinaryOp ident "a.b = 20":
    Ident operator "="
    DotExpr ident "a.b":
     Ident ident "a"
     Ident ident "b"
    Lit integer "20"
   BinaryOp ident "a.c = 30":
    Ident operator "="
    DotExpr ident "a.c":
     Ident ident "a"
     Ident ident "c"
    Lit integer "30"

fun init -> Fun

  Inst1[]
    Value(0): Fun = ZeroValue |fn
    Value(1): Fun = VarDecl(Value(0)) |fn
    Value(4): i32 = Offset(Value(1)) |fn.b
    Value(2): i32 = Offset(Value(1)) |fn.a
    Value(3): i64 = Lit(Int(1, 64)) |1
    Value(3): i64 = Assign(Value(2)) |fn.a = 1
    Value(5): i64 = Lit(Int(2, 64)) |2
    Value(5): i64 = Assign(Value(4)) |fn.b = 2
    Return(Some(Value(1))) |fn

fun init2 -> Complex

  Inst1[Value(0)]
    Value(1): Complex = ZeroValue |cp
    Value(2): Complex = VarDecl(Value(1)) |cp
    Value(7): i32 = Offset(Value(2)) |cp.c
    Value(5): i32 = Offset(Value(2)) |cp.b
    Value(3): i32 = Offset(Value(2)) |cp.a
    Value(4): i64 = Lit(Int(1, 64)) |1
    Value(4): i64 = Assign(Value(3)) |cp.a = 1
    Value(6): i64 = Lit(Int(2, 64)) |2
    Value(6): i64 = Assign(Value(5)) |cp.b = 2
    Value(8): i64 = Lit(Int(3, 64)) |3
    Value(8): i64 = Assign(Value(7)) |cp.c = 3
    Value(9): Complex = Deref(Value(0)) |cp
    Value(2): Complex = Assign(Value(9)) |cp
    Return(Some(Value(0))) |cp

fun deref -> i32

  Inst1[]
    Value(0): i32 = ZeroValue |x
    Value(1): i32 = VarDecl(Value(0)) |x
    Value(2): & i32 = Ref(Value(1)) |&x
    Value(3): & i32 = VarDecl(Value(2)) |y = &x
    Value(4): i32 = Deref(Value(3)) |*y
    Return(Some(Value(4))) |*y

fun moo

  Inst1[]
    Value(0): i64 = ZeroValue |a
    Value(1): i64 = VarDecl(Value(0)) |a
    Value(2): & i64 = Ref(Value(1)) |&a
    Value(3): & i64 = VarDecl(Value(2)) |b = &a
    Value(4): i64 = Call(Fun(306), [Value(3)]) |boo(b)
    Value(4): i64 = Assign(Value(1)) |a = boo(b)
    Value(5): i64 = VarDecl(Value(1)) |c: i64 = a
    Return(None) |let c: i64 = a

fun main -> i64

  Inst1[]
    Value(0): i64 = ZeroValue |val
    Value(1): i64 = VarDecl(Value(0)) |val
    Value(2): i64 = VarDecl(Value(1)) |val2 = val
    Value(3): i64 = Lit(Int(10, 64)) |10
    Value(4): i64 = Call(Fun(307), [Value(1), Value(3)]) |val ++= 10
    Value(4): i64 = Assign(Value(1)) |val ++= 10
    Value(5): i64 = Call(Fun(308), [Value(1)]) |goo(val)
    Value(6): i64 = VarDecl(Value(5)) |foo = goo(val)
    Value(7): i64 = VarDecl(Value(6)) |foo: i64 = foo
    Value(8): i64 = Lit(Int(10, 64)) |10
    Value(9): bool = Call(Fun(189), [Value(7), Value(8)]) |foo == 10
    JumpIfTrue(Value(9), Inst(13), []) |foo == 10
    Jump(Inst(16), []) |:

  Inst13[]
    Value(10): i64 = Lit(Int(1, 64)) |1
    Jump(Inst(15), [Value(10)]) |if foo == 10: 1 else: 1

  Inst16[]
    Value(12): i64 = Lit(Int(1, 64)) |1
    Jump(Inst(15), [Value(12)]) |1

  Inst15[Value(11)]
    Value(13): i64 = Call(Fun(157), [Value(7), Value(11)]) |foo += if foo == 10: 1 else: 1
    Value(13): i64 = Assign(Value(7)) |foo += if foo == 10: 1 else: 1
    Value(14): i64 = Lit(Int(10, 64)) |10
    Value(15): bool = Call(Fun(189), [Value(7), Value(14)]) |foo == 10
    JumpIfTrue(Value(15), Inst(29), []) |foo == 10
    Jump(Inst(32), []) |:

  Inst29[]
    Return(Some(Value(7))) |return foo

  Inst32[]
    Value(16): i64 = Lit(Int(1, 64)) |1
    Value(17): i64 = Call(Fun(157), [Value(7), Value(16)]) |foo += 1
    Value(17): i64 = Assign(Value(7)) |foo += 1
    Jump(Inst(31), [Value(17)]) |foo += 1

  Inst31[Value(18)]
    Value(19): i64 = Lit(Int(30, 64)) |30
    Value(20): bool = Call(Fun(213), [Value(7), Value(19)]) |foo <= 30
    JumpIfTrue(Value(20), Inst(44), []) |foo <= 30
    Jump(Inst(47), []) |:

  Inst44[]
    Value(21): i64 = Lit(Int(10, 64)) |10
    Value(21): i64 = Assign(Value(7)) |foo = 10
    Jump(Inst(46), [Value(21)]) |if foo <= 30:
    foo = 10
  else:
    return foo
    foo = 10

  Inst47[]
    Return(Some(Value(7))) |return foo

  Inst46[Value(22)]
    Value(23): i64 = Lit(Int(10, 64)) |10
    Value(24): bool = Call(Fun(221), [Value(7), Value(23)]) |foo > 10
    JumpIfTrue(Value(24), Inst(58), []) |foo > 10
    Jump(Inst(61), []) |:

  Inst58[]
    Value(25): i64 = Lit(Int(20, 64)) |20
    Value(25): i64 = Assign(Value(7)) |foo = 20
    Jump(Inst(60), [Value(25)]) |if foo > 10:
    foo = 20
  else:
    foo = 30 | 6

  Inst61[]
    Value(27): i64 = Lit(Int(30, 64)) |30
    Value(28): i64 = Lit(Int(6, 64)) |6
    Value(29): i64 = Call(Fun(245), [Value(27), Value(28)]) |30 | 6
    Value(29): i64 = Assign(Value(7)) |foo = 30 | 6
    Jump(Inst(60), [Value(29)]) |foo = 30 | 6

  Inst60[Value(26)]
    Value(30): i64 = Lit(Int(0, 64)) |0
    Value(31): i64 = VarDecl(Value(30)) |i = 0
    Jump(Inst(76), []) |loop:
    if i >= 10:
      break
    i += 1

  Inst76[]
    Value(32): i64 = Lit(Int(10, 64)) |10
    Value(33): bool = Call(Fun(205), [Value(31), Value(32)]) |i >= 10
    JumpIfTrue(Value(33), Inst(82), []) |i >= 10
    Jump(Inst(84), []) |

  Inst82[]
    Jump(Inst(77), []) |break

  Inst84[]
    Value(34): i64 = Lit(Int(1, 64)) |1
    Value(35): i64 = Call(Fun(157), [Value(31), Value(34)]) |i += 1
    Value(35): i64 = Assign(Value(31)) |i += 1
    Jump(Inst(76), []) |loop:
    if i >= 10:
      break
    i += 1

  Inst77[]
    Value(36): i64 = Lit(Int(0, 64)) |0
    Value(37): i64 = VarDecl(Value(36)) |i = 0
    Jump(Inst(96), []) |loop:
    i += 1
    if i < 10:
      continue
    break

  Inst96[]
    Value(38): i64 = Lit(Int(1, 64)) |1
    Value(39): i64 = Call(Fun(157), [Value(37), Value(38)]) |i += 1
    Value(39): i64 = Assign(Value(37)) |i += 1
    Value(40): i64 = Lit(Int(10, 64)) |10
    Value(41): bool = Call(Fun(229), [Value(37), Value(40)]) |i < 10
    JumpIfTrue(Value(41), Inst(105), []) |i < 10
    Jump(Inst(107), []) |

  Inst105[]
    Jump(Inst(96), []) |continue

  Inst107[]
    Jump(Inst(97), []) |break

  Inst97[]
    Jump(Inst(114), []) |loop: 
    loop: 
      break
    break

  Inst114[]
    Jump(Inst(118), []) |loop: 
      break

  Inst118[]
    Jump(Inst(119), []) |break

  Inst119[]
    Jump(Inst(115), []) |break

  Inst115[]
    Return(Some(Value(1))) |return val

fun +(a, b: Vec) -> Vec

  Inst1[Value(0), Value(1)]
    Value(10): f32 = Offset(Value(1)) |b.y
    Value(9): f32 = Offset(Value(0)) |a.y
    Value(6): f32 = Offset(Value(1)) |b.x
    Value(5): f32 = Offset(Value(0)) |a.x
    Value(2): Vec = ZeroValue |v
    Value(3): Vec = VarDecl(Value(2)) |v
    Value(8): f32 = Offset(Value(3)) |v.y
    Value(4): f32 = Offset(Value(3)) |v.x
    Value(7): f32 = Call(Fun(274), [Value(5), Value(6)]) |a.x + b.x
    Value(7): f32 = Assign(Value(4)) |v.x = a.x + b.x
    Value(11): f32 = Call(Fun(274), [Value(9), Value(10)]) |a.y + b.y
    Value(11): f32 = Assign(Value(8)) |v.y = a.y + b.y
    Return(Some(Value(3))) |v

fun something -> Embedded[i64]

  Inst1[]
    Value(0): Vec = ZeroValue |a, b: Vec
    Value(1): Vec = VarDecl(Value(0)) |a, b: Vec
    Value(6): f32 = Offset(Value(1)) |a.y
    Value(4): f32 = Offset(Value(1)) |a.x
    Value(2): Vec = ZeroValue |a, b: Vec
    Value(3): Vec = VarDecl(Value(2)) |a, b: Vec
    Value(10): f32 = Offset(Value(3)) |b.y
    Value(8): f32 = Offset(Value(3)) |b.x
    Value(5): f32 = Lit(Float(NaN, 32)) |1f32
    Value(5): f32 = Assign(Value(4)) |a.x = 1f32
    Value(7): f32 = Lit(Float(NaN, 32)) |4f32
    Value(7): f32 = Assign(Value(6)) |a.y = 4f32
    Value(9): f32 = Lit(Float(NaN, 32)) |2f32
    Value(9): f32 = Assign(Value(8)) |b.x = 2f32
    Value(11): f32 = Lit(Float(NaN, 32)) |3f32
    Value(11): f32 = Assign(Value(10)) |b.y = 3f32
    Value(12): Vec = Call(Fun(304), [Value(1), Value(3)]) |a += b
    Value(12): Vec = Assign(Value(1)) |a += b
    Value(13): Seq[i64] = ZeroValue |s
    Value(14): Seq[i64] = VarDecl(Value(13)) |s
    Value(26): &var Seq[i64] = Ref(Value(14)) |s.push(10)
    Value(25): & Seq[i64] = Ref(Value(14)) |s.push(10)
    Value(15): i64 = Lit(Int(10, 64)) |10
    Call(Fun(309), [Value(25), Value(15)]) |s.push(10)
    Value(17): i64 = Lit(Int(10, 64)) |10
    Call(Fun(309), [Value(26), Value(17)]) |s.push(10)
    Value(19): Embedded[i64] = ZeroValue |v: Embedded[i64]
    Value(20): Embedded[i64] = VarDecl(Value(19)) |v: Embedded[i64]
    Value(22): Seq[i64] = Offset(Value(20)) |v.push(10)
    Value(23): &var Seq[i64] = Ref(Value(22)) |v.push(10)
    Value(21): i64 = Lit(Int(10, 64)) |10
    Call(Fun(309), [Value(23), Value(21)]) |v.push(10)
    Value(24): Embedded[i64] = ZeroValue |v.push(10)
    Return(Some(Value(24))) |v.push(10)

fun boo[T](x: &T) -> T

    Value(1): i64 = Deref(Value(0)) |*x
  Inst1[Value(0)]
    Return(Some(Value(1))) |*x

fun ++[T](a, b: T) -> T

  Inst1[Value(0), Value(1)]
    Value(2): i64 = Call(Fun(157), [Value(0), Value(1)]) |a + b
    Return(Some(Value(2))) |a + b

fun goo[T](x: T) -> T

  Inst1[Value(0)]
    Return(Some(Value(0))) |x

fun push[T](seq: &var Seq[T], x: T)

  Inst1[Value(0), Value(1)]
    Return(None) |

function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 0
    return v0
}

function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 1
    v1 = iconst.i64 1
    v2 = isub v0, v1
    return v2
}

function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 1
    v1 = iconst.i64 1
    v2 = iadd v0, v1
    return v2
}

function u0:0() -> i64 fast {
block0:
    v1 = iconst.i64 1
    v2 = iconst.i64 1
    v3 = icmp eq v1, v2
    brnz v3, block1
    jump block2

block1:
    v4 = iconst.i64 0
    jump block3(v4)

block2:
    v5 = iconst.i64 1
    jump block3(v5)

block3(v0: i64):
    return v0
}

function u0:0(i32) -> i32 fast {
    sig0 = (i32) -> i32 fast
    sig1 = (i32) -> i32 fast
    fn0 = colocated u0:0 sig0
    fn1 = colocated u0:0 sig1

block0(v0: i32):
    v2 = iconst.i32 2
    v3 = icmp slt v0, v2
    brnz v3, block1
    jump block2

block1:
    v4 = iconst.i32 1
    jump block3(v4)

block2:
    v5 = iconst.i32 1
    v6 = isub.i32 v0, v5
    v7 = call fn0(v6)
    v8 = iconst.i32 2
    v9 = isub.i32 v0, v8
    v10 = call fn1(v9)
    v11 = iadd v7, v10
    jump block3(v11)

block3(v1: i32):
    return v1
}

function u0:0(i32) -> i32 fast {
block0(v0: i32):
    v1 = iconst.i32 1
    jump block1(v1, v1, v0)

block1(v2: i32, v3: i32, v6: i32):
    v11 -> v3
    v4 = iadd v2, v3
    v10 -> v4
    v12 -> v4
    v5 = iconst.i32 1
    v7 = isub v6, v5
    v13 -> v7
    v8 = iconst.i32 1
    v9 = icmp eq v7, v8
    brnz v9, block2
    jump block3

block2:
    jump block4

block3:
    jump block1(v11, v12, v13)

block4:
    return v10
}

function u0:0() -> i32 fast {
    sig0 = (i32) -> i32 fast
    sig1 = (i32) -> i32 fast
    fn0 = colocated u0:1 sig0
    fn1 = colocated u0:0 sig1

block0:
    v0 = iconst.i32 10
    v1 = call fn0(v0)
    v2 = call fn1(v0)
    v3 = isub v1, v2
    return v3
}

function u0:0() -> i64 fast {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 24
    ss2 = explicit_slot 32

block0:
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 0
    stack_store v1, ss1
    stack_store v1, ss1+8
    stack_store v1, ss1+16
    v2 = iconst.i64 0
    stack_store v2, ss2
    stack_store v2, ss2+8
    stack_store v2, ss2+16
    stack_store v2, ss2+24
    v3 = iconst.i64 1
    stack_store v3, ss0
    v4 = stack_load.i64 ss0
    stack_store v4, ss1
    v5 = stack_load.i64 ss0+8
    stack_store v5, ss1+8
    v6 = iconst.i64 2
    stack_store v6, ss1+8
    v7 = stack_load.i64 ss1
    stack_store v7, ss2
    v8 = stack_load.i64 ss1+8
    stack_store v8, ss2+8
    v9 = stack_load.i64 ss2
    v10 = stack_load.i64 ss2+8
    v11 = isub v9, v10
    v12 = iconst.i64 1
    v13 = iadd v11, v12
    return v13
}

function u0:0(i64, i64, i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 16

block0(v0: i64, v1: i64, v2: i64, v3: i64):
    stack_store v0, ss0
    stack_store v1, ss0
    stack_store v2, ss0+8
    v4 = stack_addr.i64 ss0
    v5 = load.i64 v4
    store v5, v3
    v6 = load.i64 v4+8
    store v6, v3+8
    return v3
}

function u0:0() -> i64 fast {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 16
    ss2 = explicit_slot 16
    sig0 = (i64, i64, i64, i64 sret) -> i64 sret fast
    fn0 = colocated u0:0 sig0

block0:
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 0
    stack_store v1, ss1
    stack_store v1, ss1+8
    v2 = iconst.i64 1
    v3 = iconst.i64 2
    v4 = stack_addr.i64 ss0
    v5 = stack_addr.i64 ss2
    v6 = call fn0(v4, v2, v3, v5)
    v7 = stack_load.i64 ss2
    stack_store v7, ss0
    v8 = stack_load.i64 ss2+8
    stack_store v8, ss0+8
    v9 = stack_load.i64 ss0
    v10 = stack_load.i64 ss0+8
    v11 = iadd v9, v10
    v12 = iconst.i64 3
    v13 = isub v11, v12
    return v13
}

