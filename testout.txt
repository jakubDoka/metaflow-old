Ok(Arguments { filename: "file", flags: ["flag", "flag"], field_flags: [("flag", "value")], args: ["arg", "arg"] })
Ok(Arguments { filename: "file", flags: [], field_flags: [], args: ["string value"] })
Dummy1
[(Dummy(1), 0)]
0
Dummy(1)
[]
[(Dummy(1), 0)]
|> 1:0:text_code.mf
| fun flo: pass
| ^^^
|> 1:4:text_code.mf
| fun flo: pass
|     ^^^
|> 1:7:text_code.mf
| fun flo: pass
|        ^
|> 1:9:text_code.mf
| fun flo: pass
|          ^^^^
|> 1:14:text_code.mf
| 
| ^
|> 2:2:text_code.mf
| fun foo(): pass
| ^
|> 3:1:text_code.mf
| fun foo(): pass
| ^^^
|> 3:5:text_code.mf
| fun foo(): pass
|     ^^^
|> 3:8:text_code.mf
| fun foo(): pass
|        ^
|> 3:9:text_code.mf
| fun foo(): pass
|         ^
|> 3:10:text_code.mf
| fun foo(): pass
|          ^
|> 3:12:text_code.mf
| fun foo(): pass
|            ^^^^
|> 3:17:text_code.mf
| 
| ^
|> 4:2:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^
|> 5:1:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^^^
|> 5:5:text_code.mf
| fun goo(a: i8, b: i8): pass
|     ^^^
|> 5:8:text_code.mf
| fun goo(a: i8, b: i8): pass
|        ^
|> 5:9:text_code.mf
| fun goo(a: i8, b: i8): pass
|         ^
|> 5:10:text_code.mf
| fun goo(a: i8, b: i8): pass
|          ^
|> 5:12:text_code.mf
| fun goo(a: i8, b: i8): pass
|            ^^
|> 5:14:text_code.mf
| fun goo(a: i8, b: i8): pass
|              ^
|> 5:16:text_code.mf
| fun goo(a: i8, b: i8): pass
|                ^
|> 5:17:text_code.mf
| fun goo(a: i8, b: i8): pass
|                 ^
|> 5:19:text_code.mf
| fun goo(a: i8, b: i8): pass
|                   ^^
|> 5:21:text_code.mf
| fun goo(a: i8, b: i8): pass
|                     ^
|> 5:22:text_code.mf
| fun goo(a: i8, b: i8): pass
|                      ^
|> 5:24:text_code.mf
| fun goo(a: i8, b: i8): pass
|                        ^^^^
|> 5:29:text_code.mf
| 
| ^
|> 6:2:text_code.mf
| fun loo:
| ^
|> 7:1:text_code.mf
| fun loo:
| ^^^
|> 7:5:text_code.mf
| fun loo:
|     ^^^
|> 7:8:text_code.mf
| fun loo:
|        ^
|> 7:10:text_code.mf
|   noo::loo::[i8]()
| ^^
|> 8:3:text_code.mf
|   noo::loo::[i8]()
|   ^^^
|> 8:6:text_code.mf
|   noo::loo::[i8]()
|      ^^
|> 8:8:text_code.mf
|   noo::loo::[i8]()
|        ^^^
|> 8:11:text_code.mf
|   noo::loo::[i8]()
|           ^^
|> 8:13:text_code.mf
|   noo::loo::[i8]()
|             ^
|> 8:14:text_code.mf
|   noo::loo::[i8]()
|              ^^
|> 8:16:text_code.mf
|   noo::loo::[i8]()
|                ^
|> 8:17:text_code.mf
|   noo::loo::[i8]()
|                 ^
|> 8:18:text_code.mf
|   noo::loo::[i8]()
|                  ^
|> 8:20:text_code.mf
| 
| ^
|> 9:2:text_code.mf
|   let array = [1, 2, 3]
| ^^
|> 10:3:text_code.mf
|   let array = [1, 2, 3]
|   ^^^
|> 10:7:text_code.mf
|   let array = [1, 2, 3]
|       ^^^^^
|> 10:13:text_code.mf
|   let array = [1, 2, 3]
|             ^
|> 10:15:text_code.mf
|   let array = [1, 2, 3]
|               ^
|> 10:16:text_code.mf
|   let array = [1, 2, 3]
|                ^
|> 10:17:text_code.mf
|   let array = [1, 2, 3]
|                 ^
|> 10:19:text_code.mf
|   let array = [1, 2, 3]
|                   ^
|> 10:20:text_code.mf
|   let array = [1, 2, 3]
|                    ^
|> 10:22:text_code.mf
|   let array = [1, 2, 3]
|                      ^
|> 10:23:text_code.mf
|   let array = [1, 2, 3]
|                       ^
|> 10:25:text_code.mf
|   array[0] = 3
| ^^
|> 11:3:text_code.mf
|   array[0] = 3
|   ^^^^^
|> 11:8:text_code.mf
|   array[0] = 3
|        ^
|> 11:9:text_code.mf
|   array[0] = 3
|         ^
|> 11:10:text_code.mf
|   array[0] = 3
|          ^
|> 11:12:text_code.mf
|   array[0] = 3
|            ^
|> 11:14:text_code.mf
|   array[0] = 3
|              ^
|> 11:16:text_code.mf
|   array[2] = always[1]
| ^^
|> 12:3:text_code.mf
|   array[2] = always[1]
|   ^^^^^
|> 12:8:text_code.mf
|   array[2] = always[1]
|        ^
|> 12:9:text_code.mf
|   array[2] = always[1]
|         ^
|> 12:10:text_code.mf
|   array[2] = always[1]
|          ^
|> 12:12:text_code.mf
|   array[2] = always[1]
|            ^
|> 12:14:text_code.mf
|   array[2] = always[1]
|              ^^^^^^
|> 12:20:text_code.mf
|   array[2] = always[1]
|                    ^
|> 12:21:text_code.mf
|   array[2] = always[1]
|                     ^
|> 12:22:text_code.mf
|   array[2] = always[1]
|                      ^
|> 12:24:text_code.mf
|   array[1] = 1
| ^^
|> 13:3:text_code.mf
|   array[1] = 1
|   ^^^^^
|> 13:8:text_code.mf
|   array[1] = 1
|        ^
|> 13:9:text_code.mf
|   array[1] = 1
|         ^
|> 13:10:text_code.mf
|   array[1] = 1
|          ^
|> 13:12:text_code.mf
|   array[1] = 1
|            ^
|> 13:14:text_code.mf
|   array[1] = 1
|              ^
|> 13:16:text_code.mf
| 
| ^
|> 14:2:text_code.mf
|   pass
| ^^
|> 15:3:text_code.mf
|   pass
|   ^^^^
|> 15:8:text_code.mf
| 
| ^
|> 16:2:text_code.mf
| fun main -> i64:
| ^
|> 17:1:text_code.mf
| fun main -> i64:
| ^^^
|> 17:5:text_code.mf
| fun main -> i64:
|     ^^^^
|> 17:10:text_code.mf
| fun main -> i64:
|          ^^
|> 17:13:text_code.mf
| fun main -> i64:
|             ^^^
|> 17:16:text_code.mf
| fun main -> i64:
|                ^
|> 17:18:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
| ^^
|> 18:3:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|   ^^^^^^
|> 18:10:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|          ^^
|> 18:13:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|             ^
|> 18:15:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|               ^
|> 18:17:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                 ^
|> 18:19:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                   ^
|> 18:21:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                     ^
|> 18:23:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                       ^
|> 18:25:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                         ^
|> 18:27:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                           ^
|> 18:29:text_code.mf
| 
| ^
|> 19:2:text_code.mf
| fun operator_stress_test -> i64:
| ^
|> 20:1:text_code.mf
| fun operator_stress_test -> i64:
| ^^^
|> 20:5:text_code.mf
| fun operator_stress_test -> i64:
|     ^^^^^^^^^^^^^^^^^^^^
|> 20:26:text_code.mf
| fun operator_stress_test -> i64:
|                          ^^
|> 20:29:text_code.mf
| fun operator_stress_test -> i64:
|                             ^^^
|> 20:32:text_code.mf
| fun operator_stress_test -> i64:
|                                ^
|> 20:34:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
| ^^
|> 21:3:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|   ^^^^^^
|> 21:10:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|          ^^
|> 21:13:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|             ^
|> 21:15:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|               ^
|> 21:17:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                 ^
|> 21:19:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                   ^
|> 21:21:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                     ^
|> 21:23:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                       ^
|> 21:25:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                         ^
|> 21:27:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                           ^
|> 21:29:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                             ^
|> 21:31:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                               ^
|> 21:33:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                 ^
|> 21:35:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                   ^
|> 21:37:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                     ^^
|> 21:40:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                        ^
|> 21:42:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                          ^^
|> 21:45:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                             ^
|> 21:47:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                               ^^^
|> 21:51:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                   ^^
|> 21:54:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                      ^^^
|> 21:58:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                          ^^
|> 21:61:text_code.mf
| 
| ^
|> 22:2:text_code.mf
| fun conditional -> i64:
| ^
|> 23:1:text_code.mf
| fun conditional -> i64:
| ^^^
|> 23:5:text_code.mf
| fun conditional -> i64:
|     ^^^^^^^^^^^
|> 23:17:text_code.mf
| fun conditional -> i64:
|                 ^^
|> 23:20:text_code.mf
| fun conditional -> i64:
|                    ^^^
|> 23:23:text_code.mf
| fun conditional -> i64:
|                       ^
|> 23:25:text_code.mf
|   if false:
| ^^
|> 24:3:text_code.mf
|   if false:
|   ^^
|> 24:6:text_code.mf
|   if false:
|      ^^^^^
|> 24:11:text_code.mf
|   if false:
|           ^
|> 24:13:text_code.mf
|     return 10
| ^^^^
|> 25:5:text_code.mf
|     return 10
|     ^^^^^^
|> 25:12:text_code.mf
|     return 10
|            ^^
|> 25:15:text_code.mf
|   elif true:
| ^^
|> 26:3:text_code.mf
|   elif true:
|   ^^^^
|> 26:8:text_code.mf
|   elif true:
|        ^^^^
|> 26:12:text_code.mf
|   elif true:
|            ^
|> 26:14:text_code.mf
|     return if true: 10 else: 20
| ^^^^
|> 27:5:text_code.mf
|     return if true: 10 else: 20
|     ^^^^^^
|> 27:12:text_code.mf
|     return if true: 10 else: 20
|            ^^
|> 27:15:text_code.mf
|     return if true: 10 else: 20
|               ^^^^
|> 27:19:text_code.mf
|     return if true: 10 else: 20
|                   ^
|> 27:21:text_code.mf
|     return if true: 10 else: 20
|                     ^^
|> 27:24:text_code.mf
|     return if true: 10 else: 20
|                        ^^^^
|> 27:28:text_code.mf
|     return if true: 10 else: 20
|                            ^
|> 27:30:text_code.mf
|     return if true: 10 else: 20
|                              ^^
|> 27:33:text_code.mf
|   else:
| ^^
|> 28:3:text_code.mf
|   else:
|   ^^^^
|> 28:7:text_code.mf
|   else:
|       ^
|> 28:9:text_code.mf
|     return 0
| ^^^^
|> 29:5:text_code.mf
|     return 0
|     ^^^^^^
|> 29:12:text_code.mf
|     return 0
|            ^
|> 29:14:text_code.mf
| 
| ^
|> 30:2:text_code.mf
| attr inline = always, call_conv = cold
| ^
|> 31:1:text_code.mf
| attr inline = always, call_conv = cold
| ^^^^
|> 31:6:text_code.mf
| attr inline = always, call_conv = cold
|      ^^^^^^
|> 31:13:text_code.mf
| attr inline = always, call_conv = cold
|             ^
|> 31:15:text_code.mf
| attr inline = always, call_conv = cold
|               ^^^^^^
|> 31:21:text_code.mf
| attr inline = always, call_conv = cold
|                     ^
|> 31:23:text_code.mf
| attr inline = always, call_conv = cold
|                       ^^^^^^^^^
|> 31:33:text_code.mf
| attr inline = always, call_conv = cold
|                                 ^
|> 31:35:text_code.mf
| attr inline = always, call_conv = cold
|                                   ^^^^
|> 31:40:text_code.mf
| fun inline_fn -> u32:
| ^
|> 32:1:text_code.mf
| fun inline_fn -> u32:
| ^^^
|> 32:5:text_code.mf
| fun inline_fn -> u32:
|     ^^^^^^^^^
|> 32:15:text_code.mf
| fun inline_fn -> u32:
|               ^^
|> 32:18:text_code.mf
| fun inline_fn -> u32:
|                  ^^^
|> 32:21:text_code.mf
| fun inline_fn -> u32:
|                     ^
|> 32:23:text_code.mf
|   return 10
| ^^
|> 33:3:text_code.mf
|   return 10
|   ^^^^^^
|> 33:10:text_code.mf
|   return 10
|          ^^
|> 33:13:text_code.mf
| 
| ^
|> 34:2:text_code.mf
| fun fib(v: i64) -> i64:
| ^
|> 35:1:text_code.mf
| fun fib(v: i64) -> i64:
| ^^^
|> 35:5:text_code.mf
| fun fib(v: i64) -> i64:
|     ^^^
|> 35:8:text_code.mf
| fun fib(v: i64) -> i64:
|        ^
|> 35:9:text_code.mf
| fun fib(v: i64) -> i64:
|         ^
|> 35:10:text_code.mf
| fun fib(v: i64) -> i64:
|          ^
|> 35:12:text_code.mf
| fun fib(v: i64) -> i64:
|            ^^^
|> 35:15:text_code.mf
| fun fib(v: i64) -> i64:
|               ^
|> 35:17:text_code.mf
| fun fib(v: i64) -> i64:
|                 ^^
|> 35:20:text_code.mf
| fun fib(v: i64) -> i64:
|                    ^^^
|> 35:23:text_code.mf
| fun fib(v: i64) -> i64:
|                       ^
|> 35:25:text_code.mf
|   return if v == 0 | v == 1:
| ^^
|> 36:3:text_code.mf
|   return if v == 0 | v == 1:
|   ^^^^^^
|> 36:10:text_code.mf
|   return if v == 0 | v == 1:
|          ^^
|> 36:13:text_code.mf
|   return if v == 0 | v == 1:
|             ^
|> 36:15:text_code.mf
|   return if v == 0 | v == 1:
|               ^^
|> 36:18:text_code.mf
|   return if v == 0 | v == 1:
|                  ^
|> 36:20:text_code.mf
|   return if v == 0 | v == 1:
|                    ^
|> 36:22:text_code.mf
|   return if v == 0 | v == 1:
|                      ^
|> 36:24:text_code.mf
|   return if v == 0 | v == 1:
|                        ^^
|> 36:27:text_code.mf
|   return if v == 0 | v == 1:
|                           ^
|> 36:28:text_code.mf
|   return if v == 0 | v == 1:
|                            ^
|> 36:30:text_code.mf
|     1
| ^^^^
|> 37:5:text_code.mf
|     1
|     ^
|> 37:7:text_code.mf
|   else:
| ^^
|> 38:3:text_code.mf
|   else:
|   ^^^^
|> 38:7:text_code.mf
|   else:
|       ^
|> 38:9:text_code.mf
|     fib(v - 1) + fib(v - 2)
| ^^^^
|> 39:5:text_code.mf
|     fib(v - 1) + fib(v - 2)
|     ^^^
|> 39:8:text_code.mf
|     fib(v - 1) + fib(v - 2)
|        ^
|> 39:9:text_code.mf
|     fib(v - 1) + fib(v - 2)
|         ^
|> 39:11:text_code.mf
|     fib(v - 1) + fib(v - 2)
|           ^
|> 39:13:text_code.mf
|     fib(v - 1) + fib(v - 2)
|             ^
|> 39:14:text_code.mf
|     fib(v - 1) + fib(v - 2)
|              ^
|> 39:16:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                ^
|> 39:18:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                  ^^^
|> 39:21:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                     ^
|> 39:22:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                      ^
|> 39:24:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                        ^
|> 39:26:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                          ^
|> 39:27:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                           ^
|> 39:29:text_code.mf
| 
| ^
|> 40:2:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^
|> 41:1:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^^^
|> 41:5:text_code.mf
| fun fib_loop(v: i64) -> i64:
|     ^^^^^^^^
|> 41:13:text_code.mf
| fun fib_loop(v: i64) -> i64:
|             ^
|> 41:14:text_code.mf
| fun fib_loop(v: i64) -> i64:
|              ^
|> 41:15:text_code.mf
| fun fib_loop(v: i64) -> i64:
|               ^
|> 41:17:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                 ^^^
|> 41:20:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                    ^
|> 41:22:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                      ^^
|> 41:25:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                         ^^^
|> 41:28:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                            ^
|> 41:30:text_code.mf
|   var a, b, c = 1
| ^^
|> 42:3:text_code.mf
|   var a, b, c = 1
|   ^^^
|> 42:7:text_code.mf
|   var a, b, c = 1
|       ^
|> 42:8:text_code.mf
|   var a, b, c = 1
|        ^
|> 42:10:text_code.mf
|   var a, b, c = 1
|          ^
|> 42:11:text_code.mf
|   var a, b, c = 1
|           ^
|> 42:13:text_code.mf
|   var a, b, c = 1
|             ^
|> 42:15:text_code.mf
|   var a, b, c = 1
|               ^
|> 42:17:text_code.mf
|   var a, b, c = 1
|                 ^
|> 42:19:text_code.mf
|   loop'a:
| ^^
|> 43:3:text_code.mf
|   loop'a:
|   ^^^^
|> 43:7:text_code.mf
|   loop'a:
|       ^^
|> 43:9:text_code.mf
|   loop'a:
|         ^
|> 43:11:text_code.mf
|     c = a + b
| ^^^^
|> 44:5:text_code.mf
|     c = a + b
|     ^
|> 44:7:text_code.mf
|     c = a + b
|       ^
|> 44:9:text_code.mf
|     c = a + b
|         ^
|> 44:11:text_code.mf
|     c = a + b
|           ^
|> 44:13:text_code.mf
|     c = a + b
|             ^
|> 44:15:text_code.mf
|     a = b
| ^^^^
|> 45:5:text_code.mf
|     a = b
|     ^
|> 45:7:text_code.mf
|     a = b
|       ^
|> 45:9:text_code.mf
|     a = b
|         ^
|> 45:11:text_code.mf
|     b = c
| ^^^^
|> 46:5:text_code.mf
|     b = c
|     ^
|> 46:7:text_code.mf
|     b = c
|       ^
|> 46:9:text_code.mf
|     b = c
|         ^
|> 46:11:text_code.mf
|     v = v - 1
| ^^^^
|> 47:5:text_code.mf
|     v = v - 1
|     ^
|> 47:7:text_code.mf
|     v = v - 1
|       ^
|> 47:9:text_code.mf
|     v = v - 1
|         ^
|> 47:11:text_code.mf
|     v = v - 1
|           ^
|> 47:13:text_code.mf
|     v = v - 1
|             ^
|> 47:15:text_code.mf
|     if v == 0:
| ^^^^
|> 48:5:text_code.mf
|     if v == 0:
|     ^^
|> 48:8:text_code.mf
|     if v == 0:
|        ^
|> 48:10:text_code.mf
|     if v == 0:
|          ^^
|> 48:13:text_code.mf
|     if v == 0:
|             ^
|> 48:14:text_code.mf
|     if v == 0:
|              ^
|> 48:16:text_code.mf
|       break'a
| ^^^^^^
|> 49:7:text_code.mf
|       break'a
|       ^^^^^
|> 49:12:text_code.mf
|       break'a
|            ^^
|> 49:15:text_code.mf
|   return c
| ^^
|> 50:3:text_code.mf
|   return c
|   ^^^^^^
|> 50:10:text_code.mf
|   return c
|          ^
|> 50:12:text_code.mf
| 
| ^
|> 51:2:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^
|> 52:1:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^^^
|> 52:5:text_code.mf
| fun unary_operators(a: i64) -> i64:
|     ^^^^^^^^^^^^^^^
|> 52:20:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                    ^
|> 52:21:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                     ^
|> 52:22:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                      ^
|> 52:24:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                        ^^^
|> 52:27:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                           ^
|> 52:29:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                             ^^
|> 52:32:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                ^^^
|> 52:35:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                   ^
|> 52:37:text_code.mf
|   return -a + ~a + !a + ++a + --a
| ^^
|> 53:3:text_code.mf
|   return -a + ~a + !a + ++a + --a
|   ^^^^^^
|> 53:10:text_code.mf
|   return -a + ~a + !a + ++a + --a
|          ^
|> 53:11:text_code.mf
|   return -a + ~a + !a + ++a + --a
|           ^
|> 53:13:text_code.mf
|   return -a + ~a + !a + ++a + --a
|             ^
|> 53:15:text_code.mf
|   return -a + ~a + !a + ++a + --a
|               ^
|> 53:16:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                ^
|> 53:18:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                  ^
|> 53:20:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                    ^
|> 53:21:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                     ^
|> 53:23:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                       ^
|> 53:25:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                         ^^
|> 53:27:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                           ^
|> 53:29:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                             ^
|> 53:31:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                               ^^
|> 53:33:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                                 ^
|> 53:35:text_code.mf
| 
| ^
|> 54:2:text_code.mf
| struct Foo:
| ^
|> 55:1:text_code.mf
| struct Foo:
| ^^^^^^
|> 55:8:text_code.mf
| struct Foo:
|        ^^^
|> 55:11:text_code.mf
| struct Foo:
|           ^
|> 55:13:text_code.mf
|   a, b, c: int
| ^^
|> 56:3:text_code.mf
|   a, b, c: int
|   ^
|> 56:4:text_code.mf
|   a, b, c: int
|    ^
|> 56:6:text_code.mf
|   a, b, c: int
|      ^
|> 56:7:text_code.mf
|   a, b, c: int
|       ^
|> 56:9:text_code.mf
|   a, b, c: int
|         ^
|> 56:10:text_code.mf
|   a, b, c: int
|          ^
|> 56:12:text_code.mf
|   a, b, c: int
|            ^^^
|> 56:16:text_code.mf
| 
| ^
|> 57:2:text_code.mf
| struct Goo:
| ^
|> 58:1:text_code.mf
| struct Goo:
| ^^^^^^
|> 58:8:text_code.mf
| struct Goo:
|        ^^^
|> 58:11:text_code.mf
| struct Goo:
|           ^
|> 58:13:text_code.mf
|   embed foo: Foo
| ^^
|> 59:3:text_code.mf
|   embed foo: Foo
|   ^^^^^
|> 59:9:text_code.mf
|   embed foo: Foo
|         ^^^
|> 59:12:text_code.mf
|   embed foo: Foo
|            ^
|> 59:14:text_code.mf
|   embed foo: Foo
|              ^^^
|> 59:18:text_code.mf
|   gva: int
| ^^
|> 60:3:text_code.mf
|   gva: int
|   ^^^
|> 60:6:text_code.mf
|   gva: int
|      ^
|> 60:8:text_code.mf
|   gva: int
|        ^^^
|> 60:12:text_code.mf
| 
| ^
|> 61:2:text_code.mf
| fun strings -> i64:
| ^
|> 62:1:text_code.mf
| fun strings -> i64:
| ^^^
|> 62:5:text_code.mf
| fun strings -> i64:
|     ^^^^^^^
|> 62:13:text_code.mf
| fun strings -> i64:
|             ^^
|> 62:16:text_code.mf
| fun strings -> i64:
|                ^^^
|> 62:19:text_code.mf
| fun strings -> i64:
|                   ^
|> 62:21:text_code.mf
|   var hello = "hello"
| ^^
|> 63:3:text_code.mf
|   var hello = "hello"
|   ^^^
|> 63:7:text_code.mf
|   var hello = "hello"
|       ^^^^^
|> 63:13:text_code.mf
|   var hello = "hello"
|             ^
|> 63:15:text_code.mf
|   var hello = "hello"
|               ^^^^^^^
|> 63:23:text_code.mf
|   return 0
| ^^
|> 64:3:text_code.mf
|   return 0
|   ^^^^^^
|> 64:10:text_code.mf
|   return 0
|          ^
|> 64:12:text_code.mf
| 
| ^
|> 65:2:text_code.mf
| fun mutable_ref(a: &Foo):
| ^
|> 66:1:text_code.mf
| fun mutable_ref(a: &Foo):
| ^^^
|> 66:5:text_code.mf
| fun mutable_ref(a: &Foo):
|     ^^^^^^^^^^^
|> 66:16:text_code.mf
| fun mutable_ref(a: &Foo):
|                ^
|> 66:17:text_code.mf
| fun mutable_ref(a: &Foo):
|                 ^
|> 66:18:text_code.mf
| fun mutable_ref(a: &Foo):
|                  ^
|> 66:20:text_code.mf
| fun mutable_ref(a: &Foo):
|                    ^
|> 66:21:text_code.mf
| fun mutable_ref(a: &Foo):
|                     ^^^
|> 66:24:text_code.mf
| fun mutable_ref(a: &Foo):
|                        ^
|> 66:25:text_code.mf
| fun mutable_ref(a: &Foo):
|                         ^
|> 66:27:text_code.mf
|   a.a = 10
| ^^
|> 67:3:text_code.mf
|   a.a = 10
|   ^
|> 67:4:text_code.mf
|   a.a = 10
|    ^
|> 67:5:text_code.mf
|   a.a = 10
|     ^
|> 67:7:text_code.mf
|   a.a = 10
|       ^
|> 67:9:text_code.mf
|   a.a = 10
|         ^^
|> 67:12:text_code.mf
|   a.b = 20
| ^^
|> 68:3:text_code.mf
|   a.b = 20
|   ^
|> 68:4:text_code.mf
|   a.b = 20
|    ^
|> 68:5:text_code.mf
|   a.b = 20
|     ^
|> 68:7:text_code.mf
|   a.b = 20
|       ^
|> 68:9:text_code.mf
|   a.b = 20
|         ^^
|> 68:12:text_code.mf
|   a.c = 30
| ^^
|> 69:3:text_code.mf
|   a.c = 30
|   ^
|> 69:4:text_code.mf
|   a.c = 30
|    ^
|> 69:5:text_code.mf
|   a.c = 30
|     ^
|> 69:7:text_code.mf
|   a.c = 30
|       ^
|> 69:9:text_code.mf
|   a.c = 30
|         ^^
|> 69:12:text_code.mf
| 
| ^
|> 70:2:text_code.mf
| fun some_string -> &u8:
| ^
|> 71:1:text_code.mf
| fun some_string -> &u8:
| ^^^
|> 71:5:text_code.mf
| fun some_string -> &u8:
|     ^^^^^^^^^^^
|> 71:17:text_code.mf
| fun some_string -> &u8:
|                 ^^
|> 71:20:text_code.mf
| fun some_string -> &u8:
|                    ^
|> 71:21:text_code.mf
| fun some_string -> &u8:
|                     ^^
|> 71:23:text_code.mf
| fun some_string -> &u8:
|                       ^
|> 71:25:text_code.mf
|   "
| ^^
|> 72:3:text_code.mf
|   "
| hello there
|   "
| ^^^^^^^^^^^
Group "fun":
 Fun(None) "fun flo: pass":
  FunHeader "fun flo":
   Ident "flo"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun foo(): pass":
  FunHeader "fun foo()":
   Ident "foo"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun goo(a: i8, b: i8): pass":
  FunHeader "fun goo(a: i8, b: i8)":
   Ident "goo"
   FunArgument(false) "a: i8":
    Ident "a"
    Ident "i8"
   FunArgument(false) "b: i8":
    Ident "b"
    Ident "i8"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun loo:\r\n  noo::loo::[i8]()\r\n\r\n  let array = [1, 2, 3]\r\n  array[0] = 3\r\n  array[2] = always[1]\r\n  array[1] = 1\r\n\r\n  pass":
  FunHeader "fun loo":
   Ident "loo"
   None ""
  Group ":":
   Call(false) "noo::loo::[i8]()":
    Instantiation "noo::loo::[i8]":
     ExplicitPackage "noo::loo":
      Ident "noo"
      Ident "loo"
     Ident "i8"
   VarStatement(false) "let array = [1, 2, 3]":
    VarAssign "array = [1, 2, 3]":
     Group "array":
      Ident "array"
     None ""
     Group "=":
      Array "[":
       Lit "1"
       Lit "2"
       Lit "3"
   BinaryOp "array[0] = 3":
    Ident "="
    Index "array[0]":
     Ident "array"
     Lit "0"
    Lit "3"
   BinaryOp "array[2] = always[1]":
    Ident "="
    Index "array[2]":
     Ident "array"
     Lit "2"
    Index "always[1]":
     Ident "always"
     Lit "1"
   BinaryOp "array[1] = 1":
    Ident "="
    Index "array[1]":
     Ident "array"
     Lit "1"
    Lit "1"
   Pass "pass"
 Fun(None) "fun main -> i64:\r\n  return 10 + 4 - 2 * 1 + 8":
  FunHeader "fun main -> i64":
   Ident "main"
   Ident "i64"
  Group ":":
   ReturnStatement "return 10 + 4 - 2 * 1 + 8":
    BinaryOp "10 + 4 - 2 * 1 + 8":
     Ident "-"
     BinaryOp "10 + 4":
      Ident "+"
      Lit "10"
      Lit "4"
     BinaryOp "2 * 1 + 8":
      Ident "+"
      BinaryOp "2 * 1":
       Ident "*"
       Lit "2"
       Lit "1"
      Lit "8"
 Fun(None) "fun operator_stress_test -> i64:\r\n  return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
  FunHeader "fun operator_stress_test -> i64":
   Ident "operator_stress_test"
   Ident "i64"
  Group ":":
   ReturnStatement "return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
    BinaryOp "10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
     Ident "+"
     Lit "10"
     BinaryOp "2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
      Ident "|"
      BinaryOp "2 * 1 - 9":
       Ident "-"
       BinaryOp "2 * 1":
        Ident "*"
        Lit "2"
        Lit "1"
       Lit "9"
      BinaryOp "4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
       Ident "^"
       BinaryOp "4 & 1":
        Ident "&"
        Lit "4"
        Lit "1"
       BinaryOp "2 >> 1 << 7 min 20 max 10":
        Ident "max"
        BinaryOp "2 >> 1 << 7 min 20":
         Ident "min"
         BinaryOp "2 >> 1 << 7":
          Ident "<<"
          BinaryOp "2 >> 1":
           Ident ">>"
           Lit "2"
           Lit "1"
          Lit "7"
         Lit "20"
        Lit "10"
 Fun(None) "fun conditional -> i64:\r\n  if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
  FunHeader "fun conditional -> i64":
   Ident "conditional"
   Ident "i64"
  Group ":":
   IfExpr "if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
    Lit "false"
    Group ":":
     ReturnStatement "return 10":
      Lit "10"
    Group "elif":
     IfExpr "elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
      Lit "true"
      Group ":":
       ReturnStatement "return if true: 10 else: 20":
        IfExpr "if true: 10 else: 20":
         Lit "true"
         Group ":":
          Lit "10"
         Group ":":
          Lit "20"
      Group ":":
       ReturnStatement "return 0":
        Lit "0"
 Attribute "attr inline = always, call_conv = cold":
  AttributeAssign "inline = always":
   Ident "inline"
   Ident "always"
  AttributeAssign "call_conv = cold":
   Ident "call_conv"
   Ident "cold"
 Fun(None) "fun inline_fn -> u32:\r\n  return 10":
  FunHeader "fun inline_fn -> u32":
   Ident "inline_fn"
   Ident "u32"
  Group ":":
   ReturnStatement "return 10":
    Lit "10"
 Fun(None) "fun fib(v: i64) -> i64:\r\n  return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
  FunHeader "fun fib(v: i64) -> i64":
   Ident "fib"
   FunArgument(false) "v: i64":
    Ident "v"
    Ident "i64"
   Ident "i64"
  Group ":":
   ReturnStatement "return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
    IfExpr "if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
     BinaryOp "v == 0 | v == 1":
      Ident "|"
      BinaryOp "v == 0":
       Ident "=="
       Ident "v"
       Lit "0"
      BinaryOp "v == 1":
       Ident "=="
       Ident "v"
       Lit "1"
     Group ":":
      Lit "1"
     Group ":":
      BinaryOp "fib(v - 1) + fib(v - 2)":
       Ident "+"
       Call(false) "fib(v - 1)":
        Ident "fib"
        BinaryOp "v - 1":
         Ident "-"
         Ident "v"
         Lit "1"
       Call(false) "fib(v - 2)":
        Ident "fib"
        BinaryOp "v - 2":
         Ident "-"
         Ident "v"
         Lit "2"
 Fun(None) "fun fib_loop(v: i64) -> i64:\r\n  var a, b, c = 1\r\n  loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r\n  return c":
  FunHeader "fun fib_loop(v: i64) -> i64":
   Ident "fib_loop"
   FunArgument(false) "v: i64":
    Ident "v"
    Ident "i64"
   Ident "i64"
  Group ":":
   VarStatement(true) "var a, b, c = 1":
    VarAssign "a, b, c = 1":
     Group "a":
      Ident "a"
      Ident "b"
      Ident "c"
     None ""
     Group "=":
      Lit "1"
      Ident "a"
      Ident "a"
   Loop "loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a":
    Ident "'a"
    Group ":":
     BinaryOp "c = a + b":
      Ident "="
      Ident "c"
      BinaryOp "a + b":
       Ident "+"
       Ident "a"
       Ident "b"
     BinaryOp "a = b":
      Ident "="
      Ident "a"
      Ident "b"
     BinaryOp "b = c":
      Ident "="
      Ident "b"
      Ident "c"
     BinaryOp "v = v - 1":
      Ident "="
      Ident "v"
      BinaryOp "v - 1":
       Ident "-"
       Ident "v"
       Lit "1"
     IfExpr "if v == 0:\r\n      break'a":
      BinaryOp "v == 0":
       Ident "=="
       Ident "v"
       Lit "0"
      Group ":":
       Break "break'a":
        Ident "'a"
        None ""
      None ""
   ReturnStatement "return c":
    Ident "c"
 Fun(None) "fun unary_operators(a: i64) -> i64:\r\n  return -a + ~a + !a + ++a + --a":
  FunHeader "fun unary_operators(a: i64) -> i64":
   Ident "unary_operators"
   FunArgument(false) "a: i64":
    Ident "a"
    Ident "i64"
   Ident "i64"
  Group ":":
   ReturnStatement "return -a + ~a + !a + ++a + --a":
    BinaryOp "-a + ~a + !a + ++a + --a":
     Ident "+"
     BinaryOp "-a + ~a + !a + ++a":
      Ident "+"
      BinaryOp "-a + ~a + !a":
       Ident "+"
       BinaryOp "-a + ~a":
        Ident "+"
        UnaryOp "-a":
         Ident "-"
         Ident "a"
        UnaryOp "~a":
         Ident "~"
         Ident "a"
       UnaryOp "!a":
        Ident "!"
        Ident "a"
      UnaryOp "++a":
       Ident "++"
       Ident "a"
     UnaryOp "--a":
      Ident "--"
      Ident "a"
 StructDeclaration(None) "struct":
  Ident "Foo"
  Group ":":
   StructField(None, false) "a, b, c: int":
    Ident "a"
    Ident "b"
    Ident "c"
    Ident "int"
 StructDeclaration(None) "struct":
  Ident "Goo"
  Group ":":
   StructField(None, true) "foo: Foo":
    Ident "foo"
    Ident "Foo"
   StructField(None, false) "gva: int":
    Ident "gva"
    Ident "int"
 Fun(None) "fun strings -> i64:\r\n  var hello = \"hello\"\r\n  return 0":
  FunHeader "fun strings -> i64":
   Ident "strings"
   Ident "i64"
  Group ":":
   VarStatement(true) "var hello = \"hello\"":
    VarAssign "hello = \"hello\"":
     Group "hello":
      Ident "hello"
     None ""
     Group "=":
      Lit "\"hello\""
   ReturnStatement "return 0":
    Lit "0"
 Fun(None) "fun mutable_ref(a: &Foo):\r\n  a.a = 10\r\n  a.b = 20\r\n  a.c = 30":
  FunHeader "fun mutable_ref(a: &Foo)":
   Ident "mutable_ref"
   FunArgument(false) "a: &Foo":
    Ident "a"
    Ref "&Foo":
     Ident "Foo"
   None ""
  Group ":":
   BinaryOp "a.a = 10":
    Ident "="
    DotExpr "a.a":
     Ident "a"
     Ident "a"
    Lit "10"
   BinaryOp "a.b = 20":
    Ident "="
    DotExpr "a.b":
     Ident "a"
     Ident "b"
    Lit "20"
   BinaryOp "a.c = 30":
    Ident "="
    DotExpr "a.c":
     Ident "a"
     Ident "c"
    Lit "30"
 Fun(None) "fun some_string -> &u8:\r\n  \"\r\nhello there\r\n  \"":
  FunHeader "fun some_string -> &u8":
   Ident "some_string"
   Ref "&u8":
    Ident "u8"
  Group ":":
   Lit "\"\r\nhello there\r\n  \""

