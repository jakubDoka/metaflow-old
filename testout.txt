Ok(Arguments { filename: "file", flags: ["flag", "flag"], field_flags: [("flag", "value")], args: ["arg", "arg"] })
Ok(Arguments { filename: "file", flags: [], field_flags: [], args: ["string value"] })
Dummy1
[(Dummy(1), 0)]
0
Dummy(1)
[]
[(Dummy(1), 0)]
|> 1:1:text_code.mf
| var something = [1, 2, 3]
| ^
|> 2:1:text_code.mf
| var something = [1, 2, 3]
| ^^^
|> 2:5:text_code.mf
| var something = [1, 2, 3]
|     ^^^^^^^^^
|> 2:15:text_code.mf
| var something = [1, 2, 3]
|               ^
|> 2:17:text_code.mf
| var something = [1, 2, 3]
|                 ^
|> 2:18:text_code.mf
| var something = [1, 2, 3]
|                  ^
|> 2:19:text_code.mf
| var something = [1, 2, 3]
|                   ^
|> 2:21:text_code.mf
| var something = [1, 2, 3]
|                     ^
|> 2:22:text_code.mf
| var something = [1, 2, 3]
|                      ^
|> 2:24:text_code.mf
| var something = [1, 2, 3]
|                        ^
|> 2:25:text_code.mf
| var something = [1, 2, 3]
|                         ^
|> 2:27:text_code.mf
| let hello = "hello"
| ^
|> 3:1:text_code.mf
| let hello = "hello"
| ^^^
|> 3:5:text_code.mf
| let hello = "hello"
|     ^^^^^
|> 3:11:text_code.mf
| let hello = "hello"
|           ^
|> 3:13:text_code.mf
| let hello = "hello"
|             ^^^^^^^
|> 3:21:text_code.mf
| 
| ^
|> 4:2:text_code.mf
| fun something -> fun(int, int) -> int:
| ^
|> 5:1:text_code.mf
| fun something -> fun(int, int) -> int:
| ^^^
|> 5:5:text_code.mf
| fun something -> fun(int, int) -> int:
|     ^^^^^^^^^
|> 5:15:text_code.mf
| fun something -> fun(int, int) -> int:
|               ^^
|> 5:18:text_code.mf
| fun something -> fun(int, int) -> int:
|                  ^^^
|> 5:21:text_code.mf
| fun something -> fun(int, int) -> int:
|                     ^
|> 5:22:text_code.mf
| fun something -> fun(int, int) -> int:
|                      ^^^
|> 5:25:text_code.mf
| fun something -> fun(int, int) -> int:
|                         ^
|> 5:27:text_code.mf
| fun something -> fun(int, int) -> int:
|                           ^^^
|> 5:30:text_code.mf
| fun something -> fun(int, int) -> int:
|                              ^
|> 5:32:text_code.mf
| fun something -> fun(int, int) -> int:
|                                ^^
|> 5:35:text_code.mf
| fun something -> fun(int, int) -> int:
|                                   ^^^
|> 5:38:text_code.mf
| fun something -> fun(int, int) -> int:
|                                      ^
|> 5:40:text_code.mf
|   return fun(a, b: int) -> int: a + b
| ^^
|> 6:3:text_code.mf
|   return fun(a, b: int) -> int: a + b
|   ^^^^^^
|> 6:10:text_code.mf
|   return fun(a, b: int) -> int: a + b
|          ^^^
|> 6:13:text_code.mf
|   return fun(a, b: int) -> int: a + b
|             ^
|> 6:14:text_code.mf
|   return fun(a, b: int) -> int: a + b
|              ^
|> 6:15:text_code.mf
|   return fun(a, b: int) -> int: a + b
|               ^
|> 6:17:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                 ^
|> 6:18:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                  ^
|> 6:20:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                    ^^^
|> 6:23:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                       ^
|> 6:25:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                         ^^
|> 6:28:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                            ^^^
|> 6:31:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                               ^
|> 6:33:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                                 ^
|> 6:35:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                                   ^
|> 6:37:text_code.mf
|   return fun(a, b: int) -> int: a + b
|                                     ^
|> 6:39:text_code.mf
| 
| ^
|> 7:2:text_code.mf
| struct Scope
| ^
|> 8:1:text_code.mf
| struct Scope
| ^^^^^^
|> 8:8:text_code.mf
| struct Scope
|        ^^^^^
|> 8:14:text_code.mf
| 
| ^
|> 9:2:text_code.mf
| impl Scope:
| ^
|> 10:1:text_code.mf
| impl Scope:
| ^^^^
|> 10:6:text_code.mf
| impl Scope:
|      ^^^^^
|> 10:11:text_code.mf
| impl Scope:
|           ^
|> 10:13:text_code.mf
|   fun new -> Self:
| ^^
|> 11:3:text_code.mf
|   fun new -> Self:
|   ^^^
|> 11:7:text_code.mf
|   fun new -> Self:
|       ^^^
|> 11:11:text_code.mf
|   fun new -> Self:
|           ^^
|> 11:14:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 11:18:text_code.mf
|   fun new -> Self:
|                  ^
|> 11:20:text_code.mf
|     return
| ^^^^
|> 12:5:text_code.mf
|     return
|     ^^^^^^
|> 12:12:text_code.mf
|   
| ^^^
|> 13:4:text_code.mf
|   fun do_nothing(s: Self):
| ^^
|> 14:3:text_code.mf
|   fun do_nothing(s: Self):
|   ^^^
|> 14:7:text_code.mf
|   fun do_nothing(s: Self):
|       ^^^^^^^^^^
|> 14:17:text_code.mf
|   fun do_nothing(s: Self):
|                 ^
|> 14:18:text_code.mf
|   fun do_nothing(s: Self):
|                  ^
|> 14:19:text_code.mf
|   fun do_nothing(s: Self):
|                   ^
|> 14:21:text_code.mf
|   fun do_nothing(s: Self):
|                     ^^^^
|> 14:25:text_code.mf
|   fun do_nothing(s: Self):
|                         ^
|> 14:26:text_code.mf
|   fun do_nothing(s: Self):
|                          ^
|> 14:28:text_code.mf
|     pass
| ^^^^
|> 15:5:text_code.mf
|     pass
|     ^^^^
|> 15:10:text_code.mf
| 
| ^
|> 16:2:text_code.mf
| struct Template[T]
| ^
|> 17:1:text_code.mf
| struct Template[T]
| ^^^^^^
|> 17:8:text_code.mf
| struct Template[T]
|        ^^^^^^^^
|> 17:16:text_code.mf
| struct Template[T]
|                ^
|> 17:17:text_code.mf
| struct Template[T]
|                 ^
|> 17:18:text_code.mf
| struct Template[T]
|                  ^
|> 17:20:text_code.mf
| 
| ^
|> 18:2:text_code.mf
| impl[T] Template[T]:
| ^
|> 19:1:text_code.mf
| impl[T] Template[T]:
| ^^^^
|> 19:5:text_code.mf
| impl[T] Template[T]:
|     ^
|> 19:6:text_code.mf
| impl[T] Template[T]:
|      ^
|> 19:7:text_code.mf
| impl[T] Template[T]:
|       ^
|> 19:9:text_code.mf
| impl[T] Template[T]:
|         ^^^^^^^^
|> 19:17:text_code.mf
| impl[T] Template[T]:
|                 ^
|> 19:18:text_code.mf
| impl[T] Template[T]:
|                  ^
|> 19:19:text_code.mf
| impl[T] Template[T]:
|                   ^
|> 19:20:text_code.mf
| impl[T] Template[T]:
|                    ^
|> 19:22:text_code.mf
|   fun new -> Self:
| ^^
|> 20:3:text_code.mf
|   fun new -> Self:
|   ^^^
|> 20:7:text_code.mf
|   fun new -> Self:
|       ^^^
|> 20:11:text_code.mf
|   fun new -> Self:
|           ^^
|> 20:14:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 20:18:text_code.mf
|   fun new -> Self:
|                  ^
|> 20:20:text_code.mf
|     return
| ^^^^
|> 21:5:text_code.mf
|     return
|     ^^^^^^
|> 21:12:text_code.mf
|   
| ^^^
|> 22:4:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
| ^^
|> 23:3:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|   ^^^
|> 23:7:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|       ^^^^^^^^^^
|> 23:17:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                 ^
|> 23:18:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                  ^
|> 23:19:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                   ^
|> 23:21:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                     ^^^^
|> 23:25:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                         ^
|> 23:27:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                           ^^^^^
|> 23:32:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                ^
|> 23:34:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                  ^
|> 23:35:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                   ^
|> 23:37:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                     ^^
|> 23:40:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                        ^
|> 23:41:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                         ^
|> 23:43:text_code.mf
|     value
| ^^^^
|> 24:5:text_code.mf
|     value
|     ^^^^^
|> 24:11:text_code.mf
| 
| ^
|> 25:2:text_code.mf
| fun use_chain:
| ^
|> 26:1:text_code.mf
| fun use_chain:
| ^^^
|> 26:5:text_code.mf
| fun use_chain:
|     ^^^^^^^^^
|> 26:14:text_code.mf
| fun use_chain:
|              ^
|> 26:16:text_code.mf
|   module::Type::method::[param]()
| ^^
|> 27:3:text_code.mf
|   module::Type::method::[param]()
|   ^^^^^^
|> 27:9:text_code.mf
|   module::Type::method::[param]()
|         ^^
|> 27:11:text_code.mf
|   module::Type::method::[param]()
|           ^^^^
|> 27:15:text_code.mf
|   module::Type::method::[param]()
|               ^^
|> 27:17:text_code.mf
|   module::Type::method::[param]()
|                 ^^^^^^
|> 27:23:text_code.mf
|   module::Type::method::[param]()
|                       ^^
|> 27:25:text_code.mf
|   module::Type::method::[param]()
|                         ^
|> 27:26:text_code.mf
|   module::Type::method::[param]()
|                          ^^^^^
|> 27:31:text_code.mf
|   module::Type::method::[param]()
|                               ^
|> 27:32:text_code.mf
|   module::Type::method::[param]()
|                                ^
|> 27:33:text_code.mf
|   module::Type::method::[param]()
|                                 ^
|> 27:35:text_code.mf
| 
| ^
|> 28:2:text_code.mf
| fun flo: pass
| ^
|> 29:1:text_code.mf
| fun flo: pass
| ^^^
|> 29:5:text_code.mf
| fun flo: pass
|     ^^^
|> 29:8:text_code.mf
| fun flo: pass
|        ^
|> 29:10:text_code.mf
| fun flo: pass
|          ^^^^
|> 29:15:text_code.mf
| 
| ^
|> 30:2:text_code.mf
| fun foo(): pass
| ^
|> 31:1:text_code.mf
| fun foo(): pass
| ^^^
|> 31:5:text_code.mf
| fun foo(): pass
|     ^^^
|> 31:8:text_code.mf
| fun foo(): pass
|        ^
|> 31:9:text_code.mf
| fun foo(): pass
|         ^
|> 31:10:text_code.mf
| fun foo(): pass
|          ^
|> 31:12:text_code.mf
| fun foo(): pass
|            ^^^^
|> 31:17:text_code.mf
| 
| ^
|> 32:2:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^
|> 33:1:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^^^
|> 33:5:text_code.mf
| fun goo(a: i8, b: i8): pass
|     ^^^
|> 33:8:text_code.mf
| fun goo(a: i8, b: i8): pass
|        ^
|> 33:9:text_code.mf
| fun goo(a: i8, b: i8): pass
|         ^
|> 33:10:text_code.mf
| fun goo(a: i8, b: i8): pass
|          ^
|> 33:12:text_code.mf
| fun goo(a: i8, b: i8): pass
|            ^^
|> 33:14:text_code.mf
| fun goo(a: i8, b: i8): pass
|              ^
|> 33:16:text_code.mf
| fun goo(a: i8, b: i8): pass
|                ^
|> 33:17:text_code.mf
| fun goo(a: i8, b: i8): pass
|                 ^
|> 33:19:text_code.mf
| fun goo(a: i8, b: i8): pass
|                   ^^
|> 33:21:text_code.mf
| fun goo(a: i8, b: i8): pass
|                     ^
|> 33:22:text_code.mf
| fun goo(a: i8, b: i8): pass
|                      ^
|> 33:24:text_code.mf
| fun goo(a: i8, b: i8): pass
|                        ^^^^
|> 33:29:text_code.mf
| 
| ^
|> 34:2:text_code.mf
| fun loo:
| ^
|> 35:1:text_code.mf
| fun loo:
| ^^^
|> 35:5:text_code.mf
| fun loo:
|     ^^^
|> 35:8:text_code.mf
| fun loo:
|        ^
|> 35:10:text_code.mf
|   noo::loo::[i8]()
| ^^
|> 36:3:text_code.mf
|   noo::loo::[i8]()
|   ^^^
|> 36:6:text_code.mf
|   noo::loo::[i8]()
|      ^^
|> 36:8:text_code.mf
|   noo::loo::[i8]()
|        ^^^
|> 36:11:text_code.mf
|   noo::loo::[i8]()
|           ^^
|> 36:13:text_code.mf
|   noo::loo::[i8]()
|             ^
|> 36:14:text_code.mf
|   noo::loo::[i8]()
|              ^^
|> 36:16:text_code.mf
|   noo::loo::[i8]()
|                ^
|> 36:17:text_code.mf
|   noo::loo::[i8]()
|                 ^
|> 36:18:text_code.mf
|   noo::loo::[i8]()
|                  ^
|> 36:20:text_code.mf
| 
| ^
|> 37:2:text_code.mf
|   let array = [1, 2, 3]
| ^^
|> 38:3:text_code.mf
|   let array = [1, 2, 3]
|   ^^^
|> 38:7:text_code.mf
|   let array = [1, 2, 3]
|       ^^^^^
|> 38:13:text_code.mf
|   let array = [1, 2, 3]
|             ^
|> 38:15:text_code.mf
|   let array = [1, 2, 3]
|               ^
|> 38:16:text_code.mf
|   let array = [1, 2, 3]
|                ^
|> 38:17:text_code.mf
|   let array = [1, 2, 3]
|                 ^
|> 38:19:text_code.mf
|   let array = [1, 2, 3]
|                   ^
|> 38:20:text_code.mf
|   let array = [1, 2, 3]
|                    ^
|> 38:22:text_code.mf
|   let array = [1, 2, 3]
|                      ^
|> 38:23:text_code.mf
|   let array = [1, 2, 3]
|                       ^
|> 38:25:text_code.mf
|   array[0] = 3
| ^^
|> 39:3:text_code.mf
|   array[0] = 3
|   ^^^^^
|> 39:8:text_code.mf
|   array[0] = 3
|        ^
|> 39:9:text_code.mf
|   array[0] = 3
|         ^
|> 39:10:text_code.mf
|   array[0] = 3
|          ^
|> 39:12:text_code.mf
|   array[0] = 3
|            ^
|> 39:14:text_code.mf
|   array[0] = 3
|              ^
|> 39:16:text_code.mf
|   array[2] = always[1]
| ^^
|> 40:3:text_code.mf
|   array[2] = always[1]
|   ^^^^^
|> 40:8:text_code.mf
|   array[2] = always[1]
|        ^
|> 40:9:text_code.mf
|   array[2] = always[1]
|         ^
|> 40:10:text_code.mf
|   array[2] = always[1]
|          ^
|> 40:12:text_code.mf
|   array[2] = always[1]
|            ^
|> 40:14:text_code.mf
|   array[2] = always[1]
|              ^^^^^^
|> 40:20:text_code.mf
|   array[2] = always[1]
|                    ^
|> 40:21:text_code.mf
|   array[2] = always[1]
|                     ^
|> 40:22:text_code.mf
|   array[2] = always[1]
|                      ^
|> 40:24:text_code.mf
|   array[1] = 1
| ^^
|> 41:3:text_code.mf
|   array[1] = 1
|   ^^^^^
|> 41:8:text_code.mf
|   array[1] = 1
|        ^
|> 41:9:text_code.mf
|   array[1] = 1
|         ^
|> 41:10:text_code.mf
|   array[1] = 1
|          ^
|> 41:12:text_code.mf
|   array[1] = 1
|            ^
|> 41:14:text_code.mf
|   array[1] = 1
|              ^
|> 41:16:text_code.mf
| 
| ^
|> 42:2:text_code.mf
|   pass
| ^^
|> 43:3:text_code.mf
|   pass
|   ^^^^
|> 43:8:text_code.mf
| 
| ^
|> 44:2:text_code.mf
| fun main -> i64:
| ^
|> 45:1:text_code.mf
| fun main -> i64:
| ^^^
|> 45:5:text_code.mf
| fun main -> i64:
|     ^^^^
|> 45:10:text_code.mf
| fun main -> i64:
|          ^^
|> 45:13:text_code.mf
| fun main -> i64:
|             ^^^
|> 45:16:text_code.mf
| fun main -> i64:
|                ^
|> 45:18:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
| ^^
|> 46:3:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|   ^^^^^^
|> 46:10:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|          ^^
|> 46:13:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|             ^
|> 46:15:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|               ^
|> 46:17:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                 ^
|> 46:19:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                   ^
|> 46:21:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                     ^
|> 46:23:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                       ^
|> 46:25:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                         ^
|> 46:27:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                           ^
|> 46:29:text_code.mf
| 
| ^
|> 47:2:text_code.mf
| fun operator_stress_test -> i64:
| ^
|> 48:1:text_code.mf
| fun operator_stress_test -> i64:
| ^^^
|> 48:5:text_code.mf
| fun operator_stress_test -> i64:
|     ^^^^^^^^^^^^^^^^^^^^
|> 48:26:text_code.mf
| fun operator_stress_test -> i64:
|                          ^^
|> 48:29:text_code.mf
| fun operator_stress_test -> i64:
|                             ^^^
|> 48:32:text_code.mf
| fun operator_stress_test -> i64:
|                                ^
|> 48:34:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
| ^^
|> 49:3:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|   ^^^^^^
|> 49:10:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|          ^^
|> 49:13:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|             ^
|> 49:15:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|               ^
|> 49:17:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                 ^
|> 49:19:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                   ^
|> 49:21:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                     ^
|> 49:23:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                       ^
|> 49:25:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                         ^
|> 49:27:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                           ^
|> 49:29:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                             ^
|> 49:31:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                               ^
|> 49:33:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                 ^
|> 49:35:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                   ^
|> 49:37:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                     ^^
|> 49:40:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                        ^
|> 49:42:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                          ^^
|> 49:45:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                             ^
|> 49:47:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                               ^^^
|> 49:51:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                   ^^
|> 49:54:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                      ^^^
|> 49:58:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                          ^^
|> 49:61:text_code.mf
| 
| ^
|> 50:2:text_code.mf
| fun conditional -> i64:
| ^
|> 51:1:text_code.mf
| fun conditional -> i64:
| ^^^
|> 51:5:text_code.mf
| fun conditional -> i64:
|     ^^^^^^^^^^^
|> 51:17:text_code.mf
| fun conditional -> i64:
|                 ^^
|> 51:20:text_code.mf
| fun conditional -> i64:
|                    ^^^
|> 51:23:text_code.mf
| fun conditional -> i64:
|                       ^
|> 51:25:text_code.mf
|   if false:
| ^^
|> 52:3:text_code.mf
|   if false:
|   ^^
|> 52:6:text_code.mf
|   if false:
|      ^^^^^
|> 52:11:text_code.mf
|   if false:
|           ^
|> 52:13:text_code.mf
|     return 10
| ^^^^
|> 53:5:text_code.mf
|     return 10
|     ^^^^^^
|> 53:12:text_code.mf
|     return 10
|            ^^
|> 53:15:text_code.mf
|   elif true:
| ^^
|> 54:3:text_code.mf
|   elif true:
|   ^^^^
|> 54:8:text_code.mf
|   elif true:
|        ^^^^
|> 54:12:text_code.mf
|   elif true:
|            ^
|> 54:14:text_code.mf
|     return if true: 10 else: 20
| ^^^^
|> 55:5:text_code.mf
|     return if true: 10 else: 20
|     ^^^^^^
|> 55:12:text_code.mf
|     return if true: 10 else: 20
|            ^^
|> 55:15:text_code.mf
|     return if true: 10 else: 20
|               ^^^^
|> 55:19:text_code.mf
|     return if true: 10 else: 20
|                   ^
|> 55:21:text_code.mf
|     return if true: 10 else: 20
|                     ^^
|> 55:24:text_code.mf
|     return if true: 10 else: 20
|                        ^^^^
|> 55:28:text_code.mf
|     return if true: 10 else: 20
|                            ^
|> 55:30:text_code.mf
|     return if true: 10 else: 20
|                              ^^
|> 55:33:text_code.mf
|   else:
| ^^
|> 56:3:text_code.mf
|   else:
|   ^^^^
|> 56:7:text_code.mf
|   else:
|       ^
|> 56:9:text_code.mf
|     return 0
| ^^^^
|> 57:5:text_code.mf
|     return 0
|     ^^^^^^
|> 57:12:text_code.mf
|     return 0
|            ^
|> 57:14:text_code.mf
| 
| ^
|> 58:2:text_code.mf
| attr inline = always, call_conv = cold
| ^
|> 59:1:text_code.mf
| attr inline = always, call_conv = cold
| ^^^^
|> 59:6:text_code.mf
| attr inline = always, call_conv = cold
|      ^^^^^^
|> 59:13:text_code.mf
| attr inline = always, call_conv = cold
|             ^
|> 59:15:text_code.mf
| attr inline = always, call_conv = cold
|               ^^^^^^
|> 59:21:text_code.mf
| attr inline = always, call_conv = cold
|                     ^
|> 59:23:text_code.mf
| attr inline = always, call_conv = cold
|                       ^^^^^^^^^
|> 59:33:text_code.mf
| attr inline = always, call_conv = cold
|                                 ^
|> 59:35:text_code.mf
| attr inline = always, call_conv = cold
|                                   ^^^^
|> 59:40:text_code.mf
| fun inline_fn -> u32:
| ^
|> 60:1:text_code.mf
| fun inline_fn -> u32:
| ^^^
|> 60:5:text_code.mf
| fun inline_fn -> u32:
|     ^^^^^^^^^
|> 60:15:text_code.mf
| fun inline_fn -> u32:
|               ^^
|> 60:18:text_code.mf
| fun inline_fn -> u32:
|                  ^^^
|> 60:21:text_code.mf
| fun inline_fn -> u32:
|                     ^
|> 60:23:text_code.mf
|   return 10
| ^^
|> 61:3:text_code.mf
|   return 10
|   ^^^^^^
|> 61:10:text_code.mf
|   return 10
|          ^^
|> 61:13:text_code.mf
| 
| ^
|> 62:2:text_code.mf
| fun fib(v: i64) -> i64:
| ^
|> 63:1:text_code.mf
| fun fib(v: i64) -> i64:
| ^^^
|> 63:5:text_code.mf
| fun fib(v: i64) -> i64:
|     ^^^
|> 63:8:text_code.mf
| fun fib(v: i64) -> i64:
|        ^
|> 63:9:text_code.mf
| fun fib(v: i64) -> i64:
|         ^
|> 63:10:text_code.mf
| fun fib(v: i64) -> i64:
|          ^
|> 63:12:text_code.mf
| fun fib(v: i64) -> i64:
|            ^^^
|> 63:15:text_code.mf
| fun fib(v: i64) -> i64:
|               ^
|> 63:17:text_code.mf
| fun fib(v: i64) -> i64:
|                 ^^
|> 63:20:text_code.mf
| fun fib(v: i64) -> i64:
|                    ^^^
|> 63:23:text_code.mf
| fun fib(v: i64) -> i64:
|                       ^
|> 63:25:text_code.mf
|   return if v == 0 | v == 1:
| ^^
|> 64:3:text_code.mf
|   return if v == 0 | v == 1:
|   ^^^^^^
|> 64:10:text_code.mf
|   return if v == 0 | v == 1:
|          ^^
|> 64:13:text_code.mf
|   return if v == 0 | v == 1:
|             ^
|> 64:15:text_code.mf
|   return if v == 0 | v == 1:
|               ^^
|> 64:18:text_code.mf
|   return if v == 0 | v == 1:
|                  ^
|> 64:20:text_code.mf
|   return if v == 0 | v == 1:
|                    ^
|> 64:22:text_code.mf
|   return if v == 0 | v == 1:
|                      ^
|> 64:24:text_code.mf
|   return if v == 0 | v == 1:
|                        ^^
|> 64:27:text_code.mf
|   return if v == 0 | v == 1:
|                           ^
|> 64:28:text_code.mf
|   return if v == 0 | v == 1:
|                            ^
|> 64:30:text_code.mf
|     1
| ^^^^
|> 65:5:text_code.mf
|     1
|     ^
|> 65:7:text_code.mf
|   else:
| ^^
|> 66:3:text_code.mf
|   else:
|   ^^^^
|> 66:7:text_code.mf
|   else:
|       ^
|> 66:9:text_code.mf
|     fib(v - 1) + fib(v - 2)
| ^^^^
|> 67:5:text_code.mf
|     fib(v - 1) + fib(v - 2)
|     ^^^
|> 67:8:text_code.mf
|     fib(v - 1) + fib(v - 2)
|        ^
|> 67:9:text_code.mf
|     fib(v - 1) + fib(v - 2)
|         ^
|> 67:11:text_code.mf
|     fib(v - 1) + fib(v - 2)
|           ^
|> 67:13:text_code.mf
|     fib(v - 1) + fib(v - 2)
|             ^
|> 67:14:text_code.mf
|     fib(v - 1) + fib(v - 2)
|              ^
|> 67:16:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                ^
|> 67:18:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                  ^^^
|> 67:21:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                     ^
|> 67:22:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                      ^
|> 67:24:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                        ^
|> 67:26:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                          ^
|> 67:27:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                           ^
|> 67:29:text_code.mf
| 
| ^
|> 68:2:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^
|> 69:1:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^^^
|> 69:5:text_code.mf
| fun fib_loop(v: i64) -> i64:
|     ^^^^^^^^
|> 69:13:text_code.mf
| fun fib_loop(v: i64) -> i64:
|             ^
|> 69:14:text_code.mf
| fun fib_loop(v: i64) -> i64:
|              ^
|> 69:15:text_code.mf
| fun fib_loop(v: i64) -> i64:
|               ^
|> 69:17:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                 ^^^
|> 69:20:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                    ^
|> 69:22:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                      ^^
|> 69:25:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                         ^^^
|> 69:28:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                            ^
|> 69:30:text_code.mf
|   var a, b, c = 1
| ^^
|> 70:3:text_code.mf
|   var a, b, c = 1
|   ^^^
|> 70:7:text_code.mf
|   var a, b, c = 1
|       ^
|> 70:8:text_code.mf
|   var a, b, c = 1
|        ^
|> 70:10:text_code.mf
|   var a, b, c = 1
|          ^
|> 70:11:text_code.mf
|   var a, b, c = 1
|           ^
|> 70:13:text_code.mf
|   var a, b, c = 1
|             ^
|> 70:15:text_code.mf
|   var a, b, c = 1
|               ^
|> 70:17:text_code.mf
|   var a, b, c = 1
|                 ^
|> 70:19:text_code.mf
|   loop'a:
| ^^
|> 71:3:text_code.mf
|   loop'a:
|   ^^^^
|> 71:7:text_code.mf
|   loop'a:
|       ^^
|> 71:9:text_code.mf
|   loop'a:
|         ^
|> 71:11:text_code.mf
|     c = a + b
| ^^^^
|> 72:5:text_code.mf
|     c = a + b
|     ^
|> 72:7:text_code.mf
|     c = a + b
|       ^
|> 72:9:text_code.mf
|     c = a + b
|         ^
|> 72:11:text_code.mf
|     c = a + b
|           ^
|> 72:13:text_code.mf
|     c = a + b
|             ^
|> 72:15:text_code.mf
|     a = b
| ^^^^
|> 73:5:text_code.mf
|     a = b
|     ^
|> 73:7:text_code.mf
|     a = b
|       ^
|> 73:9:text_code.mf
|     a = b
|         ^
|> 73:11:text_code.mf
|     b = c
| ^^^^
|> 74:5:text_code.mf
|     b = c
|     ^
|> 74:7:text_code.mf
|     b = c
|       ^
|> 74:9:text_code.mf
|     b = c
|         ^
|> 74:11:text_code.mf
|     v = v - 1
| ^^^^
|> 75:5:text_code.mf
|     v = v - 1
|     ^
|> 75:7:text_code.mf
|     v = v - 1
|       ^
|> 75:9:text_code.mf
|     v = v - 1
|         ^
|> 75:11:text_code.mf
|     v = v - 1
|           ^
|> 75:13:text_code.mf
|     v = v - 1
|             ^
|> 75:15:text_code.mf
|     if v == 0:
| ^^^^
|> 76:5:text_code.mf
|     if v == 0:
|     ^^
|> 76:8:text_code.mf
|     if v == 0:
|        ^
|> 76:10:text_code.mf
|     if v == 0:
|          ^^
|> 76:13:text_code.mf
|     if v == 0:
|             ^
|> 76:14:text_code.mf
|     if v == 0:
|              ^
|> 76:16:text_code.mf
|       break'a
| ^^^^^^
|> 77:7:text_code.mf
|       break'a
|       ^^^^^
|> 77:12:text_code.mf
|       break'a
|            ^^
|> 77:15:text_code.mf
|   return c
| ^^
|> 78:3:text_code.mf
|   return c
|   ^^^^^^
|> 78:10:text_code.mf
|   return c
|          ^
|> 78:12:text_code.mf
| 
| ^
|> 79:2:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^
|> 80:1:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^^^
|> 80:5:text_code.mf
| fun unary_operators(a: i64) -> i64:
|     ^^^^^^^^^^^^^^^
|> 80:20:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                    ^
|> 80:21:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                     ^
|> 80:22:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                      ^
|> 80:24:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                        ^^^
|> 80:27:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                           ^
|> 80:29:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                             ^^
|> 80:32:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                ^^^
|> 80:35:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                   ^
|> 80:37:text_code.mf
|   return -a + ~a + !a + ++a + --a
| ^^
|> 81:3:text_code.mf
|   return -a + ~a + !a + ++a + --a
|   ^^^^^^
|> 81:10:text_code.mf
|   return -a + ~a + !a + ++a + --a
|          ^
|> 81:11:text_code.mf
|   return -a + ~a + !a + ++a + --a
|           ^
|> 81:13:text_code.mf
|   return -a + ~a + !a + ++a + --a
|             ^
|> 81:15:text_code.mf
|   return -a + ~a + !a + ++a + --a
|               ^
|> 81:16:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                ^
|> 81:18:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                  ^
|> 81:20:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                    ^
|> 81:21:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                     ^
|> 81:23:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                       ^
|> 81:25:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                         ^^
|> 81:27:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                           ^
|> 81:29:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                             ^
|> 81:31:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                               ^^
|> 81:33:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                                 ^
|> 81:35:text_code.mf
| 
| ^
|> 82:2:text_code.mf
| struct Foo:
| ^
|> 83:1:text_code.mf
| struct Foo:
| ^^^^^^
|> 83:8:text_code.mf
| struct Foo:
|        ^^^
|> 83:11:text_code.mf
| struct Foo:
|           ^
|> 83:13:text_code.mf
|   a, b, c: int
| ^^
|> 84:3:text_code.mf
|   a, b, c: int
|   ^
|> 84:4:text_code.mf
|   a, b, c: int
|    ^
|> 84:6:text_code.mf
|   a, b, c: int
|      ^
|> 84:7:text_code.mf
|   a, b, c: int
|       ^
|> 84:9:text_code.mf
|   a, b, c: int
|         ^
|> 84:10:text_code.mf
|   a, b, c: int
|          ^
|> 84:12:text_code.mf
|   a, b, c: int
|            ^^^
|> 84:16:text_code.mf
| 
| ^
|> 85:2:text_code.mf
| struct Goo:
| ^
|> 86:1:text_code.mf
| struct Goo:
| ^^^^^^
|> 86:8:text_code.mf
| struct Goo:
|        ^^^
|> 86:11:text_code.mf
| struct Goo:
|           ^
|> 86:13:text_code.mf
|   embed foo: Foo
| ^^
|> 87:3:text_code.mf
|   embed foo: Foo
|   ^^^^^
|> 87:9:text_code.mf
|   embed foo: Foo
|         ^^^
|> 87:12:text_code.mf
|   embed foo: Foo
|            ^
|> 87:14:text_code.mf
|   embed foo: Foo
|              ^^^
|> 87:18:text_code.mf
|   gva: int
| ^^
|> 88:3:text_code.mf
|   gva: int
|   ^^^
|> 88:6:text_code.mf
|   gva: int
|      ^
|> 88:8:text_code.mf
|   gva: int
|        ^^^
|> 88:12:text_code.mf
| 
| ^
|> 89:2:text_code.mf
| fun strings -> i64:
| ^
|> 90:1:text_code.mf
| fun strings -> i64:
| ^^^
|> 90:5:text_code.mf
| fun strings -> i64:
|     ^^^^^^^
|> 90:13:text_code.mf
| fun strings -> i64:
|             ^^
|> 90:16:text_code.mf
| fun strings -> i64:
|                ^^^
|> 90:19:text_code.mf
| fun strings -> i64:
|                   ^
|> 90:21:text_code.mf
|   var hello = "hello"
| ^^
|> 91:3:text_code.mf
|   var hello = "hello"
|   ^^^
|> 91:7:text_code.mf
|   var hello = "hello"
|       ^^^^^
|> 91:13:text_code.mf
|   var hello = "hello"
|             ^
|> 91:15:text_code.mf
|   var hello = "hello"
|               ^^^^^^^
|> 91:23:text_code.mf
|   return 0
| ^^
|> 92:3:text_code.mf
|   return 0
|   ^^^^^^
|> 92:10:text_code.mf
|   return 0
|          ^
|> 92:12:text_code.mf
| 
| ^
|> 93:2:text_code.mf
| fun mutable_ref(a: &Foo):
| ^
|> 94:1:text_code.mf
| fun mutable_ref(a: &Foo):
| ^^^
|> 94:5:text_code.mf
| fun mutable_ref(a: &Foo):
|     ^^^^^^^^^^^
|> 94:16:text_code.mf
| fun mutable_ref(a: &Foo):
|                ^
|> 94:17:text_code.mf
| fun mutable_ref(a: &Foo):
|                 ^
|> 94:18:text_code.mf
| fun mutable_ref(a: &Foo):
|                  ^
|> 94:20:text_code.mf
| fun mutable_ref(a: &Foo):
|                    ^
|> 94:21:text_code.mf
| fun mutable_ref(a: &Foo):
|                     ^^^
|> 94:24:text_code.mf
| fun mutable_ref(a: &Foo):
|                        ^
|> 94:25:text_code.mf
| fun mutable_ref(a: &Foo):
|                         ^
|> 94:27:text_code.mf
|   a.a = 10
| ^^
|> 95:3:text_code.mf
|   a.a = 10
|   ^
|> 95:4:text_code.mf
|   a.a = 10
|    ^
|> 95:5:text_code.mf
|   a.a = 10
|     ^
|> 95:7:text_code.mf
|   a.a = 10
|       ^
|> 95:9:text_code.mf
|   a.a = 10
|         ^^
|> 95:12:text_code.mf
|   a.b = 20
| ^^
|> 96:3:text_code.mf
|   a.b = 20
|   ^
|> 96:4:text_code.mf
|   a.b = 20
|    ^
|> 96:5:text_code.mf
|   a.b = 20
|     ^
|> 96:7:text_code.mf
|   a.b = 20
|       ^
|> 96:9:text_code.mf
|   a.b = 20
|         ^^
|> 96:12:text_code.mf
|   a.c = 30
| ^^
|> 97:3:text_code.mf
|   a.c = 30
|   ^
|> 97:4:text_code.mf
|   a.c = 30
|    ^
|> 97:5:text_code.mf
|   a.c = 30
|     ^
|> 97:7:text_code.mf
|   a.c = 30
|       ^
|> 97:9:text_code.mf
|   a.c = 30
|         ^^
|> 97:12:text_code.mf
| 
| ^
|> 98:2:text_code.mf
| fun some_string -> &u8:
| ^
|> 99:1:text_code.mf
| fun some_string -> &u8:
| ^^^
|> 99:5:text_code.mf
| fun some_string -> &u8:
|     ^^^^^^^^^^^
|> 99:17:text_code.mf
| fun some_string -> &u8:
|                 ^^
|> 99:20:text_code.mf
| fun some_string -> &u8:
|                    ^
|> 99:21:text_code.mf
| fun some_string -> &u8:
|                     ^^
|> 99:23:text_code.mf
| fun some_string -> &u8:
|                       ^
|> 99:25:text_code.mf
|   "
| ^^
|> 100:3:text_code.mf
|   "
| hello there
|   "
| ^^^^^^^^^^^
Group "\n":
 VarStatement(None, true) "var something = [1, 2, 3]":
  VarAssign "something = [1, 2, 3]":
   Group "something":
    Ident "something"
   None ""
   Group "=":
    Array "[":
     Lit "1"
     Lit "2"
     Lit "3"
 VarStatement(None, false) "let hello = \"hello\"":
  VarAssign "hello = \"hello\"":
   Group "hello":
    Ident "hello"
   None ""
   Group "=":
    Lit "\"hello\""
 Fun(None) "fun something -> fun(int, int) -> int:\r\n  return fun(a, b: int) -> int: a + b":
  FunHeader "fun something -> fun(int, int) -> int:\r\n  return fun(a, b: int) -> int: a + b":
   Ident "something"
   Fun(None) "fun(int, int) -> int:\r\n  return fun(a, b: int) -> int: a + b":
    FunHeader "fun(int, int) -> int":
     None ""
     Ident "int"
     Ident "int"
     Ident "int"
    Group ":":
     ReturnStatement "return fun(a, b: int) -> int: a + b":
      Fun(None) "fun(a, b: int) -> int: a + b":
       FunHeader "fun(a, b: int) -> int":
        None ""
        FunArgument(false) "a, b: int":
         Ident "a"
         Ident "b"
         Ident "int"
        Ident "int"
       Group ":":
        BinaryOp "a + b":
         Ident "+"
         Ident "a"
         Ident "b"
  None ""
 StructDeclaration(None) "struct":
  Ident "Scope"
  None ""
 Impl(None) "impl":
  None ""
  Ident "Scope"
  Fun(None) "fun new -> Self:\r\n    return":
   FunHeader "fun new -> Self":
    Ident "new"
    Ident "Self"
   Group ":":
    ReturnStatement "return":
     None ""
  Fun(None) "fun do_nothing(s: Self):\r\n    pass":
   FunHeader "fun do_nothing(s: Self)":
    Ident "do_nothing"
    FunArgument(false) "s: Self":
     Ident "s"
     Ident "Self"
    None ""
   Group ":":
    Pass "pass"
 StructDeclaration(None) "struct":
  Instantiation "Template[T]":
   Ident "Template"
   Ident "T"
  None ""
 Impl(None) "impl":
  Group "[":
   Ident "T"
  Instantiation "Template[T]":
   Ident "Template"
   Ident "T"
  Fun(None) "fun new -> Self:\r\n    return":
   FunHeader "fun new -> Self":
    Ident "new"
    Ident "Self"
   Group ":":
    ReturnStatement "return":
     None ""
  Fun(None) "fun do_nothing(s: Self, value: T) -> T:\r\n    value":
   FunHeader "fun do_nothing(s: Self, value: T) -> T":
    Ident "do_nothing"
    FunArgument(false) "s: Self":
     Ident "s"
     Ident "Self"
    FunArgument(false) "value: T":
     Ident "value"
     Ident "T"
    Ident "T"
   Group ":":
    Ident "value"
 Fun(None) "fun use_chain:\r\n  module::Type::method::[param]()":
  FunHeader "fun use_chain":
   Ident "use_chain"
   None ""
  Group ":":
   Call(false) "module::Type::method::[param]()":
    Instantiation "module::Type::method::[param]":
     ExplicitPackage "module::Type::method":
      Ident "module"
      Ident "Type"
      Ident "method"
     Ident "param"
 Fun(None) "fun flo: pass":
  FunHeader "fun flo":
   Ident "flo"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun foo(): pass":
  FunHeader "fun foo()":
   Ident "foo"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun goo(a: i8, b: i8): pass":
  FunHeader "fun goo(a: i8, b: i8)":
   Ident "goo"
   FunArgument(false) "a: i8":
    Ident "a"
    Ident "i8"
   FunArgument(false) "b: i8":
    Ident "b"
    Ident "i8"
   None ""
  Group ":":
   Pass "pass"
 Fun(None) "fun loo:\r\n  noo::loo::[i8]()\r\n\r\n  let array = [1, 2, 3]\r\n  array[0] = 3\r\n  array[2] = always[1]\r\n  array[1] = 1\r\n\r\n  pass":
  FunHeader "fun loo":
   Ident "loo"
   None ""
  Group ":":
   Call(false) "noo::loo::[i8]()":
    Instantiation "noo::loo::[i8]":
     ExplicitPackage "noo::loo":
      Ident "noo"
      Ident "loo"
     Ident "i8"
   VarStatement(None, false) "let array = [1, 2, 3]":
    VarAssign "array = [1, 2, 3]":
     Group "array":
      Ident "array"
     None ""
     Group "=":
      Array "[":
       Lit "1"
       Lit "2"
       Lit "3"
   BinaryOp "array[0] = 3":
    Ident "="
    Index "array[0]":
     Ident "array"
     Lit "0"
    Lit "3"
   BinaryOp "array[2] = always[1]":
    Ident "="
    Index "array[2]":
     Ident "array"
     Lit "2"
    Index "always[1]":
     Ident "always"
     Lit "1"
   BinaryOp "array[1] = 1":
    Ident "="
    Index "array[1]":
     Ident "array"
     Lit "1"
    Lit "1"
   Pass "pass"
 Fun(None) "fun main -> i64:\r\n  return 10 + 4 - 2 * 1 + 8":
  FunHeader "fun main -> i64":
   Ident "main"
   Ident "i64"
  Group ":":
   ReturnStatement "return 10 + 4 - 2 * 1 + 8":
    BinaryOp "10 + 4 - 2 * 1 + 8":
     Ident "-"
     BinaryOp "10 + 4":
      Ident "+"
      Lit "10"
      Lit "4"
     BinaryOp "2 * 1 + 8":
      Ident "+"
      BinaryOp "2 * 1":
       Ident "*"
       Lit "2"
       Lit "1"
      Lit "8"
 Fun(None) "fun operator_stress_test -> i64:\r\n  return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
  FunHeader "fun operator_stress_test -> i64":
   Ident "operator_stress_test"
   Ident "i64"
  Group ":":
   ReturnStatement "return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
    BinaryOp "10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
     Ident "+"
     Lit "10"
     BinaryOp "2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
      Ident "|"
      BinaryOp "2 * 1 - 9":
       Ident "-"
       BinaryOp "2 * 1":
        Ident "*"
        Lit "2"
        Lit "1"
       Lit "9"
      BinaryOp "4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
       Ident "^"
       BinaryOp "4 & 1":
        Ident "&"
        Lit "4"
        Lit "1"
       BinaryOp "2 >> 1 << 7 min 20 max 10":
        Ident "max"
        BinaryOp "2 >> 1 << 7 min 20":
         Ident "min"
         BinaryOp "2 >> 1 << 7":
          Ident "<<"
          BinaryOp "2 >> 1":
           Ident ">>"
           Lit "2"
           Lit "1"
          Lit "7"
         Lit "20"
        Lit "10"
 Fun(None) "fun conditional -> i64:\r\n  if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
  FunHeader "fun conditional -> i64":
   Ident "conditional"
   Ident "i64"
  Group ":":
   IfExpr "if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
    Lit "false"
    Group ":":
     ReturnStatement "return 10":
      Lit "10"
    Group "elif":
     IfExpr "elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
      Lit "true"
      Group ":":
       ReturnStatement "return if true: 10 else: 20":
        IfExpr "if true: 10 else: 20":
         Lit "true"
         Group ":":
          Lit "10"
         Group ":":
          Lit "20"
      Group ":":
       ReturnStatement "return 0":
        Lit "0"
 Attribute "attr inline = always, call_conv = cold":
  AttributeAssign "inline = always":
   Ident "inline"
   Ident "always"
  AttributeAssign "call_conv = cold":
   Ident "call_conv"
   Ident "cold"
 Fun(None) "fun inline_fn -> u32:\r\n  return 10":
  FunHeader "fun inline_fn -> u32":
   Ident "inline_fn"
   Ident "u32"
  Group ":":
   ReturnStatement "return 10":
    Lit "10"
 Fun(None) "fun fib(v: i64) -> i64:\r\n  return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
  FunHeader "fun fib(v: i64) -> i64":
   Ident "fib"
   FunArgument(false) "v: i64":
    Ident "v"
    Ident "i64"
   Ident "i64"
  Group ":":
   ReturnStatement "return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
    IfExpr "if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
     BinaryOp "v == 0 | v == 1":
      Ident "|"
      BinaryOp "v == 0":
       Ident "=="
       Ident "v"
       Lit "0"
      BinaryOp "v == 1":
       Ident "=="
       Ident "v"
       Lit "1"
     Group ":":
      Lit "1"
     Group ":":
      BinaryOp "fib(v - 1) + fib(v - 2)":
       Ident "+"
       Call(false) "fib(v - 1)":
        Ident "fib"
        BinaryOp "v - 1":
         Ident "-"
         Ident "v"
         Lit "1"
       Call(false) "fib(v - 2)":
        Ident "fib"
        BinaryOp "v - 2":
         Ident "-"
         Ident "v"
         Lit "2"
 Fun(None) "fun fib_loop(v: i64) -> i64:\r\n  var a, b, c = 1\r\n  loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r\n  return c":
  FunHeader "fun fib_loop(v: i64) -> i64":
   Ident "fib_loop"
   FunArgument(false) "v: i64":
    Ident "v"
    Ident "i64"
   Ident "i64"
  Group ":":
   VarStatement(None, true) "var a, b, c = 1":
    VarAssign "a, b, c = 1":
     Group "a":
      Ident "a"
      Ident "b"
      Ident "c"
     None ""
     Group "=":
      Lit "1"
      Ident "a"
      Ident "a"
   Loop "loop'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a":
    Ident "'a"
    Group ":":
     BinaryOp "c = a + b":
      Ident "="
      Ident "c"
      BinaryOp "a + b":
       Ident "+"
       Ident "a"
       Ident "b"
     BinaryOp "a = b":
      Ident "="
      Ident "a"
      Ident "b"
     BinaryOp "b = c":
      Ident "="
      Ident "b"
      Ident "c"
     BinaryOp "v = v - 1":
      Ident "="
      Ident "v"
      BinaryOp "v - 1":
       Ident "-"
       Ident "v"
       Lit "1"
     IfExpr "if v == 0:\r\n      break'a":
      BinaryOp "v == 0":
       Ident "=="
       Ident "v"
       Lit "0"
      Group ":":
       Break "break'a":
        Ident "'a"
        None ""
      None ""
   ReturnStatement "return c":
    Ident "c"
 Fun(None) "fun unary_operators(a: i64) -> i64:\r\n  return -a + ~a + !a + ++a + --a":
  FunHeader "fun unary_operators(a: i64) -> i64":
   Ident "unary_operators"
   FunArgument(false) "a: i64":
    Ident "a"
    Ident "i64"
   Ident "i64"
  Group ":":
   ReturnStatement "return -a + ~a + !a + ++a + --a":
    BinaryOp "-a + ~a + !a + ++a + --a":
     Ident "+"
     BinaryOp "-a + ~a + !a + ++a":
      Ident "+"
      BinaryOp "-a + ~a + !a":
       Ident "+"
       BinaryOp "-a + ~a":
        Ident "+"
        UnaryOp "-a":
         Ident "-"
         Ident "a"
        UnaryOp "~a":
         Ident "~"
         Ident "a"
       UnaryOp "!a":
        Ident "!"
        Ident "a"
      UnaryOp "++a":
       Ident "++"
       Ident "a"
     UnaryOp "--a":
      Ident "--"
      Ident "a"
 StructDeclaration(None) "struct":
  Ident "Foo"
  Group ":":
   StructField(None, false) "a, b, c: int":
    Ident "a"
    Ident "b"
    Ident "c"
    Ident "int"
 StructDeclaration(None) "struct":
  Ident "Goo"
  Group ":":
   StructField(None, true) "foo: Foo":
    Ident "foo"
    Ident "Foo"
   StructField(None, false) "gva: int":
    Ident "gva"
    Ident "int"
 Fun(None) "fun strings -> i64:\r\n  var hello = \"hello\"\r\n  return 0":
  FunHeader "fun strings -> i64":
   Ident "strings"
   Ident "i64"
  Group ":":
   VarStatement(None, true) "var hello = \"hello\"":
    VarAssign "hello = \"hello\"":
     Group "hello":
      Ident "hello"
     None ""
     Group "=":
      Lit "\"hello\""
   ReturnStatement "return 0":
    Lit "0"
 Fun(None) "fun mutable_ref(a: &Foo):\r\n  a.a = 10\r\n  a.b = 20\r\n  a.c = 30":
  FunHeader "fun mutable_ref(a: &Foo)":
   Ident "mutable_ref"
   FunArgument(false) "a: &Foo":
    Ident "a"
    Ref "&Foo":
     Ident "Foo"
   None ""
  Group ":":
   BinaryOp "a.a = 10":
    Ident "="
    DotExpr "a.a":
     Ident "a"
     Ident "a"
    Lit "10"
   BinaryOp "a.b = 20":
    Ident "="
    DotExpr "a.b":
     Ident "a"
     Ident "b"
    Lit "20"
   BinaryOp "a.c = 30":
    Ident "="
    DotExpr "a.c":
     Ident "a"
     Ident "c"
    Lit "30"
 Fun(None) "fun some_string -> &u8:\r\n  \"\r\nhello there\r\n  \"":
  FunHeader "fun some_string -> &u8":
   Ident "some_string"
   Ref "&u8":
    Ident "u8"
  Group ":":
   Lit "\"\r\nhello there\r\n  \""

