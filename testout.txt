Ok(Arguments { _filename: "file", hash: ID(0), flags: ["flag", "flag"], field_flags: [("flag", "value")], args: ["arg", "arg"] })
Ok(Arguments { _filename: "file", hash: ID(0), flags: [], field_flags: [], args: ["string value"] })
|> 2:1:text_code.mf
| var something = [1, 2, 3]
| ^
|> 2:4:text_code.mf
| var something = [1, 2, 3]
| ^^^
|> 2:14:text_code.mf
| var something = [1, 2, 3]
|     ^^^^^^^^^
|> 2:16:text_code.mf
| var something = [1, 2, 3]
|               ^
|> 2:18:text_code.mf
| var something = [1, 2, 3]
|                 ^
|> 2:19:text_code.mf
| var something = [1, 2, 3]
|                  ^
|> 2:20:text_code.mf
| var something = [1, 2, 3]
|                   ^
|> 2:22:text_code.mf
| var something = [1, 2, 3]
|                     ^
|> 2:23:text_code.mf
| var something = [1, 2, 3]
|                      ^
|> 2:25:text_code.mf
| var something = [1, 2, 3]
|                        ^
|> 2:26:text_code.mf
| var something = [1, 2, 3]
|                         ^
|> 3:1:text_code.mf
| let hello = "hello"
| ^
|> 3:4:text_code.mf
| let hello = "hello"
| ^^^
|> 3:10:text_code.mf
| let hello = "hello"
|     ^^^^^
|> 3:12:text_code.mf
| let hello = "hello"
|           ^
|> 3:20:text_code.mf
| let hello = "hello"
|             ^^^^^^^
|> 4:2:text_code.mf
| 
| ^
|> 5:1:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
| ^
|> 5:4:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
| ^^^
|> 5:21:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|     ^^^^^^^^^^^^^^^^
|> 5:22:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                     ^
|> 5:23:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                      ^
|> 5:24:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                       ^
|> 5:28:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                         ^^^
|> 5:29:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                            ^
|> 5:31:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                              ^
|> 5:32:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                               ^
|> 5:36:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                 ^^^
|> 5:37:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                    ^
|> 5:40:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                      ^^
|> 5:44:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                         ^^^
|> 5:45:text_code.mf
| fun pointed_function(a: Int, b: Int) -> int:
|                                            ^
|> 6:3:text_code.mf
|   return a + b
| ^^
|> 6:9:text_code.mf
|   return a + b
|   ^^^^^^
|> 6:11:text_code.mf
|   return a + b
|          ^
|> 6:13:text_code.mf
|   return a + b
|            ^
|> 6:15:text_code.mf
|   return a + b
|              ^
|> 7:2:text_code.mf
| 
| ^
|> 8:1:text_code.mf
| ## doc comment
| ^
|> 8:16:text_code.mf
| ## doc comment
| ^^^^^^^^^^^^^^
|> 9:1:text_code.mf
| fun something -> fun(int, int) -> int:
| ^
|> 9:4:text_code.mf
| fun something -> fun(int, int) -> int:
| ^^^
|> 9:14:text_code.mf
| fun something -> fun(int, int) -> int:
|     ^^^^^^^^^
|> 9:17:text_code.mf
| fun something -> fun(int, int) -> int:
|               ^^
|> 9:21:text_code.mf
| fun something -> fun(int, int) -> int:
|                  ^^^
|> 9:22:text_code.mf
| fun something -> fun(int, int) -> int:
|                     ^
|> 9:25:text_code.mf
| fun something -> fun(int, int) -> int:
|                      ^^^
|> 9:26:text_code.mf
| fun something -> fun(int, int) -> int:
|                         ^
|> 9:30:text_code.mf
| fun something -> fun(int, int) -> int:
|                           ^^^
|> 9:31:text_code.mf
| fun something -> fun(int, int) -> int:
|                              ^
|> 9:34:text_code.mf
| fun something -> fun(int, int) -> int:
|                                ^^
|> 9:38:text_code.mf
| fun something -> fun(int, int) -> int:
|                                   ^^^
|> 9:39:text_code.mf
| fun something -> fun(int, int) -> int:
|                                      ^
|> 10:3:text_code.mf
|   # ignored comment
| ^^
|> 11:3:text_code.mf
|   return #[ even more ignored comment ]# pointed_function
| ^^
|> 11:9:text_code.mf
|   return #[ even more ignored comment ]# pointed_function
|   ^^^^^^
|> 11:58:text_code.mf
|   return #[ even more ignored comment ]# pointed_function
|                                          ^^^^^^^^^^^^^^^^
|> 12:2:text_code.mf
| 
| ^
|> 13:1:text_code.mf
| ##[
| ^
|> 15:3:text_code.mf
| ##[
|   multiline doc comment
| ]#
| ^^^^^^^^^^^^^^^^^^^^^^^
|> 16:1:text_code.mf
| struct Scope
| ^
|> 16:7:text_code.mf
| struct Scope
| ^^^^^^
|> 16:13:text_code.mf
| struct Scope
|        ^^^^^
|> 17:2:text_code.mf
| 
| ^
|> 18:1:text_code.mf
| impl Scope:
| ^
|> 18:5:text_code.mf
| impl Scope:
| ^^^^
|> 18:11:text_code.mf
| impl Scope:
|      ^^^^^
|> 18:12:text_code.mf
| impl Scope:
|           ^
|> 19:3:text_code.mf
|   fun new -> Self:
| ^^
|> 19:6:text_code.mf
|   fun new -> Self:
|   ^^^
|> 19:10:text_code.mf
|   fun new -> Self:
|       ^^^
|> 19:13:text_code.mf
|   fun new -> Self:
|           ^^
|> 19:18:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 19:19:text_code.mf
|   fun new -> Self:
|                  ^
|> 20:5:text_code.mf
|     return
| ^^^^
|> 20:11:text_code.mf
|     return
|     ^^^^^^
|> 21:4:text_code.mf
|   
| ^^^
|> 22:3:text_code.mf
|   fun do_nothing(s: Self):
| ^^
|> 22:6:text_code.mf
|   fun do_nothing(s: Self):
|   ^^^
|> 22:17:text_code.mf
|   fun do_nothing(s: Self):
|       ^^^^^^^^^^
|> 22:18:text_code.mf
|   fun do_nothing(s: Self):
|                 ^
|> 22:19:text_code.mf
|   fun do_nothing(s: Self):
|                  ^
|> 22:20:text_code.mf
|   fun do_nothing(s: Self):
|                   ^
|> 22:25:text_code.mf
|   fun do_nothing(s: Self):
|                     ^^^^
|> 22:26:text_code.mf
|   fun do_nothing(s: Self):
|                         ^
|> 22:27:text_code.mf
|   fun do_nothing(s: Self):
|                          ^
|> 23:5:text_code.mf
|     pass
| ^^^^
|> 23:9:text_code.mf
|     pass
|     ^^^^
|> 24:2:text_code.mf
| 
| ^
|> 25:1:text_code.mf
| struct Template[T]
| ^
|> 25:7:text_code.mf
| struct Template[T]
| ^^^^^^
|> 25:16:text_code.mf
| struct Template[T]
|        ^^^^^^^^
|> 25:17:text_code.mf
| struct Template[T]
|                ^
|> 25:18:text_code.mf
| struct Template[T]
|                 ^
|> 25:19:text_code.mf
| struct Template[T]
|                  ^
|> 26:2:text_code.mf
| 
| ^
|> 27:1:text_code.mf
| impl[T] Template[T]:
| ^
|> 27:5:text_code.mf
| impl[T] Template[T]:
| ^^^^
|> 27:6:text_code.mf
| impl[T] Template[T]:
|     ^
|> 27:7:text_code.mf
| impl[T] Template[T]:
|      ^
|> 27:8:text_code.mf
| impl[T] Template[T]:
|       ^
|> 27:17:text_code.mf
| impl[T] Template[T]:
|         ^^^^^^^^
|> 27:18:text_code.mf
| impl[T] Template[T]:
|                 ^
|> 27:19:text_code.mf
| impl[T] Template[T]:
|                  ^
|> 27:20:text_code.mf
| impl[T] Template[T]:
|                   ^
|> 27:21:text_code.mf
| impl[T] Template[T]:
|                    ^
|> 28:3:text_code.mf
|   fun new -> Self:
| ^^
|> 28:6:text_code.mf
|   fun new -> Self:
|   ^^^
|> 28:10:text_code.mf
|   fun new -> Self:
|       ^^^
|> 28:13:text_code.mf
|   fun new -> Self:
|           ^^
|> 28:18:text_code.mf
|   fun new -> Self:
|              ^^^^
|> 28:19:text_code.mf
|   fun new -> Self:
|                  ^
|> 29:5:text_code.mf
|     return
| ^^^^
|> 29:11:text_code.mf
|     return
|     ^^^^^^
|> 30:4:text_code.mf
|   
| ^^^
|> 31:3:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
| ^^
|> 31:6:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|   ^^^
|> 31:17:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|       ^^^^^^^^^^
|> 31:18:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                 ^
|> 31:19:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                  ^
|> 31:20:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                   ^
|> 31:25:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                     ^^^^
|> 31:26:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                         ^
|> 31:32:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                           ^^^^^
|> 31:33:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                ^
|> 31:35:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                  ^
|> 31:36:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                   ^
|> 31:39:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                     ^^
|> 31:41:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                        ^
|> 31:42:text_code.mf
|   fun do_nothing(s: Self, value: T) -> T:
|                                         ^
|> 32:5:text_code.mf
|     value
| ^^^^
|> 32:10:text_code.mf
|     value
|     ^^^^^
|> 33:2:text_code.mf
| 
| ^
|> 34:1:text_code.mf
| fun use_chain:
| ^
|> 34:4:text_code.mf
| fun use_chain:
| ^^^
|> 34:14:text_code.mf
| fun use_chain:
|     ^^^^^^^^^
|> 34:15:text_code.mf
| fun use_chain:
|              ^
|> 35:3:text_code.mf
|   module::Type::method::[param]()
| ^^
|> 35:9:text_code.mf
|   module::Type::method::[param]()
|   ^^^^^^
|> 35:11:text_code.mf
|   module::Type::method::[param]()
|         ^^
|> 35:15:text_code.mf
|   module::Type::method::[param]()
|           ^^^^
|> 35:17:text_code.mf
|   module::Type::method::[param]()
|               ^^
|> 35:23:text_code.mf
|   module::Type::method::[param]()
|                 ^^^^^^
|> 35:25:text_code.mf
|   module::Type::method::[param]()
|                       ^^
|> 35:26:text_code.mf
|   module::Type::method::[param]()
|                         ^
|> 35:31:text_code.mf
|   module::Type::method::[param]()
|                          ^^^^^
|> 35:32:text_code.mf
|   module::Type::method::[param]()
|                               ^
|> 35:33:text_code.mf
|   module::Type::method::[param]()
|                                ^
|> 35:34:text_code.mf
|   module::Type::method::[param]()
|                                 ^
|> 36:2:text_code.mf
| 
| ^
|> 37:1:text_code.mf
| fun flo: pass
| ^
|> 37:4:text_code.mf
| fun flo: pass
| ^^^
|> 37:8:text_code.mf
| fun flo: pass
|     ^^^
|> 37:9:text_code.mf
| fun flo: pass
|        ^
|> 37:14:text_code.mf
| fun flo: pass
|          ^^^^
|> 38:2:text_code.mf
| 
| ^
|> 39:1:text_code.mf
| fun foo(): pass
| ^
|> 39:4:text_code.mf
| fun foo(): pass
| ^^^
|> 39:8:text_code.mf
| fun foo(): pass
|     ^^^
|> 39:9:text_code.mf
| fun foo(): pass
|        ^
|> 39:10:text_code.mf
| fun foo(): pass
|         ^
|> 39:11:text_code.mf
| fun foo(): pass
|          ^
|> 39:16:text_code.mf
| fun foo(): pass
|            ^^^^
|> 40:2:text_code.mf
| 
| ^
|> 41:1:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^
|> 41:4:text_code.mf
| fun goo(a: i8, b: i8): pass
| ^^^
|> 41:8:text_code.mf
| fun goo(a: i8, b: i8): pass
|     ^^^
|> 41:9:text_code.mf
| fun goo(a: i8, b: i8): pass
|        ^
|> 41:10:text_code.mf
| fun goo(a: i8, b: i8): pass
|         ^
|> 41:11:text_code.mf
| fun goo(a: i8, b: i8): pass
|          ^
|> 41:14:text_code.mf
| fun goo(a: i8, b: i8): pass
|            ^^
|> 41:15:text_code.mf
| fun goo(a: i8, b: i8): pass
|              ^
|> 41:17:text_code.mf
| fun goo(a: i8, b: i8): pass
|                ^
|> 41:18:text_code.mf
| fun goo(a: i8, b: i8): pass
|                 ^
|> 41:21:text_code.mf
| fun goo(a: i8, b: i8): pass
|                   ^^
|> 41:22:text_code.mf
| fun goo(a: i8, b: i8): pass
|                     ^
|> 41:23:text_code.mf
| fun goo(a: i8, b: i8): pass
|                      ^
|> 41:28:text_code.mf
| fun goo(a: i8, b: i8): pass
|                        ^^^^
|> 42:2:text_code.mf
| 
| ^
|> 43:1:text_code.mf
| fun loo:
| ^
|> 43:4:text_code.mf
| fun loo:
| ^^^
|> 43:8:text_code.mf
| fun loo:
|     ^^^
|> 43:9:text_code.mf
| fun loo:
|        ^
|> 44:3:text_code.mf
|   noo::loo::[i8]()
| ^^
|> 44:6:text_code.mf
|   noo::loo::[i8]()
|   ^^^
|> 44:8:text_code.mf
|   noo::loo::[i8]()
|      ^^
|> 44:11:text_code.mf
|   noo::loo::[i8]()
|        ^^^
|> 44:13:text_code.mf
|   noo::loo::[i8]()
|           ^^
|> 44:14:text_code.mf
|   noo::loo::[i8]()
|             ^
|> 44:16:text_code.mf
|   noo::loo::[i8]()
|              ^^
|> 44:17:text_code.mf
|   noo::loo::[i8]()
|                ^
|> 44:18:text_code.mf
|   noo::loo::[i8]()
|                 ^
|> 44:19:text_code.mf
|   noo::loo::[i8]()
|                  ^
|> 45:2:text_code.mf
| 
| ^
|> 46:3:text_code.mf
|   let array = [1, 2, 3]
| ^^
|> 46:6:text_code.mf
|   let array = [1, 2, 3]
|   ^^^
|> 46:12:text_code.mf
|   let array = [1, 2, 3]
|       ^^^^^
|> 46:14:text_code.mf
|   let array = [1, 2, 3]
|             ^
|> 46:16:text_code.mf
|   let array = [1, 2, 3]
|               ^
|> 46:17:text_code.mf
|   let array = [1, 2, 3]
|                ^
|> 46:18:text_code.mf
|   let array = [1, 2, 3]
|                 ^
|> 46:20:text_code.mf
|   let array = [1, 2, 3]
|                   ^
|> 46:21:text_code.mf
|   let array = [1, 2, 3]
|                    ^
|> 46:23:text_code.mf
|   let array = [1, 2, 3]
|                      ^
|> 46:24:text_code.mf
|   let array = [1, 2, 3]
|                       ^
|> 47:3:text_code.mf
|   array[0] = 3
| ^^
|> 47:8:text_code.mf
|   array[0] = 3
|   ^^^^^
|> 47:9:text_code.mf
|   array[0] = 3
|        ^
|> 47:10:text_code.mf
|   array[0] = 3
|         ^
|> 47:11:text_code.mf
|   array[0] = 3
|          ^
|> 47:13:text_code.mf
|   array[0] = 3
|            ^
|> 47:15:text_code.mf
|   array[0] = 3
|              ^
|> 48:3:text_code.mf
|   array[2] = always[1]
| ^^
|> 48:8:text_code.mf
|   array[2] = always[1]
|   ^^^^^
|> 48:9:text_code.mf
|   array[2] = always[1]
|        ^
|> 48:10:text_code.mf
|   array[2] = always[1]
|         ^
|> 48:11:text_code.mf
|   array[2] = always[1]
|          ^
|> 48:13:text_code.mf
|   array[2] = always[1]
|            ^
|> 48:20:text_code.mf
|   array[2] = always[1]
|              ^^^^^^
|> 48:21:text_code.mf
|   array[2] = always[1]
|                    ^
|> 48:22:text_code.mf
|   array[2] = always[1]
|                     ^
|> 48:23:text_code.mf
|   array[2] = always[1]
|                      ^
|> 49:3:text_code.mf
|   array[1] = 1
| ^^
|> 49:8:text_code.mf
|   array[1] = 1
|   ^^^^^
|> 49:9:text_code.mf
|   array[1] = 1
|        ^
|> 49:10:text_code.mf
|   array[1] = 1
|         ^
|> 49:11:text_code.mf
|   array[1] = 1
|          ^
|> 49:13:text_code.mf
|   array[1] = 1
|            ^
|> 49:15:text_code.mf
|   array[1] = 1
|              ^
|> 50:2:text_code.mf
| 
| ^
|> 51:3:text_code.mf
|   pass
| ^^
|> 51:7:text_code.mf
|   pass
|   ^^^^
|> 52:2:text_code.mf
| 
| ^
|> 53:1:text_code.mf
| fun main -> i64:
| ^
|> 53:4:text_code.mf
| fun main -> i64:
| ^^^
|> 53:9:text_code.mf
| fun main -> i64:
|     ^^^^
|> 53:12:text_code.mf
| fun main -> i64:
|          ^^
|> 53:16:text_code.mf
| fun main -> i64:
|             ^^^
|> 53:17:text_code.mf
| fun main -> i64:
|                ^
|> 54:3:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
| ^^
|> 54:9:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|   ^^^^^^
|> 54:12:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|          ^^
|> 54:14:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|             ^
|> 54:16:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|               ^
|> 54:18:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                 ^
|> 54:20:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                   ^
|> 54:22:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                     ^
|> 54:24:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                       ^
|> 54:26:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                         ^
|> 54:28:text_code.mf
|   return 10 + 4 - 2 * 1 + 8
|                           ^
|> 55:2:text_code.mf
| 
| ^
|> 56:1:text_code.mf
| fun operator_stress_test -> i64:
| ^
|> 56:4:text_code.mf
| fun operator_stress_test -> i64:
| ^^^
|> 56:25:text_code.mf
| fun operator_stress_test -> i64:
|     ^^^^^^^^^^^^^^^^^^^^
|> 56:28:text_code.mf
| fun operator_stress_test -> i64:
|                          ^^
|> 56:32:text_code.mf
| fun operator_stress_test -> i64:
|                             ^^^
|> 56:33:text_code.mf
| fun operator_stress_test -> i64:
|                                ^
|> 57:3:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
| ^^
|> 57:9:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|   ^^^^^^
|> 57:12:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|          ^^
|> 57:14:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|             ^
|> 57:16:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|               ^
|> 57:18:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                 ^
|> 57:20:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                   ^
|> 57:22:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                     ^
|> 57:24:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                       ^
|> 57:26:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                         ^
|> 57:28:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                           ^
|> 57:30:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                             ^
|> 57:32:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                               ^
|> 57:34:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                 ^
|> 57:36:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                   ^
|> 57:39:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                     ^^
|> 57:41:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                        ^
|> 57:44:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                          ^^
|> 57:46:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                             ^
|> 57:50:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                               ^^^
|> 57:53:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                   ^^
|> 57:57:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                      ^^^
|> 57:60:text_code.mf
|   return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10
|                                                          ^^
|> 58:2:text_code.mf
| 
| ^
|> 59:1:text_code.mf
| fun conditional -> i64:
| ^
|> 59:4:text_code.mf
| fun conditional -> i64:
| ^^^
|> 59:16:text_code.mf
| fun conditional -> i64:
|     ^^^^^^^^^^^
|> 59:19:text_code.mf
| fun conditional -> i64:
|                 ^^
|> 59:23:text_code.mf
| fun conditional -> i64:
|                    ^^^
|> 59:24:text_code.mf
| fun conditional -> i64:
|                       ^
|> 60:3:text_code.mf
|   if false:
| ^^
|> 60:5:text_code.mf
|   if false:
|   ^^
|> 60:11:text_code.mf
|   if false:
|      ^^^^^
|> 60:12:text_code.mf
|   if false:
|           ^
|> 61:5:text_code.mf
|     return 10
| ^^^^
|> 61:11:text_code.mf
|     return 10
|     ^^^^^^
|> 61:14:text_code.mf
|     return 10
|            ^^
|> 62:3:text_code.mf
|   elif true:
| ^^
|> 62:7:text_code.mf
|   elif true:
|   ^^^^
|> 62:12:text_code.mf
|   elif true:
|        ^^^^
|> 62:13:text_code.mf
|   elif true:
|            ^
|> 63:5:text_code.mf
|     return if true: 10 else: 20
| ^^^^
|> 63:11:text_code.mf
|     return if true: 10 else: 20
|     ^^^^^^
|> 63:14:text_code.mf
|     return if true: 10 else: 20
|            ^^
|> 63:19:text_code.mf
|     return if true: 10 else: 20
|               ^^^^
|> 63:20:text_code.mf
|     return if true: 10 else: 20
|                   ^
|> 63:23:text_code.mf
|     return if true: 10 else: 20
|                     ^^
|> 63:28:text_code.mf
|     return if true: 10 else: 20
|                        ^^^^
|> 63:29:text_code.mf
|     return if true: 10 else: 20
|                            ^
|> 63:32:text_code.mf
|     return if true: 10 else: 20
|                              ^^
|> 64:3:text_code.mf
|   else:
| ^^
|> 64:7:text_code.mf
|   else:
|   ^^^^
|> 64:8:text_code.mf
|   else:
|       ^
|> 65:5:text_code.mf
|     return 0
| ^^^^
|> 65:11:text_code.mf
|     return 0
|     ^^^^^^
|> 65:13:text_code.mf
|     return 0
|            ^
|> 66:2:text_code.mf
| 
| ^
|> 67:1:text_code.mf
| attr inline = always, call_conv = cold
| ^
|> 67:5:text_code.mf
| attr inline = always, call_conv = cold
| ^^^^
|> 67:12:text_code.mf
| attr inline = always, call_conv = cold
|      ^^^^^^
|> 67:14:text_code.mf
| attr inline = always, call_conv = cold
|             ^
|> 67:21:text_code.mf
| attr inline = always, call_conv = cold
|               ^^^^^^
|> 67:22:text_code.mf
| attr inline = always, call_conv = cold
|                     ^
|> 67:32:text_code.mf
| attr inline = always, call_conv = cold
|                       ^^^^^^^^^
|> 67:34:text_code.mf
| attr inline = always, call_conv = cold
|                                 ^
|> 67:39:text_code.mf
| attr inline = always, call_conv = cold
|                                   ^^^^
|> 68:1:text_code.mf
| fun inline_fn -> u32:
| ^
|> 68:4:text_code.mf
| fun inline_fn -> u32:
| ^^^
|> 68:14:text_code.mf
| fun inline_fn -> u32:
|     ^^^^^^^^^
|> 68:17:text_code.mf
| fun inline_fn -> u32:
|               ^^
|> 68:21:text_code.mf
| fun inline_fn -> u32:
|                  ^^^
|> 68:22:text_code.mf
| fun inline_fn -> u32:
|                     ^
|> 69:3:text_code.mf
|   return 10
| ^^
|> 69:9:text_code.mf
|   return 10
|   ^^^^^^
|> 69:12:text_code.mf
|   return 10
|          ^^
|> 70:2:text_code.mf
| 
| ^
|> 71:1:text_code.mf
| fun fib(v: i64) -> i64:
| ^
|> 71:4:text_code.mf
| fun fib(v: i64) -> i64:
| ^^^
|> 71:8:text_code.mf
| fun fib(v: i64) -> i64:
|     ^^^
|> 71:9:text_code.mf
| fun fib(v: i64) -> i64:
|        ^
|> 71:10:text_code.mf
| fun fib(v: i64) -> i64:
|         ^
|> 71:11:text_code.mf
| fun fib(v: i64) -> i64:
|          ^
|> 71:15:text_code.mf
| fun fib(v: i64) -> i64:
|            ^^^
|> 71:16:text_code.mf
| fun fib(v: i64) -> i64:
|               ^
|> 71:19:text_code.mf
| fun fib(v: i64) -> i64:
|                 ^^
|> 71:23:text_code.mf
| fun fib(v: i64) -> i64:
|                    ^^^
|> 71:24:text_code.mf
| fun fib(v: i64) -> i64:
|                       ^
|> 72:3:text_code.mf
|   return if v == 0 | v == 1:
| ^^
|> 72:9:text_code.mf
|   return if v == 0 | v == 1:
|   ^^^^^^
|> 72:12:text_code.mf
|   return if v == 0 | v == 1:
|          ^^
|> 72:14:text_code.mf
|   return if v == 0 | v == 1:
|             ^
|> 72:17:text_code.mf
|   return if v == 0 | v == 1:
|               ^^
|> 72:19:text_code.mf
|   return if v == 0 | v == 1:
|                  ^
|> 72:21:text_code.mf
|   return if v == 0 | v == 1:
|                    ^
|> 72:23:text_code.mf
|   return if v == 0 | v == 1:
|                      ^
|> 72:26:text_code.mf
|   return if v == 0 | v == 1:
|                        ^^
|> 72:28:text_code.mf
|   return if v == 0 | v == 1:
|                           ^
|> 72:29:text_code.mf
|   return if v == 0 | v == 1:
|                            ^
|> 73:5:text_code.mf
|     1
| ^^^^
|> 73:6:text_code.mf
|     1
|     ^
|> 74:3:text_code.mf
|   else:
| ^^
|> 74:7:text_code.mf
|   else:
|   ^^^^
|> 74:8:text_code.mf
|   else:
|       ^
|> 75:5:text_code.mf
|     fib(v - 1) + fib(v - 2)
| ^^^^
|> 75:8:text_code.mf
|     fib(v - 1) + fib(v - 2)
|     ^^^
|> 75:9:text_code.mf
|     fib(v - 1) + fib(v - 2)
|        ^
|> 75:10:text_code.mf
|     fib(v - 1) + fib(v - 2)
|         ^
|> 75:12:text_code.mf
|     fib(v - 1) + fib(v - 2)
|           ^
|> 75:14:text_code.mf
|     fib(v - 1) + fib(v - 2)
|             ^
|> 75:15:text_code.mf
|     fib(v - 1) + fib(v - 2)
|              ^
|> 75:17:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                ^
|> 75:21:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                  ^^^
|> 75:22:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                     ^
|> 75:23:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                      ^
|> 75:25:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                        ^
|> 75:27:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                          ^
|> 75:28:text_code.mf
|     fib(v - 1) + fib(v - 2)
|                           ^
|> 76:2:text_code.mf
| 
| ^
|> 77:1:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^
|> 77:4:text_code.mf
| fun fib_loop(v: i64) -> i64:
| ^^^
|> 77:13:text_code.mf
| fun fib_loop(v: i64) -> i64:
|     ^^^^^^^^
|> 77:14:text_code.mf
| fun fib_loop(v: i64) -> i64:
|             ^
|> 77:15:text_code.mf
| fun fib_loop(v: i64) -> i64:
|              ^
|> 77:16:text_code.mf
| fun fib_loop(v: i64) -> i64:
|               ^
|> 77:20:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                 ^^^
|> 77:21:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                    ^
|> 77:24:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                      ^^
|> 77:28:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                         ^^^
|> 77:29:text_code.mf
| fun fib_loop(v: i64) -> i64:
|                            ^
|> 78:3:text_code.mf
|   var a, b, c = 1
| ^^
|> 78:6:text_code.mf
|   var a, b, c = 1
|   ^^^
|> 78:8:text_code.mf
|   var a, b, c = 1
|       ^
|> 78:9:text_code.mf
|   var a, b, c = 1
|        ^
|> 78:11:text_code.mf
|   var a, b, c = 1
|          ^
|> 78:12:text_code.mf
|   var a, b, c = 1
|           ^
|> 78:14:text_code.mf
|   var a, b, c = 1
|             ^
|> 78:16:text_code.mf
|   var a, b, c = 1
|               ^
|> 78:18:text_code.mf
|   var a, b, c = 1
|                 ^
|> 79:3:text_code.mf
|   for'a:
| ^^
|> 79:6:text_code.mf
|   for'a:
|   ^^^
|> 79:8:text_code.mf
|   for'a:
|      ^^
|> 79:9:text_code.mf
|   for'a:
|        ^
|> 80:5:text_code.mf
|     c = a + b
| ^^^^
|> 80:6:text_code.mf
|     c = a + b
|     ^
|> 80:8:text_code.mf
|     c = a + b
|       ^
|> 80:10:text_code.mf
|     c = a + b
|         ^
|> 80:12:text_code.mf
|     c = a + b
|           ^
|> 80:14:text_code.mf
|     c = a + b
|             ^
|> 81:5:text_code.mf
|     a = b
| ^^^^
|> 81:6:text_code.mf
|     a = b
|     ^
|> 81:8:text_code.mf
|     a = b
|       ^
|> 81:10:text_code.mf
|     a = b
|         ^
|> 82:5:text_code.mf
|     b = c
| ^^^^
|> 82:6:text_code.mf
|     b = c
|     ^
|> 82:8:text_code.mf
|     b = c
|       ^
|> 82:10:text_code.mf
|     b = c
|         ^
|> 83:5:text_code.mf
|     v = v - 1
| ^^^^
|> 83:6:text_code.mf
|     v = v - 1
|     ^
|> 83:8:text_code.mf
|     v = v - 1
|       ^
|> 83:10:text_code.mf
|     v = v - 1
|         ^
|> 83:12:text_code.mf
|     v = v - 1
|           ^
|> 83:14:text_code.mf
|     v = v - 1
|             ^
|> 84:5:text_code.mf
|     if v == 0:
| ^^^^
|> 84:7:text_code.mf
|     if v == 0:
|     ^^
|> 84:9:text_code.mf
|     if v == 0:
|        ^
|> 84:12:text_code.mf
|     if v == 0:
|          ^^
|> 84:14:text_code.mf
|     if v == 0:
|             ^
|> 84:15:text_code.mf
|     if v == 0:
|              ^
|> 85:7:text_code.mf
|       break'a
| ^^^^^^
|> 85:12:text_code.mf
|       break'a
|       ^^^^^
|> 85:14:text_code.mf
|       break'a
|            ^^
|> 86:3:text_code.mf
|   return c
| ^^
|> 86:9:text_code.mf
|   return c
|   ^^^^^^
|> 86:11:text_code.mf
|   return c
|          ^
|> 87:2:text_code.mf
| 
| ^
|> 88:1:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^
|> 88:4:text_code.mf
| fun unary_operators(a: i64) -> i64:
| ^^^
|> 88:20:text_code.mf
| fun unary_operators(a: i64) -> i64:
|     ^^^^^^^^^^^^^^^
|> 88:21:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                    ^
|> 88:22:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                     ^
|> 88:23:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                      ^
|> 88:27:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                        ^^^
|> 88:28:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                           ^
|> 88:31:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                             ^^
|> 88:35:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                ^^^
|> 88:36:text_code.mf
| fun unary_operators(a: i64) -> i64:
|                                   ^
|> 89:3:text_code.mf
|   return -a + ~a + !a + ++a + --a
| ^^
|> 89:9:text_code.mf
|   return -a + ~a + !a + ++a + --a
|   ^^^^^^
|> 89:11:text_code.mf
|   return -a + ~a + !a + ++a + --a
|          ^
|> 89:12:text_code.mf
|   return -a + ~a + !a + ++a + --a
|           ^
|> 89:14:text_code.mf
|   return -a + ~a + !a + ++a + --a
|             ^
|> 89:16:text_code.mf
|   return -a + ~a + !a + ++a + --a
|               ^
|> 89:17:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                ^
|> 89:19:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                  ^
|> 89:21:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                    ^
|> 89:22:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                     ^
|> 89:24:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                       ^
|> 89:27:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                         ^^
|> 89:28:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                           ^
|> 89:30:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                             ^
|> 89:33:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                               ^^
|> 89:34:text_code.mf
|   return -a + ~a + !a + ++a + --a
|                                 ^
|> 90:2:text_code.mf
| 
| ^
|> 91:1:text_code.mf
| struct Foo:
| ^
|> 91:7:text_code.mf
| struct Foo:
| ^^^^^^
|> 91:11:text_code.mf
| struct Foo:
|        ^^^
|> 91:12:text_code.mf
| struct Foo:
|           ^
|> 92:3:text_code.mf
|   a, b, c: int
| ^^
|> 92:4:text_code.mf
|   a, b, c: int
|   ^
|> 92:5:text_code.mf
|   a, b, c: int
|    ^
|> 92:7:text_code.mf
|   a, b, c: int
|      ^
|> 92:8:text_code.mf
|   a, b, c: int
|       ^
|> 92:10:text_code.mf
|   a, b, c: int
|         ^
|> 92:11:text_code.mf
|   a, b, c: int
|          ^
|> 92:15:text_code.mf
|   a, b, c: int
|            ^^^
|> 93:2:text_code.mf
| 
| ^
|> 94:1:text_code.mf
| struct Goo:
| ^
|> 94:7:text_code.mf
| struct Goo:
| ^^^^^^
|> 94:11:text_code.mf
| struct Goo:
|        ^^^
|> 94:12:text_code.mf
| struct Goo:
|           ^
|> 95:3:text_code.mf
|   embed foo: Foo
| ^^
|> 95:8:text_code.mf
|   embed foo: Foo
|   ^^^^^
|> 95:12:text_code.mf
|   embed foo: Foo
|         ^^^
|> 95:13:text_code.mf
|   embed foo: Foo
|            ^
|> 95:17:text_code.mf
|   embed foo: Foo
|              ^^^
|> 96:3:text_code.mf
|   gva: int
| ^^
|> 96:6:text_code.mf
|   gva: int
|   ^^^
|> 96:7:text_code.mf
|   gva: int
|      ^
|> 96:11:text_code.mf
|   gva: int
|        ^^^
|> 97:2:text_code.mf
| 
| ^
|> 98:1:text_code.mf
| fun strings -> i64:
| ^
|> 98:4:text_code.mf
| fun strings -> i64:
| ^^^
|> 98:12:text_code.mf
| fun strings -> i64:
|     ^^^^^^^
|> 98:15:text_code.mf
| fun strings -> i64:
|             ^^
|> 98:19:text_code.mf
| fun strings -> i64:
|                ^^^
|> 98:20:text_code.mf
| fun strings -> i64:
|                   ^
|> 99:3:text_code.mf
|   var hello = "hello"
| ^^
|> 99:6:text_code.mf
|   var hello = "hello"
|   ^^^
|> 99:12:text_code.mf
|   var hello = "hello"
|       ^^^^^
|> 99:14:text_code.mf
|   var hello = "hello"
|             ^
|> 99:22:text_code.mf
|   var hello = "hello"
|               ^^^^^^^
|> 100:3:text_code.mf
|   return 0
| ^^
|> 100:9:text_code.mf
|   return 0
|   ^^^^^^
|> 100:11:text_code.mf
|   return 0
|          ^
|> 101:2:text_code.mf
| 
| ^
|> 102:1:text_code.mf
| fun mutable_ref(a: &Foo):
| ^
|> 102:4:text_code.mf
| fun mutable_ref(a: &Foo):
| ^^^
|> 102:16:text_code.mf
| fun mutable_ref(a: &Foo):
|     ^^^^^^^^^^^
|> 102:17:text_code.mf
| fun mutable_ref(a: &Foo):
|                ^
|> 102:18:text_code.mf
| fun mutable_ref(a: &Foo):
|                 ^
|> 102:19:text_code.mf
| fun mutable_ref(a: &Foo):
|                  ^
|> 102:21:text_code.mf
| fun mutable_ref(a: &Foo):
|                    ^
|> 102:24:text_code.mf
| fun mutable_ref(a: &Foo):
|                     ^^^
|> 102:25:text_code.mf
| fun mutable_ref(a: &Foo):
|                        ^
|> 102:26:text_code.mf
| fun mutable_ref(a: &Foo):
|                         ^
|> 103:3:text_code.mf
|   a.a = 10
| ^^
|> 103:4:text_code.mf
|   a.a = 10
|   ^
|> 103:5:text_code.mf
|   a.a = 10
|    ^
|> 103:6:text_code.mf
|   a.a = 10
|     ^
|> 103:8:text_code.mf
|   a.a = 10
|       ^
|> 103:11:text_code.mf
|   a.a = 10
|         ^^
|> 104:3:text_code.mf
|   a.b = 20
| ^^
|> 104:4:text_code.mf
|   a.b = 20
|   ^
|> 104:5:text_code.mf
|   a.b = 20
|    ^
|> 104:6:text_code.mf
|   a.b = 20
|     ^
|> 104:8:text_code.mf
|   a.b = 20
|       ^
|> 104:11:text_code.mf
|   a.b = 20
|         ^^
|> 105:3:text_code.mf
|   a.c = 30
| ^^
|> 105:4:text_code.mf
|   a.c = 30
|   ^
|> 105:5:text_code.mf
|   a.c = 30
|    ^
|> 105:6:text_code.mf
|   a.c = 30
|     ^
|> 105:8:text_code.mf
|   a.c = 30
|       ^
|> 105:11:text_code.mf
|   a.c = 30
|         ^^
|> 106:2:text_code.mf
| 
| ^
|> 107:1:text_code.mf
| fun some_string -> &u8:
| ^
|> 107:4:text_code.mf
| fun some_string -> &u8:
| ^^^
|> 107:16:text_code.mf
| fun some_string -> &u8:
|     ^^^^^^^^^^^
|> 107:19:text_code.mf
| fun some_string -> &u8:
|                 ^^
|> 107:21:text_code.mf
| fun some_string -> &u8:
|                    ^
|> 107:23:text_code.mf
| fun some_string -> &u8:
|                     ^^
|> 107:24:text_code.mf
| fun some_string -> &u8:
|                       ^
|> 108:3:text_code.mf
|   "
| ^^
|> 110:4:text_code.mf
|   "
| hello there
|   "
| ^^^^^^^^^^^
===global===
None
None
VarStatement(None, true) "var something = [1, 2, 3]":
 VarAssign "something = [1, 2, 3]":
  Group "something":
   Ident "something"
  None
  Group "=":
   Array "[":
    Lit "1"
    Lit "2"
    Lit "3"
===global===
None
None
VarStatement(None, false) "let hello = \"hello\"":
 VarAssign "hello = \"hello\"":
  Group "hello":
   Ident "hello"
  None
  Group "=":
   Lit "\"hello\""
===type===
Group "":
 Comment "##[\r\n  multiline doc comment\r\n]#"
Struct(None) "struct":
 Ident "Scope"
 None
===type===
None
Struct(None) "struct":
 Instantiation "Template[T]":
  Ident "Template"
  Ident "T"
 None
===type===
None
Struct(None) "struct":
 Ident "Foo"
 Group ":":
  StructField(None, false) "a, b, c: int":
   Ident "a"
   Ident "b"
   Ident "c"
   Ident "int"
===type===
None
Struct(None) "struct":
 Ident "Goo"
 Group ":":
  StructField(None, true) "foo: Foo":
   Ident "foo"
   Ident "Foo"
  StructField(None, false) "gva: int":
   Ident "gva"
   Ident "int"
===fun===
None
None
Fun(None) "fun pointed_function(a: Int, b: Int) -> int:\r\n  return a + b":
 FunHeader(Normal) "fun pointed_function(a: Int, b: Int) -> int":
  Ident "pointed_function"
  FunArgument(false) "a: Int":
   Ident "a"
   Ident "Int"
  FunArgument(false) "b: Int":
   Ident "b"
   Ident "Int"
  Ident "int"
  None
 Group ":":
  ReturnStatement "return a + b":
   BinaryOp "a + b":
    Ident "+"
    Ident "a"
    Ident "b"
===fun===
None
Group "":
 Comment "## doc comment\r"
Fun(None) "fun something -> fun(int, int) -> int:\r\n  # ignored comment\r\n  return #[ even more ignored comment ]# pointed_function":
 FunHeader(Normal) "fun something -> fun(int, int) -> int":
  Ident "something"
  FunHeader(Normal) "fun(int, int) -> int":
   None
   Ident "int"
   Ident "int"
   Ident "int"
   None
  None
 Group ":":
  ReturnStatement "return #[ even more ignored comment ]# pointed_function":
   Ident "pointed_function"
===fun===
Impl(None) "impl":
 None
 Ident "Scope"
None
Fun(None) "fun new -> Self:\r\n    return":
 FunHeader(Normal) "fun new -> Self":
  Ident "new"
  Ident "Self"
  None
 Group ":":
  ReturnStatement "return":
   None
===fun===
Impl(None) "impl":
 None
 Ident "Scope"
None
Fun(None) "fun do_nothing(s: Self):\r\n    pass":
 FunHeader(Normal) "fun do_nothing(s: Self)":
  Ident "do_nothing"
  FunArgument(false) "s: Self":
   Ident "s"
   Ident "Self"
  None
  None
 Group ":":
  Pass "pass"
===fun===
Impl(None) "impl":
 Group "[":
  Ident "T"
 Instantiation "Template[T]":
  Ident "Template"
  Ident "T"
None
Fun(None) "fun new -> Self:\r\n    return":
 FunHeader(Normal) "fun new -> Self":
  Ident "new"
  Ident "Self"
  None
 Group ":":
  ReturnStatement "return":
   None
===fun===
Impl(None) "impl":
 Group "[":
  Ident "T"
 Instantiation "Template[T]":
  Ident "Template"
  Ident "T"
None
Fun(None) "fun do_nothing(s: Self, value: T) -> T:\r\n    value":
 FunHeader(Normal) "fun do_nothing(s: Self, value: T) -> T":
  Ident "do_nothing"
  FunArgument(false) "s: Self":
   Ident "s"
   Ident "Self"
  FunArgument(false) "value: T":
   Ident "value"
   Ident "T"
  Ident "T"
  None
 Group ":":
  Ident "value"
===fun===
None
None
Fun(None) "fun use_chain:\r\n  module::Type::method::[param]()":
 FunHeader(Normal) "fun use_chain":
  Ident "use_chain"
  None
  None
 Group ":":
  Call(false) "module::Type::method::[param]()":
   Instantiation "module::Type::method::[param]":
    Path "module::Type::method":
     Ident "module"
     Ident "Type"
     Ident "method"
    Ident "param"
===fun===
None
None
Fun(None) "fun flo: pass":
 FunHeader(Normal) "fun flo":
  Ident "flo"
  None
  None
 Group ":":
  Pass "pass"
===fun===
None
None
Fun(None) "fun foo(): pass":
 FunHeader(Normal) "fun foo()":
  Ident "foo"
  None
  None
 Group ":":
  Pass "pass"
===fun===
None
None
Fun(None) "fun goo(a: i8, b: i8): pass":
 FunHeader(Normal) "fun goo(a: i8, b: i8)":
  Ident "goo"
  FunArgument(false) "a: i8":
   Ident "a"
   Ident "i8"
  FunArgument(false) "b: i8":
   Ident "b"
   Ident "i8"
  None
  None
 Group ":":
  Pass "pass"
===fun===
None
None
Fun(None) "fun loo:\r\n  noo::loo::[i8]()\r\n\r\n  let array = [1, 2, 3]\r\n  array[0] = 3\r\n  array[2] = always[1]\r\n  array[1] = 1\r\n\r\n  pass":
 FunHeader(Normal) "fun loo":
  Ident "loo"
  None
  None
 Group ":":
  Call(false) "noo::loo::[i8]()":
   Instantiation "noo::loo::[i8]":
    Path "noo::loo":
     Ident "noo"
     Ident "loo"
    Ident "i8"
  VarStatement(None, false) "let array = [1, 2, 3]":
   VarAssign "array = [1, 2, 3]":
    Group "array":
     Ident "array"
    None
    Group "=":
     Array "[":
      Lit "1"
      Lit "2"
      Lit "3"
  BinaryOp "array[0] = 3":
   Ident "="
   Index "array[0]":
    Ident "array"
    Lit "0"
   Lit "3"
  BinaryOp "array[2] = always[1]":
   Ident "="
   Index "array[2]":
    Ident "array"
    Lit "2"
   Index "always[1]":
    Ident "always"
    Lit "1"
  BinaryOp "array[1] = 1":
   Ident "="
   Index "array[1]":
    Ident "array"
    Lit "1"
   Lit "1"
  Pass "pass"
===fun===
None
None
Fun(None) "fun main -> i64:\r\n  return 10 + 4 - 2 * 1 + 8":
 FunHeader(Normal) "fun main -> i64":
  Ident "main"
  Ident "i64"
  None
 Group ":":
  ReturnStatement "return 10 + 4 - 2 * 1 + 8":
   BinaryOp "10 + 4 - 2 * 1 + 8":
    Ident "-"
    BinaryOp "10 + 4":
     Ident "+"
     Lit "10"
     Lit "4"
    BinaryOp "2 * 1 + 8":
     Ident "+"
     BinaryOp "2 * 1":
      Ident "*"
      Lit "2"
      Lit "1"
     Lit "8"
===fun===
None
None
Fun(None) "fun operator_stress_test -> i64:\r\n  return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
 FunHeader(Normal) "fun operator_stress_test -> i64":
  Ident "operator_stress_test"
  Ident "i64"
  None
 Group ":":
  ReturnStatement "return 10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
   BinaryOp "10 + 2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
    Ident "+"
    Lit "10"
    BinaryOp "2 * 1 - 9 | 4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
     Ident "|"
     BinaryOp "2 * 1 - 9":
      Ident "-"
      BinaryOp "2 * 1":
       Ident "*"
       Lit "2"
       Lit "1"
      Lit "9"
     BinaryOp "4 & 1 ^ 2 >> 1 << 7 min 20 max 10":
      Ident "^"
      BinaryOp "4 & 1":
       Ident "&"
       Lit "4"
       Lit "1"
      BinaryOp "2 >> 1 << 7 min 20 max 10":
       Ident "max"
       BinaryOp "2 >> 1 << 7 min 20":
        Ident "min"
        BinaryOp "2 >> 1 << 7":
         Ident "<<"
         BinaryOp "2 >> 1":
          Ident ">>"
          Lit "2"
          Lit "1"
         Lit "7"
        Lit "20"
       Lit "10"
===fun===
None
None
Fun(None) "fun conditional -> i64:\r\n  if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
 FunHeader(Normal) "fun conditional -> i64":
  Ident "conditional"
  Ident "i64"
  None
 Group ":":
  IfExpr "if false:\r\n    return 10\r\n  elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
   Lit "false"
   Group ":":
    ReturnStatement "return 10":
     Lit "10"
   Group "elif":
    IfExpr "elif true:\r\n    return if true: 10 else: 20\r\n  else:\r\n    return 0":
     Lit "true"
     Group ":":
      ReturnStatement "return if true: 10 else: 20":
       IfExpr "if true: 10 else: 20":
        Lit "true"
        Group ":":
         Lit "10"
        Group ":":
         Lit "20"
     Group ":":
      ReturnStatement "return 0":
       Lit "0"
===fun===
None
Group "":
 AttributeAssign "inline = always":
  Ident "inline"
  Ident "always"
 AttributeAssign "call_conv = cold":
  Ident "call_conv"
  Ident "cold"
Fun(None) "fun inline_fn -> u32:\r\n  return 10":
 FunHeader(Normal) "fun inline_fn -> u32":
  Ident "inline_fn"
  Ident "u32"
  None
 Group ":":
  ReturnStatement "return 10":
   Lit "10"
===fun===
None
None
Fun(None) "fun fib(v: i64) -> i64:\r\n  return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
 FunHeader(Normal) "fun fib(v: i64) -> i64":
  Ident "fib"
  FunArgument(false) "v: i64":
   Ident "v"
   Ident "i64"
  Ident "i64"
  None
 Group ":":
  ReturnStatement "return if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
   IfExpr "if v == 0 | v == 1:\r\n    1\r\n  else:\r\n    fib(v - 1) + fib(v - 2)":
    BinaryOp "v == 0 | v == 1":
     Ident "|"
     BinaryOp "v == 0":
      Ident "=="
      Ident "v"
      Lit "0"
     BinaryOp "v == 1":
      Ident "=="
      Ident "v"
      Lit "1"
    Group ":":
     Lit "1"
    Group ":":
     BinaryOp "fib(v - 1) + fib(v - 2)":
      Ident "+"
      Call(false) "fib(v - 1)":
       Ident "fib"
       BinaryOp "v - 1":
        Ident "-"
        Ident "v"
        Lit "1"
      Call(false) "fib(v - 2)":
       Ident "fib"
       BinaryOp "v - 2":
        Ident "-"
        Ident "v"
        Lit "2"
===fun===
None
None
Fun(None) "fun fib_loop(v: i64) -> i64:\r\n  var a, b, c = 1\r\n  for'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a\r\n  return c":
 FunHeader(Normal) "fun fib_loop(v: i64) -> i64":
  Ident "fib_loop"
  FunArgument(false) "v: i64":
   Ident "v"
   Ident "i64"
  Ident "i64"
  None
 Group ":":
  VarStatement(None, true) "var a, b, c = 1":
   VarAssign "a, b, c = 1":
    Group "a":
     Ident "a"
     Ident "b"
     Ident "c"
    None
    Group "=":
     Lit "1"
     Ident "a"
     Ident "a"
  Loop "for'a:\r\n    c = a + b\r\n    a = b\r\n    b = c\r\n    v = v - 1\r\n    if v == 0:\r\n      break'a":
   Ident "'a"
   Group ":":
    BinaryOp "c = a + b":
     Ident "="
     Ident "c"
     BinaryOp "a + b":
      Ident "+"
      Ident "a"
      Ident "b"
    BinaryOp "a = b":
     Ident "="
     Ident "a"
     Ident "b"
    BinaryOp "b = c":
     Ident "="
     Ident "b"
     Ident "c"
    BinaryOp "v = v - 1":
     Ident "="
     Ident "v"
     BinaryOp "v - 1":
      Ident "-"
      Ident "v"
      Lit "1"
    IfExpr "if v == 0:\r\n      break'a":
     BinaryOp "v == 0":
      Ident "=="
      Ident "v"
      Lit "0"
     Group ":":
      Break "break'a":
       Ident "'a"
       None
     None
  ReturnStatement "return c":
   Ident "c"
===fun===
None
None
Fun(None) "fun unary_operators(a: i64) -> i64:\r\n  return -a + ~a + !a + ++a + --a":
 FunHeader(Normal) "fun unary_operators(a: i64) -> i64":
  Ident "unary_operators"
  FunArgument(false) "a: i64":
   Ident "a"
   Ident "i64"
  Ident "i64"
  None
 Group ":":
  ReturnStatement "return -a + ~a + !a + ++a + --a":
   BinaryOp "-a + ~a + !a + ++a + --a":
    Ident "+"
    BinaryOp "-a + ~a + !a + ++a":
     Ident "+"
     BinaryOp "-a + ~a + !a":
      Ident "+"
      BinaryOp "-a + ~a":
       Ident "+"
       UnaryOp "-a":
        Ident "-"
        Ident "a"
       UnaryOp "~a":
        Ident "~"
        Ident "a"
      UnaryOp "!a":
       Ident "!"
       Ident "a"
     UnaryOp "++a":
      Ident "++"
      Ident "a"
    UnaryOp "--a":
     Ident "--"
     Ident "a"
===fun===
None
None
Fun(None) "fun strings -> i64:\r\n  var hello = \"hello\"\r\n  return 0":
 FunHeader(Normal) "fun strings -> i64":
  Ident "strings"
  Ident "i64"
  None
 Group ":":
  VarStatement(None, true) "var hello = \"hello\"":
   VarAssign "hello = \"hello\"":
    Group "hello":
     Ident "hello"
    None
    Group "=":
     Lit "\"hello\""
  ReturnStatement "return 0":
   Lit "0"
===fun===
None
None
Fun(None) "fun mutable_ref(a: &Foo):\r\n  a.a = 10\r\n  a.b = 20\r\n  a.c = 30":
 FunHeader(Normal) "fun mutable_ref(a: &Foo)":
  Ident "mutable_ref"
  FunArgument(false) "a: &Foo":
   Ident "a"
   Ref(false) "&Foo":
    Ident "Foo"
  None
  None
 Group ":":
  BinaryOp "a.a = 10":
   Ident "="
   DotExpr "a.a":
    Ident "a"
    Ident "a"
   Lit "10"
  BinaryOp "a.b = 20":
   Ident "="
   DotExpr "a.b":
    Ident "a"
    Ident "b"
   Lit "20"
  BinaryOp "a.c = 30":
   Ident "="
   DotExpr "a.c":
    Ident "a"
    Ident "c"
   Lit "30"
===fun===
None
None
Fun(None) "fun some_string -> &u8:\r\n  \"\r\nhello there\r\n  \"":
 FunHeader(Normal) "fun some_string -> &u8":
  Ident "some_string"
  Ref(false) "&u8":
   Ident "u8"
  None
 Group ":":
  Lit "\"\r\nhello there\r\n  \""
=== Mod(0) "pop"
=== Mod(0) "get_unchecked"
=== Mod(0) "some"
=== Mod(0) "sizeof"
=== Mod(0) "push"
=== Mod(0) "sizeof"
=== Mod(0) "get_unchecked"
=== Mod(0) "__index__"
=== Mod(0) "push"
=== Mod(0) "push"
=== Mod(0) "push"
=== Mod(0) "push"
=== Mod(0) "sizeof"
=== Mod(0) "get_unchecked"
=== Mod(0) "sizeof"
=== Mod(0) "assert_in_bounds"
=== Mod(0) "get_unchecked"
=== Mod(0) "in_bounds"
=== Mod(0) "reserve"
=== Mod(0) "get_unchecked_var"
=== Mod(0) "sizeof"
=== Mod(0) "sizeof"
=== Mod(0) "push"
=== Mod(0) "reserve"
=== Mod(0) "get_unchecked"
=== Mod(1) "len"
=== Mod(1) "__index__"
=== Mod(1) "__index__"
=== Mod(1) "get_unchecked"
=== Mod(1) "sizeof"
=== Mod(1) "push"
=== Mod(1) "push"
=== Mod(1) "push"
=== Mod(1) "goo"
=== Mod(1) "boo"
gen-test
=== Mod(0) "pop"
=== Mod(0) "get_unchecked"
=== Mod(0) "some"
=== Mod(0) "sizeof"
=== Mod(0) "push"
=== Mod(0) "sizeof"
=== Mod(0) "get_unchecked"
=== Mod(0) "__index__"
=== Mod(0) "push"
=== Mod(0) "push"
=== Mod(0) "push"
=== Mod(0) "push"
=== Mod(0) "sizeof"
=== Mod(0) "get_unchecked"
=== Mod(0) "sizeof"
=== Mod(0) "assert_in_bounds"
=== Mod(0) "get_unchecked"
=== Mod(0) "in_bounds"
=== Mod(0) "reserve"
=== Mod(0) "get_unchecked_var"
=== Mod(0) "sizeof"
=== Mod(0) "sizeof"
=== Mod(0) "push"
=== Mod(0) "reserve"
=== Mod(0) "get_unchecked"
fun pub exit(code: int)


fun pub print(str: &u8)


fun pub ceil(x: f64) -> f64


fun pub log10(x: f64) -> f64


fun pub memcpy(dest: &var u8, src: &u8, size: int)


fun pub memmove(dest: &var u8, src: &u8, size: int)


fun pub memset(ptr: &var u8, value: u8, size: int)


fun pub putchar(c: u32)


fun pub free(ptr: &var u8)


fun pub realloc(ptr: &var u8, size: int) -> &var u8


fun pub alloc(size: int) -> &var u8


fun pub pop_frame

  block1 []:
    v4 = GlobalLoad(gv0)
    v6 = Ref(v4)
    v5 = Call(Fun(484), EntityList { index: 5, unused: PhantomData })
    Return(None)

function u0:0() fast {
    ss0 = explicit_slot 32
    ss1 = explicit_slot 24
    ss2 = explicit_slot 32
    ss3 = explicit_slot 32
    gv0 = symbol colocated u1:0

block0:
    v0 = global_value.i64 gv0
    v1 = stack_addr.i64 ss0
    jump block1(v0, v1)

block1(v3: i64, v4: i64):
    v5 = iconst.i64 0
    v6 = load.i64 v3+8
    v7 = icmp eq v6, v5
    brnz v7, block3
    jump block4

block3:
    v8 = iconst.i64 0
    store v8, v4
    store v8, v4+8
    store v8, v4+16
    store v8, v4+24
    jump block2(v4)

block4:
    v9 = iconst.i64 1
    v10 = load.i64 v3+8
    v11 = isub v10, v9
    jump block5(v3, v11)

block5(v13: i64, v14: i64):
    v15 = iconst.i64 24
    v16 = imul v14, v15
    v17 = load.i64 v13
    v18 = iadd v17, v16
    jump block6(v18)

block6(v12: i64):
    v19 = stack_addr.i64 ss1
    v20 = load.i64 v12
    store v20, v19
    v21 = load.i64 v12+8
    store v21, v19+8
    v22 = load.i64 v12+16
    store v22, v19+16
    v23 = iconst.i64 1
    v24 = load.i64 v3+8
    v25 = isub v24, v23
    store v25, v3+8
    v26 = stack_addr.i64 ss1
    v27 = stack_addr.i64 ss2
    jump block7(v26, v27)

block7(v29: i64, v30: i64):
    v31 = iconst.i64 0
    stack_store v31, ss3
    stack_store v31, ss3+8
    stack_store v31, ss3+16
    stack_store v31, ss3+24
    stack_store v29, ss3
    stack_store v29, ss3+8
    stack_store v29, ss3+16
    v32 = bconst.b1 true
    v33 = bint.i8 v32
    stack_store v33, ss3+24
    v34 = stack_addr.i64 ss3
    v35 = load.i64 v34
    store v35, v30
    v36 = load.i64 v34+8
    store v36, v30+8
    v37 = load.i64 v34+16
    store v37, v30+16
    v38 = load.i64 v34+24
    store v38, v30+24
    jump block8(v30)

block8(v28: i64):
    v39 = load.i64 v28
    store v39, v4
    v40 = load.i64 v28+8
    store v40, v4+8
    v41 = load.i64 v28+16
    store v41, v4+16
    v42 = load.i64 v28+24
    store v42, v4+24
    jump block2(v4)

block2(v2: i64):
    return
}

fun pop(s: &var Self) -> Option[T]

  block2 [v7, v8]:
    v9 = Offset(v7)
    v10 = Deref(v9, false)
    v11 = Offset(v10)
    v12 = Lit(Int(0, 0))
    v13 = Call(Fun(309), EntityList { index: 13, unused: PhantomData })
    JumpIfTrue(v13, block3, EntityList { index: 0, unused: PhantomData })
    Jump(block4, EntityList { index: 0, unused: PhantomData })
  block3 []:
    v14 = Zeroed
    v15 = Deref(v8, false)
    v14 = Assign(v15)
    Return(Some(v8))
  block4 []:
    v16 = Offset(v7)
    v17 = Deref(v16, false)
    v18 = Offset(v17)
    v19 = Lit(Int(1, 0))
    v20 = Call(Fun(269), EntityList { index: 17, unused: PhantomData })
    v21 = Call(Fun(485), EntityList { index: 21, unused: PhantomData })
    v22 = Deref(v21, false)
    v23 = VarDecl(v22)
    v24 = Offset(v7)
    v25 = Deref(v24, true)
    v26 = Offset(v25)
    v27 = Offset(v7)
    v28 = Deref(v27, false)
    v29 = Offset(v28)
    v30 = Lit(Int(1, 0))
    v31 = Call(Fun(269), EntityList { index: 25, unused: PhantomData })
    v31 = Assign(v26)
    v32 = Call(Fun(486), EntityList { index: 29, unused: PhantomData })
    v33 = Deref(v8, false)
    v32 = Assign(v33)
    Return(Some(v8))

function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 32
    ss2 = explicit_slot 32

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = load.i64 v0+8
    v4 = icmp eq v3, v2
    brnz v4, block1
    jump block2

block1:
    v5 = iconst.i64 0
    store v5, v1
    store v5, v1+8
    store v5, v1+16
    store v5, v1+24
    return v1

block2:
    v6 = iconst.i64 1
    v7 = load.i64 v0+8
    v8 = isub v7, v6
    jump block3(v0, v8)

block3(v10: i64, v11: i64):
    v12 = iconst.i64 24
    v13 = imul v11, v12
    v14 = load.i64 v10
    v15 = iadd v14, v13
    jump block4(v15)

block4(v9: i64):
    v16 = stack_addr.i64 ss0
    v17 = load.i64 v9
    store v17, v16
    v18 = load.i64 v9+8
    store v18, v16+8
    v19 = load.i64 v9+16
    store v19, v16+16
    v20 = iconst.i64 1
    v21 = load.i64 v0+8
    v22 = isub v21, v20
    store v22, v0+8
    v23 = stack_addr.i64 ss0
    v24 = stack_addr.i64 ss1
    jump block5(v23, v24)

block5(v26: i64, v27: i64):
    v28 = iconst.i64 0
    stack_store v28, ss2
    stack_store v28, ss2+8
    stack_store v28, ss2+16
    stack_store v28, ss2+24
    stack_store v26, ss2
    stack_store v26, ss2+8
    stack_store v26, ss2+16
    v29 = bconst.b1 true
    v30 = bint.i8 v29
    stack_store v30, ss2+24
    v31 = stack_addr.i64 ss2
    v32 = load.i64 v31
    store v32, v27
    v33 = load.i64 v31+8
    store v33, v27+8
    v34 = load.i64 v31+16
    store v34, v27+16
    v35 = load.i64 v31+24
    store v35, v27+24
    jump block6(v27)

block6(v25: i64):
    v36 = load.i64 v25
    store v36, v1
    v37 = load.i64 v25+8
    store v37, v1+8
    v38 = load.i64 v25+16
    store v38, v1+16
    v39 = load.i64 v25+24
    store v39, v1+24
    return v1
}

fun some(value: T) -> Self

  block5 [v34, v35]:
    v36 = Zeroed
    v37 = VarDecl(v36)
    v38 = Offset(v37)
    v34 = Assign(v38)
    v39 = Offset(v37)
    v40 = Lit(Bool(true))
    v40 = Assign(v39)
    v41 = Deref(v35, false)
    v37 = Assign(v41)
    Return(Some(v35))

function u0:0(i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 32

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    stack_store v2, ss0
    stack_store v2, ss0+8
    stack_store v2, ss0+16
    stack_store v2, ss0+24
    stack_store v0, ss0
    stack_store v0, ss0+8
    stack_store v0, ss0+16
    v3 = bconst.b1 true
    v4 = bint.i8 v3
    stack_store v4, ss0+24
    v5 = stack_addr.i64 ss0
    v6 = load.i64 v5
    store v6, v1
    v7 = load.i64 v5+8
    store v7, v1+8
    v8 = load.i64 v5+16
    store v8, v1+16
    v9 = load.i64 v5+24
    store v9, v1+24
    return v1
}

fun get_unchecked(s: &Self, index: int) -> &T

  block6 [v42, v43]:
    v44 = Offset(v42)
    v45 = Deref(v44, false)
    v46 = Offset(v45)
    v47 = Cast(v46)
    v48 = Call(Fun(487), EntityList { index: 0, unused: PhantomData })
    v49 = Call(Fun(279), EntityList { index: 41, unused: PhantomData })
    v50 = Call(Fun(259), EntityList { index: 45, unused: PhantomData })
    v51 = Cast(v50)
    Return(Some(v51))

function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 24
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun pub sizeof[T] -> int


fun pub push_frame(line, column: int, file: &u8)

  block7 [v52, v53, v54]:
    v55 = Zeroed
    v56 = VarDecl(v55)
    v57 = Offset(v56)
    v52 = Assign(v57)
    v58 = Offset(v56)
    v53 = Assign(v58)
    v59 = Offset(v56)
    v54 = Assign(v59)
    v60 = GlobalLoad(gv0)
    v61 = Ref(v60)
    Call(Fun(488), EntityList { index: 53, unused: PhantomData })
    Return(None)

function u0:0(i64, i64, i64) fast {
    ss0 = explicit_slot 24
    gv0 = symbol colocated u1:0
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:9 sig0

block0(v0: i64, v1: i64, v2: i64):
    v3 = iconst.i64 0
    stack_store v3, ss0
    stack_store v3, ss0+8
    stack_store v3, ss0+16
    stack_store v0, ss0
    stack_store v1, ss0+8
    stack_store v2, ss0+16
    v4 = global_value.i64 gv0
    v5 = stack_addr.i64 ss0
    jump block1(v4, v5)

block1(v6: i64, v7: i64):
    v8 = iconst.i64 1
    v9 = load.i64 v6+8
    v10 = iadd v9, v8
    v11 = load.i64 v6+16
    v12 = icmp sgt v10, v11
    brnz v12, block3
    jump block4

block3:
    v13 = iconst.i64 2
    v14 = imul.i64 v10, v13
    store v14, v6+16
    v15 = iconst.i64 24
    v16 = load.i64 v6+16
    v17 = imul v16, v15
    v18 = load.i64 v6
    v19 = call fn0(v18, v17)
    store v19, v6
    jump block4

block4:
    v20 = load.i64 v6+8
    jump block5(v6, v20)

block5(v22: i64, v23: i64):
    v24 = iconst.i64 24
    v25 = imul v23, v24
    v26 = load.i64 v22
    v27 = iadd v26, v25
    jump block6(v27)

block6(v21: i64):
    v28 = load.i64 v7
    store v28, v21
    v29 = load.i64 v7+8
    store v29, v21+8
    v30 = load.i64 v7+16
    store v30, v21+16
    store.i64 v10, v6+8
    jump block2

block2:
    return
}

fun push(s: &var Self, value: T)

  block8 [v62, v63]:
    v64 = Offset(v62)
    v65 = Deref(v64, false)
    v66 = Offset(v65)
    v67 = Lit(Int(1, 0))
    v68 = Call(Fun(259), EntityList { index: 61, unused: PhantomData })
    v69 = VarDecl(v68)
    v70 = Offset(v62)
    v71 = Deref(v70, false)
    v72 = Offset(v71)
    v73 = Call(Fun(349), EntityList { index: 65, unused: PhantomData })
    JumpIfTrue(v73, block9, EntityList { index: 0, unused: PhantomData })
    Jump(block10, EntityList { index: 0, unused: PhantomData })
  block9 []:
    v74 = Offset(v62)
    v75 = Deref(v74, true)
    v76 = Offset(v75)
    v77 = Lit(Int(2, 0))
    v78 = Call(Fun(279), EntityList { index: 69, unused: PhantomData })
    v78 = Assign(v76)
    v79 = Offset(v62)
    v80 = Deref(v79, true)
    v81 = Offset(v80)
    v82 = Offset(v62)
    v83 = Deref(v82, false)
    v84 = Offset(v83)
    v85 = Cast(v84)
    v86 = Offset(v62)
    v87 = Deref(v86, false)
    v88 = Offset(v87)
    v89 = Call(Fun(487), EntityList { index: 0, unused: PhantomData })
    v90 = Call(Fun(279), EntityList { index: 73, unused: PhantomData })
    v91 = Call(Fun(474), EntityList { index: 77, unused: PhantomData })
    v92 = Cast(v91)
    v92 = Assign(v81)
    Jump(block10, EntityList { index: 0, unused: PhantomData })
  block10 []:
    v93 = Offset(v62)
    v94 = Deref(v93, true)
    v95 = Offset(v94)
    v96 = Call(Fun(485), EntityList { index: 81, unused: PhantomData })
    v97 = Deref(v96, true)
    v63 = Assign(v97)
    v98 = Offset(v62)
    v99 = Deref(v98, true)
    v100 = Offset(v99)
    v69 = Assign(v100)
    Return(None)

function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:9 sig0

block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = imul.i64 v4, v7
    store v8, v0+16
    v9 = iconst.i64 24
    v10 = load.i64 v0+16
    v11 = imul v10, v9
    v12 = load.i64 v0
    v13 = call fn0(v12, v11)
    store v13, v0
    jump block2

block2:
    v14 = load.i64 v0+8
    jump block3(v0, v14)

block3(v16: i64, v17: i64):
    v18 = iconst.i64 24
    v19 = imul v17, v18
    v20 = load.i64 v16
    v21 = iadd v20, v19
    jump block4(v21)

block4(v15: i64):
    v22 = load.i64 v1
    store v22, v15
    v23 = load.i64 v1+8
    store v23, v15+8
    v24 = load.i64 v1+16
    store v24, v15+16
    store.i64 v4, v0+8
    return
}

fun pub panic(msg: &u8)

  block11 [v101]:
    v102 = Lit(String(Span { source: Source(0), hash: ID(13432806085582464995), start: 226, end: 234, line: 0, column: 0 }))
    Call(Fun(482), EntityList { index: 89, unused: PhantomData })
    Call(Fun(482), EntityList { index: 93, unused: PhantomData })
    v103 = Lit(String(Span { source: Source(0), hash: ID(655990), start: 234, end: 236, line: 0, column: 0 }))
    Call(Fun(482), EntityList { index: 97, unused: PhantomData })
    v104 = GlobalLoad(gv0)
    v105 = Offset(v104)
    v106 = Lit(Int(0, 0))
    v107 = Call(Fun(309), EntityList { index: 101, unused: PhantomData })
    JumpIfTrue(v107, block12, EntityList { index: 0, unused: PhantomData })
    Jump(block13, EntityList { index: 0, unused: PhantomData })
  block12 []:
    v108 = Lit(String(Span { source: Source(0), hash: ID(5614517716665998117), start: 236, end: 312, line: 0, column: 0 }))
    Call(Fun(482), EntityList { index: 105, unused: PhantomData })
    v109 = Lit(Int(1, 0))
    Call(Fun(483), EntityList { index: 109, unused: PhantomData })
    Return(None)
  block13 []:
    v110 = Zeroed
    v111 = VarDecl(v110)
    v112 = Zeroed
    v113 = VarDecl(v112)
    Jump(block14, EntityList { index: 0, unused: PhantomData })
  block14 []:
    v114 = GlobalLoad(gv0)
    v115 = Offset(v114)
    v116 = Call(Fun(329), EntityList { index: 113, unused: PhantomData })
    JumpIfTrue(v116, block16, EntityList { index: 0, unused: PhantomData })
    Jump(block17, EntityList { index: 0, unused: PhantomData })
  block15 []:
    v139 = Lit(Char('\u{0}'))
    v140 = Call(Fun(62), EntityList { index: 161, unused: PhantomData })
    v141 = Ref(v111)
    Call(Fun(490), EntityList { index: 165, unused: PhantomData })
    v142 = Offset(v111)
    Call(Fun(482), EntityList { index: 169, unused: PhantomData })
    v143 = Lit(Int(1, 0))
    Call(Fun(483), EntityList { index: 173, unused: PhantomData })
    Return(None)
  block16 []:
    Jump(block15, EntityList { index: 0, unused: PhantomData })
  block17 []:
    v117 = GlobalLoad(gv0)
    v119 = Ref(v117)
    v118 = Call(Fun(489), EntityList { index: 117, unused: PhantomData })
    v120 = Deref(v118, false)
    v121 = VarDecl(v120)
    v122 = Offset(v121)
    v123 = Ref(v111)
    Call(Fun(443), EntityList { index: 121, unused: PhantomData })
    v124 = Lit(Char(':'))
    v125 = Call(Fun(62), EntityList { index: 125, unused: PhantomData })
    v126 = Ref(v111)
    Call(Fun(490), EntityList { index: 129, unused: PhantomData })
    v127 = Offset(v121)
    v128 = Ref(v111)
    Call(Fun(443), EntityList { index: 133, unused: PhantomData })
    v129 = Lit(Char(' '))
    v130 = Call(Fun(62), EntityList { index: 137, unused: PhantomData })
    v131 = Ref(v111)
    Call(Fun(490), EntityList { index: 141, unused: PhantomData })
    v132 = Offset(v121)
    v133 = Ref(v111)
    Call(Fun(444), EntityList { index: 145, unused: PhantomData })
    v134 = Lit(Char('\n'))
    v135 = Call(Fun(62), EntityList { index: 149, unused: PhantomData })
    v136 = Ref(v111)
    Call(Fun(490), EntityList { index: 153, unused: PhantomData })
    v137 = Lit(Int(1, 0))
    v138 = Call(Fun(259), EntityList { index: 157, unused: PhantomData })
    v138 = Assign(v113)
    Jump(block14, EntityList { index: 0, unused: PhantomData })

function u0:0(i64) fast {
    ss0 = explicit_slot 24
    ss1 = explicit_slot 24
    gv0 = symbol colocated u1:1
    gv1 = symbol colocated u1:2
    gv2 = symbol colocated u1:0
    gv3 = symbol colocated u1:3
    gv4 = symbol colocated u1:4
    sig0 = (i64) windows_fastcall
    sig1 = (i64) windows_fastcall
    sig2 = (i64, i64) -> i64 windows_fastcall
    sig3 = (i64) fast
    sig4 = (i64, i64) fast
    sig5 = (i64, i64) fast
    fn0 = u0:1 sig0
    fn1 = u0:0 sig1
    fn2 = u0:9 sig2
    fn3 = colocated u0:18 sig3
    fn4 = colocated u0:29 sig4
    fn5 = colocated u0:26 sig5

block0(v0: i64):
    v157 = iconst.i64 0
    v11 -> v157
    v156 -> v157
    v1 = global_value.i64 gv0
    call fn0(v1)
    call fn0(v0)
    v2 = global_value.i64 gv1
    call fn0(v2)
    v3 = global_value.i64 gv2
    v4 = iconst.i64 0
    v5 = load.i64 v3+8
    v6 = icmp eq v5, v4
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv3
    call fn0(v7)
    v8 = iconst.i64 1
    call fn1(v8)
    return

block2:
    v9 = iconst.i64 0
    stack_store v9, ss0
    stack_store v9, ss0+8
    stack_store v9, ss0+16
    v10 = iconst.i64 0
    jump block3(v10)

block3(v13: i64):
    v44 -> v13
    v158 -> v13
    v159 -> v13
    v160 -> v13
    v161 -> v13
    v162 -> v13
    v154 -> v158
    v12 = global_value.i64 gv2
    v14 = load.i64 v12+8
    v15 = icmp sge v13, v14
    brnz v15, block5
    jump block6

block4:
    v16 = iconst.i32 0
    v17 = ireduce.i8 v16
    v18 = stack_addr.i64 ss0
    jump block7(v18, v17)

block7(v19: i64, v20: i8):
    v21 = iconst.i64 1
    v22 = load.i64 v19+8
    v23 = iadd v22, v21
    v24 = load.i64 v19+16
    v25 = icmp sgt v23, v24
    brnz v25, block9
    jump block10

block9:
    v26 = iconst.i64 2
    v27 = imul.i64 v23, v26
    store v27, v19+16
    v28 = iconst.i64 1
    v29 = load.i64 v19+16
    v30 = imul v29, v28
    v31 = load.i64 v19
    v32 = call fn2(v31, v30)
    store v32, v19
    jump block10

block10:
    v33 = load.i64 v19+8
    jump block11(v19, v33)

block11(v35: i64, v36: i64):
    v37 = iconst.i64 1
    v38 = imul v36, v37
    v39 = load.i64 v35
    v40 = iadd v39, v38
    jump block12(v40)

block12(v34: i64):
    store.i8 v20, v34
    store.i64 v23, v19+8
    jump block8

block8:
    v41 = stack_load.i64 ss0
    call fn0(v41)
    v42 = iconst.i64 1
    call fn1(v42)
    return

block5:
    jump block4

block6:
    v43 = global_value.i64 gv2
    jump block13(v43, v44)

block13(v46: i64, v47: i64):
    jump block15(v46, v47)

block15(v48: i64, v49: i64):
    jump block19(v48, v49)

block19(v51: i64, v52: i64):
    v53 = iconst.i64 0
    v54 = icmp sge v52, v53
    v55 = load.i64 v51+8
    v56 = icmp slt v52, v55
    v57 = band v54, v56
    jump block20(v57)

block20(v50: b1):
    v58 = bint.i8 v50
    v59 = icmp_imm eq v58, 0
    brnz v59, block17
    jump block18

block17:
    v60 = global_value.i64 gv4
    call fn3(v60)
    jump block18

block18:
    jump block16

block16:
    jump block21(v46, v47)

block21(v62: i64, v63: i64):
    v64 = iconst.i64 24
    v65 = imul v63, v64
    v66 = load.i64 v62
    v67 = iadd v66, v65
    jump block22(v67)

block22(v61: i64):
    jump block14(v61)

block14(v45: i64):
    v68 = stack_addr.i64 ss1
    v69 = load.i64 v45
    store v69, v68
    v70 = load.i64 v45+8
    store v70, v68+8
    v71 = load.i64 v45+16
    store v71, v68+16
    v72 = stack_addr.i64 ss0
    v73 = stack_load.i64 ss1
    call fn4(v72, v73)
    v74 = iconst.i32 58
    v75 = ireduce.i8 v74
    v76 = stack_addr.i64 ss0
    jump block23(v76, v75)

block23(v77: i64, v78: i8):
    v79 = iconst.i64 1
    v80 = load.i64 v77+8
    v81 = iadd v80, v79
    v82 = load.i64 v77+16
    v83 = icmp sgt v81, v82
    brnz v83, block25
    jump block26

block25:
    v84 = iconst.i64 2
    v85 = imul.i64 v81, v84
    store v85, v77+16
    v86 = iconst.i64 1
    v87 = load.i64 v77+16
    v88 = imul v87, v86
    v89 = load.i64 v77
    v90 = call fn2(v89, v88)
    store v90, v77
    jump block26

block26:
    v91 = load.i64 v77+8
    jump block27(v77, v91)

block27(v93: i64, v94: i64):
    v95 = iconst.i64 1
    v96 = imul v94, v95
    v97 = load.i64 v93
    v98 = iadd v97, v96
    jump block28(v98)

block28(v92: i64):
    store.i8 v78, v92
    store.i64 v81, v77+8
    jump block24

block24:
    v99 = stack_addr.i64 ss0
    v100 = stack_load.i64 ss1+8
    call fn4(v99, v100)
    v101 = iconst.i32 32
    v102 = ireduce.i8 v101
    v103 = stack_addr.i64 ss0
    jump block29(v103, v102)

block29(v104: i64, v105: i8):
    v106 = iconst.i64 1
    v107 = load.i64 v104+8
    v108 = iadd v107, v106
    v109 = load.i64 v104+16
    v110 = icmp sgt v108, v109
    brnz v110, block31
    jump block32

block31:
    v111 = iconst.i64 2
    v112 = imul.i64 v108, v111
    store v112, v104+16
    v113 = iconst.i64 1
    v114 = load.i64 v104+16
    v115 = imul v114, v113
    v116 = load.i64 v104
    v117 = call fn2(v116, v115)
    store v117, v104
    jump block32

block32:
    v118 = load.i64 v104+8
    jump block33(v104, v118)

block33(v120: i64, v121: i64):
    v122 = iconst.i64 1
    v123 = imul v121, v122
    v124 = load.i64 v120
    v125 = iadd v124, v123
    jump block34(v125)

block34(v119: i64):
    store.i8 v105, v119
    store.i64 v108, v104+8
    jump block30

block30:
    v126 = stack_addr.i64 ss0
    v127 = stack_load.i64 ss1+16
    call fn5(v126, v127)
    v128 = iconst.i32 10
    v129 = ireduce.i8 v128
    v130 = stack_addr.i64 ss0
    jump block35(v130, v129)

block35(v131: i64, v132: i8):
    v133 = iconst.i64 1
    v134 = load.i64 v131+8
    v135 = iadd v134, v133
    v136 = load.i64 v131+16
    v137 = icmp sgt v135, v136
    brnz v137, block37
    jump block38

block37:
    v138 = iconst.i64 2
    v139 = imul.i64 v135, v138
    store v139, v131+16
    v140 = iconst.i64 1
    v141 = load.i64 v131+16
    v142 = imul v141, v140
    v143 = load.i64 v131
    v144 = call fn2(v143, v142)
    store v144, v131
    jump block38

block38:
    v145 = load.i64 v131+8
    jump block39(v131, v145)

block39(v147: i64, v148: i64):
    v149 = iconst.i64 1
    v150 = imul v148, v149
    v151 = load.i64 v147
    v152 = iadd v151, v150
    jump block40(v152)

block40(v146: i64):
    store.i8 v132, v146
    store.i64 v135, v131+8
    jump block36

block36:
    v153 = iconst.i64 1
    v155 = iadd.i64 v154, v153
    jump block3(v155)
}

fun push(s: &var Self, value: T)

  block18 [v144, v145]:
    v146 = Offset(v144)
    v147 = Deref(v146, false)
    v148 = Offset(v147)
    v149 = Lit(Int(1, 0))
    v150 = Call(Fun(259), EntityList { index: 181, unused: PhantomData })
    v151 = VarDecl(v150)
    v152 = Offset(v144)
    v153 = Deref(v152, false)
    v154 = Offset(v153)
    v155 = Call(Fun(349), EntityList { index: 185, unused: PhantomData })
    JumpIfTrue(v155, block19, EntityList { index: 0, unused: PhantomData })
    Jump(block20, EntityList { index: 0, unused: PhantomData })
  block19 []:
    v156 = Offset(v144)
    v157 = Deref(v156, true)
    v158 = Offset(v157)
    v159 = Lit(Int(2, 0))
    v160 = Call(Fun(279), EntityList { index: 189, unused: PhantomData })
    v160 = Assign(v158)
    v161 = Offset(v144)
    v162 = Deref(v161, true)
    v163 = Offset(v162)
    v164 = Offset(v144)
    v165 = Deref(v164, false)
    v166 = Offset(v165)
    v167 = Cast(v166)
    v168 = Offset(v144)
    v169 = Deref(v168, false)
    v170 = Offset(v169)
    v171 = Call(Fun(491), EntityList { index: 0, unused: PhantomData })
    v172 = Call(Fun(279), EntityList { index: 193, unused: PhantomData })
    v173 = Call(Fun(474), EntityList { index: 197, unused: PhantomData })
    v174 = Cast(v173)
    v174 = Assign(v163)
    Jump(block20, EntityList { index: 0, unused: PhantomData })
  block20 []:
    v175 = Offset(v144)
    v176 = Deref(v175, true)
    v177 = Offset(v176)
    v178 = Call(Fun(492), EntityList { index: 201, unused: PhantomData })
    v179 = Deref(v178, true)
    v145 = Assign(v179)
    v180 = Offset(v144)
    v181 = Deref(v180, true)
    v182 = Offset(v181)
    v151 = Assign(v182)
    Return(None)

function u0:0(i64, i8) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:9 sig0

block0(v0: i64, v1: i8):
    v2 = iconst.i64 1
    v3 = load.i64 v0+8
    v4 = iadd v3, v2
    v5 = load.i64 v0+16
    v6 = icmp sgt v4, v5
    brnz v6, block1
    jump block2

block1:
    v7 = iconst.i64 2
    v8 = imul.i64 v4, v7
    store v8, v0+16
    v9 = iconst.i64 1
    v10 = load.i64 v0+16
    v11 = imul v10, v9
    v12 = load.i64 v0
    v13 = call fn0(v12, v11)
    store v13, v0
    jump block2

block2:
    v14 = load.i64 v0+8
    jump block3(v0, v14)

block3(v16: i64, v17: i64):
    v18 = iconst.i64 1
    v19 = imul v17, v18
    v20 = load.i64 v16
    v21 = iadd v20, v19
    jump block4(v21)

block4(v15: i64):
    store.i8 v1, v15
    store.i64 v4, v0+8
    return
}

fun get_unchecked(s: &Self, index: int) -> &T

  block21 [v183, v184]:
    v185 = Offset(v183)
    v186 = Deref(v185, false)
    v187 = Offset(v186)
    v188 = Cast(v187)
    v189 = Call(Fun(491), EntityList { index: 0, unused: PhantomData })
    v190 = Call(Fun(279), EntityList { index: 209, unused: PhantomData })
    v191 = Call(Fun(259), EntityList { index: 213, unused: PhantomData })
    v192 = Cast(v191)
    Return(Some(v192))

function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun pub sizeof[T] -> int


fun __index__(s: &Self, index: int) -> &T

  block22 [v193, v194]:
    Call(Fun(493), EntityList { index: 221, unused: PhantomData })
    v195 = Call(Fun(485), EntityList { index: 225, unused: PhantomData })
    Return(Some(v195))

function u0:0(i64, i64) -> i64 fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64) fast
    fn0 = colocated u0:18 sig0

block0(v0: i64, v1: i64):
    jump block1(v0, v1)

block1(v2: i64, v3: i64):
    jump block5(v2, v3)

block5(v5: i64, v6: i64):
    v7 = iconst.i64 0
    v8 = icmp sge v6, v7
    v9 = load.i64 v5+8
    v10 = icmp slt v6, v9
    v11 = band v8, v10
    jump block6(v11)

block6(v4: b1):
    v12 = bint.i8 v4
    v13 = icmp_imm eq v12, 0
    brnz v13, block3
    jump block4

block3:
    v14 = global_value.i64 gv0
    call fn0(v14)
    jump block4

block4:
    jump block2

block2:
    jump block7(v0, v1)

block7(v16: i64, v17: i64):
    v18 = iconst.i64 24
    v19 = imul v17, v18
    v20 = load.i64 v16
    v21 = iadd v20, v19
    jump block8(v21)

block8(v15: i64):
    return v15
}

fun assert_in_bounds(s: &Self, index: int)

  block23 [v196, v197]:
    v198 = Call(Fun(494), EntityList { index: 233, unused: PhantomData })
    v199 = Call(Fun(250), EntityList { index: 237, unused: PhantomData })
    JumpIfTrue(v199, block24, EntityList { index: 0, unused: PhantomData })
    Jump(block25, EntityList { index: 0, unused: PhantomData })
  block24 []:
    v200 = Lit(String(Span { source: Source(0), hash: ID(6484216913505728610), start: 88, end: 108, line: 0, column: 0 }))
    Call(Fun(470), EntityList { index: 241, unused: PhantomData })
    Jump(block25, EntityList { index: 0, unused: PhantomData })
  block25 []:
    Return(None)

function u0:0(i64, i64) fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64) fast
    fn0 = colocated u0:18 sig0

block0(v0: i64, v1: i64):
    jump block3(v0, v1)

block3(v3: i64, v4: i64):
    v5 = iconst.i64 0
    v6 = icmp sge v4, v5
    v7 = load.i64 v3+8
    v8 = icmp slt v4, v7
    v9 = band v6, v8
    jump block4(v9)

block4(v2: b1):
    v10 = bint.i8 v2
    v11 = icmp_imm eq v10, 0
    brnz v11, block1
    jump block2

block1:
    v12 = global_value.i64 gv0
    call fn0(v12)
    jump block2

block2:
    return
}

fun in_bounds(s: &Self, index: int) -> bool

  block26 [v201, v202]:
    v203 = Lit(Int(0, 0))
    v204 = Call(Fun(329), EntityList { index: 249, unused: PhantomData })
    v205 = Offset(v201)
    v206 = Deref(v205, false)
    v207 = Offset(v206)
    v208 = Call(Fun(359), EntityList { index: 253, unused: PhantomData })
    v209 = Call(Fun(435), EntityList { index: 257, unused: PhantomData })
    Return(Some(v209))

function u0:0(i64, i64) -> b1 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = icmp sge v1, v2
    v4 = load.i64 v0+8
    v5 = icmp slt v1, v4
    v6 = band v3, v5
    return v6
}

fun pub assert(cond: bool)

  block27 [v210]:
    v211 = Call(Fun(250), EntityList { index: 265, unused: PhantomData })
    JumpIfTrue(v211, block28, EntityList { index: 0, unused: PhantomData })
    Jump(block29, EntityList { index: 0, unused: PhantomData })
  block28 []:
    v212 = Lit(String(Span { source: Source(0), hash: ID(18405710474171729989), start: 209, end: 226, line: 0, column: 0 }))
    Call(Fun(470), EntityList { index: 269, unused: PhantomData })
    Jump(block29, EntityList { index: 0, unused: PhantomData })
  block29 []:
    Return(None)

function u0:0(b1) fast {
    gv0 = symbol colocated u1:5
    sig0 = (i64) fast
    fn0 = colocated u0:18 sig0

block0(v0: b1):
    v1 = bint.i8 v0
    v2 = icmp_imm eq v1, 0
    brnz v2, block1
    jump block2

block1:
    v3 = global_value.i64 gv0
    call fn0(v3)
    jump block2

block2:
    return
}

fun print(s: &var Self, value: &u8)

  block30 [v213, v214]:
    v215 = Lit(Int(0, 0))
    v216 = VarDecl(v215)
    Jump(block31, EntityList { index: 0, unused: PhantomData })
  block31 []:
    v217 = Cast(v214)
    v218 = Call(Fun(259), EntityList { index: 277, unused: PhantomData })
    v219 = Cast(v218)
    v220 = Deref(v219, false)
    v221 = VarDecl(v220)
    v222 = Lit(Uint(0, 8))
    v223 = Call(Fun(305), EntityList { index: 281, unused: PhantomData })
    JumpIfTrue(v223, block33, EntityList { index: 0, unused: PhantomData })
    Jump(block34, EntityList { index: 0, unused: PhantomData })
  block32 []:
    Call(Fun(495), EntityList { index: 289, unused: PhantomData })
    v226 = Offset(v213)
    v227 = Deref(v226, false)
    v228 = Offset(v227)
    v229 = Call(Fun(496), EntityList { index: 293, unused: PhantomData })
    Call(Fun(479), EntityList { index: 297, unused: PhantomData })
    v230 = Offset(v213)
    v231 = Deref(v230, true)
    v232 = Offset(v231)
    v233 = Offset(v213)
    v234 = Deref(v233, false)
    v235 = Offset(v234)
    v236 = Call(Fun(259), EntityList { index: 301, unused: PhantomData })
    v236 = Assign(v232)
    Return(None)
  block33 []:
    Jump(block32, EntityList { index: 0, unused: PhantomData })
  block34 []:
    v224 = Lit(Int(1, 0))
    v225 = Call(Fun(259), EntityList { index: 285, unused: PhantomData })
    v225 = Assign(v216)
    Jump(block31, EntityList { index: 0, unused: PhantomData })

function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (i64, i64, i64) windows_fastcall
    fn0 = u0:9 sig0
    fn1 = u0:4 sig1

block0(v0: i64, v1: i64):
    v32 = iconst.i64 0
    v3 -> v32
    v2 = iconst.i64 0
    jump block1(v2)

block1(v4: i64):
    v26 -> v4
    v30 -> v4
    v33 -> v4
    v34 -> v4
    v9 -> v33
    v5 = iadd.i64 v1, v4
    v6 = load.i8 v5
    v7 = iconst.i8 0
    v8 = icmp eq v6, v7
    brnz v8, block3
    jump block4

block2:
    jump block5(v0, v9)

block5(v10: i64, v11: i64):
    v12 = load.i64 v10+16
    v13 = icmp sgt v12, v11
    brnz v13, block7
    jump block8

block7:
    jump block6

block8:
    v14 = iconst.i64 1
    v15 = imul.i64 v11, v14
    v16 = load.i64 v10
    v17 = call fn0(v16, v15)
    store v17, v10
    store.i64 v11, v10+16
    jump block6

block6:
    v18 = load.i64 v0+8
    jump block9(v0, v18)

block9(v20: i64, v21: i64):
    v22 = iconst.i64 1
    v23 = imul v21, v22
    v24 = load.i64 v20
    v25 = iadd v24, v23
    jump block10(v25)

block10(v19: i64):
    call fn1(v19, v1, v26)
    v27 = load.i64 v0+8
    v28 = iadd v27, v26
    store v28, v0+8
    return

block3:
    jump block2

block4:
    v29 = iconst.i64 1
    v31 = iadd.i64 v30, v29
    jump block1(v31)
}

fun get_unchecked_var(s: &var Self, index: int) -> &var T

  block35 [v237, v238]:
    v239 = Offset(v237)
    v240 = Deref(v239, false)
    v241 = Offset(v240)
    v242 = Cast(v241)
    v243 = Call(Fun(491), EntityList { index: 0, unused: PhantomData })
    v244 = Call(Fun(279), EntityList { index: 309, unused: PhantomData })
    v245 = Call(Fun(259), EntityList { index: 313, unused: PhantomData })
    v246 = Cast(v245)
    Return(Some(v246))

function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 1
    v3 = imul v1, v2
    v4 = load.i64 v0
    v5 = iadd v4, v3
    return v5
}

fun reserve(s: &var Self, new_cap: int)

  block36 [v247, v248]:
    v249 = Offset(v247)
    v250 = Deref(v249, false)
    v251 = Offset(v250)
    v252 = Call(Fun(349), EntityList { index: 321, unused: PhantomData })
    JumpIfTrue(v252, block37, EntityList { index: 0, unused: PhantomData })
    Jump(block38, EntityList { index: 0, unused: PhantomData })
  block37 []:
    Return(None)
  block38 []:
    v253 = Offset(v247)
    v254 = Deref(v253, true)
    v255 = Offset(v254)
    v256 = Offset(v247)
    v257 = Deref(v256, false)
    v258 = Offset(v257)
    v259 = Call(Fun(491), EntityList { index: 0, unused: PhantomData })
    v260 = Call(Fun(279), EntityList { index: 325, unused: PhantomData })
    v261 = Call(Fun(474), EntityList { index: 329, unused: PhantomData })
    v261 = Assign(v255)
    v262 = Offset(v247)
    v263 = Deref(v262, true)
    v264 = Offset(v263)
    v248 = Assign(v264)
    Return(None)

function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    fn0 = u0:9 sig0

block0(v0: i64, v1: i64):
    v2 = load.i64 v0+16
    v3 = icmp sgt v2, v1
    brnz v3, block1
    jump block2

block1:
    return

block2:
    v4 = iconst.i64 1
    v5 = imul.i64 v1, v4
    v6 = load.i64 v0
    v7 = call fn0(v6, v5)
    store v7, v0
    store.i64 v1, v0+16
    return
}

fun print_int(s: &var Self, var value: int)

  block39 [v265, v266]:
    v267 = VarDecl(v266)
    v268 = Lit(Int(0, 0))
    v269 = Call(Fun(359), EntityList { index: 337, unused: PhantomData })
    JumpIfTrue(v269, block40, EntityList { index: 0, unused: PhantomData })
    Jump(block41, EntityList { index: 0, unused: PhantomData })
  block40 []:
    v270 = Lit(Char('-'))
    v271 = Call(Fun(62), EntityList { index: 341, unused: PhantomData })
    Call(Fun(490), EntityList { index: 345, unused: PhantomData })
    v272 = Call(Fun(242), EntityList { index: 349, unused: PhantomData })
    v272 = Assign(v267)
    Jump(block41, EntityList { index: 0, unused: PhantomData })
  block41 []:
    v273 = Offset(v265)
    v274 = Deref(v273, false)
    v275 = Offset(v274)
    v276 = VarDecl(v275)
    v277 = Lit(Int(0, 0))
    v278 = Call(Fun(319), EntityList { index: 353, unused: PhantomData })
    JumpIfTrue(v278, block42, EntityList { index: 0, unused: PhantomData })
    Jump(block44, EntityList { index: 0, unused: PhantomData })
  block42 []:
    v279 = Call(Fun(137), EntityList { index: 357, unused: PhantomData })
    v280 = Call(Fun(480), EntityList { index: 361, unused: PhantomData })
    v281 = Call(Fun(163), EntityList { index: 365, unused: PhantomData })
    Jump(block43, EntityList { index: 369, unused: PhantomData })
  block43 [v282]:
    v284 = Lit(Int(1, 0))
    v285 = Call(Fun(259), EntityList { index: 381, unused: PhantomData })
    v286 = VarDecl(v285)
    v287 = Call(Fun(259), EntityList { index: 385, unused: PhantomData })
    Call(Fun(495), EntityList { index: 389, unused: PhantomData })
    v288 = Offset(v265)
    v289 = Deref(v288, true)
    v290 = Offset(v289)
    v291 = Call(Fun(259), EntityList { index: 393, unused: PhantomData })
    v291 = Assign(v290)
    v292 = VarDecl(v286)
    v293 = VarDecl(v267)
    Jump(block45, EntityList { index: 0, unused: PhantomData })
  block44 []:
    v283 = Lit(Int(0, 0))
    Jump(block43, EntityList { index: 377, unused: PhantomData })
  block45 []:
    v294 = Lit(Int(0, 0))
    v295 = Call(Fun(309), EntityList { index: 397, unused: PhantomData })
    JumpIfTrue(v295, block47, EntityList { index: 0, unused: PhantomData })
    Jump(block48, EntityList { index: 0, unused: PhantomData })
  block46 []:
    Return(None)
  block47 []:
    Jump(block46, EntityList { index: 0, unused: PhantomData })
  block48 []:
    v296 = Lit(Int(10, 0))
    v297 = Call(Fun(299), EntityList { index: 401, unused: PhantomData })
    v298 = VarDecl(v297)
    v299 = Lit(Int(10, 0))
    v300 = Call(Fun(289), EntityList { index: 405, unused: PhantomData })
    v300 = Assign(v293)
    v301 = Call(Fun(259), EntityList { index: 409, unused: PhantomData })
    v302 = Lit(Int(1, 0))
    v303 = Call(Fun(269), EntityList { index: 413, unused: PhantomData })
    v304 = Call(Fun(492), EntityList { index: 417, unused: PhantomData })
    v305 = Deref(v304, true)
    v306 = Call(Fun(95), EntityList { index: 421, unused: PhantomData })
    v307 = Lit(Char('0'))
    v308 = Call(Fun(257), EntityList { index: 425, unused: PhantomData })
    v309 = Call(Fun(62), EntityList { index: 429, unused: PhantomData })
    v309 = Assign(v305)
    v310 = Lit(Int(1, 0))
    v311 = Call(Fun(269), EntityList { index: 433, unused: PhantomData })
    v311 = Assign(v292)
    Jump(block45, EntityList { index: 0, unused: PhantomData })

function u0:0(i64, i64) fast {
    sig0 = (i64, i64) -> i64 windows_fastcall
    sig1 = (f64) -> f64 windows_fastcall
    fn0 = u0:9 sig0
    fn1 = u0:3 sig1

block0(v0: i64, v1: i64):
    v89 -> v1
    v90 -> v1
    v30 -> v89
    v113 = iconst.i64 0
    v111 -> v113
    v112 -> v113
    v114 -> v113
    v108 = iconst.i64 0
    v106 -> v108
    v107 -> v108
    v109 -> v108
    v102 = iconst.i64 0
    v100 -> v102
    v101 -> v102
    v103 -> v102
    v84 = iconst.i64 0
    v3 -> v84
    v4 = iconst.i64 0
    v5 = icmp slt v1, v4
    brnz v5, block1
    jump block2(v1)

block1:
    v6 = iconst.i32 45
    v7 = ireduce.i8 v6
    jump block10(v0, v7)

block10(v8: i64, v9: i8):
    v10 = iconst.i64 1
    v11 = load.i64 v8+8
    v12 = iadd v11, v10
    v13 = load.i64 v8+16
    v14 = icmp sgt v12, v13
    brnz v14, block12
    jump block13

block12:
    v15 = iconst.i64 2
    v16 = imul.i64 v12, v15
    store v16, v8+16
    v17 = iconst.i64 1
    v18 = load.i64 v8+16
    v19 = imul v18, v17
    v20 = load.i64 v8
    v21 = call fn0(v20, v19)
    store v21, v8
    jump block13

block13:
    v22 = load.i64 v8+8
    jump block14(v8, v22)

block14(v24: i64, v25: i64):
    v26 = iconst.i64 1
    v27 = imul v25, v26
    v28 = load.i64 v24
    v29 = iadd v28, v27
    jump block15(v29)

block15(v23: i64):
    store.i8 v9, v23
    store.i64 v12, v8+8
    jump block11

block11:
    v31 = ineg.i64 v30
    jump block2(v31)

block2(v34: i64):
    v36 -> v34
    v32 = load.i64 v0+8
    v33 = iconst.i64 0
    v35 = icmp ne v34, v33
    brnz v35, block3
    jump block5

block3:
    v37 = fcvt_from_sint.f64 v36
    v38 = call fn1(v37)
    v39 = fcvt_to_sint.i64 v38
    jump block4(v39, v102, v36, v108, v113)

block4(v2: i64, v99: i64, v104: i64, v105: i64, v110: i64):
    v91 -> v99
    v92 -> v99
    v93 -> v104
    v94 -> v104
    v95 -> v105
    v96 -> v105
    v97 -> v110
    v98 -> v110
    v40 = iconst.i64 1
    v41 = iadd v2, v40
    v42 = iadd.i64 v32, v41
    jump block16(v0, v42)

block16(v43: i64, v44: i64):
    v45 = load.i64 v43+16
    v46 = icmp sgt v45, v44
    brnz v46, block18
    jump block19

block18:
    jump block17(v91, v93, v95, v97)

block19:
    v47 = iconst.i64 1
    v48 = imul.i64 v44, v47
    v49 = load.i64 v43
    v50 = call fn0(v49, v48)
    store v50, v43
    store.i64 v44, v43+16
    jump block17(v92, v94, v96, v98)

block17(v52: i64, v53: i64, v54: i64, v88: i64):
    v51 = iadd.i64 v32, v41
    store v51, v0+8
    jump block6(v41, v53, v88)

block5:
    v55 = iconst.i64 0
    jump block4(v55, v100, v34, v106, v111)

block6(v57: i64, v85: i64, v87: i64):
    v65 -> v57
    v82 -> v57
    v60 -> v85
    v62 -> v87
    v56 = iconst.i64 0
    v58 = icmp eq v57, v56
    brnz v58, block8
    jump block9

block7:
    return

block8:
    jump block7

block9:
    v59 = iconst.i64 10
    v61 = srem.i64 v60, v59
    v76 -> v61
    v63 = iconst.i64 10
    v64 = sdiv.i64 v60, v63
    v86 -> v64
    v66 = iadd.i64 v32, v65
    v67 = iconst.i64 1
    v68 = isub v66, v67
    jump block20(v0, v68)

block20(v70: i64, v71: i64):
    v72 = iconst.i64 1
    v73 = imul v71, v72
    v74 = load.i64 v70
    v75 = iadd v74, v73
    jump block21(v75)

block21(v69: i64):
    v77 = ireduce.i32 v76
    v78 = iconst.i32 48
    v79 = iadd v77, v78
    v80 = ireduce.i8 v79
    store v80, v69
    v81 = iconst.i64 1
    v83 = isub.i64 v82, v81
    jump block6(v83, v86, v76)
}



  block0 [v0, v1]:
    v2 = Zeroed
    v3 = VarDecl(v2)
    Return(Some(v3))

function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v4 = iconst.i64 0
    v3 -> v4
    v2 = iconst.i64 0
    return v2
}

=== Mod(1) "__index__"
=== Mod(1) "__index__"
=== Mod(1) "__index__"
=== Mod(1) "push"
=== Mod(1) "__index__"
=== Mod(1) "get_unchecked"
=== Mod(1) "sizeof"
=== Mod(1) "len"
=== Mod(1) "__index__"
=== Mod(1) "__index__"
=== Mod(1) "__index__"
=== Mod(1) "get_unchecked"
=== Mod(1) "sizeof"
=== Mod(1) "len"
=== Mod(1) "__index__"
fun calls_a

  block1 []:
    v7 = Lit(Int(251, 0))
    v8 = Lit(Int(10, 0))
    v9 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 5, unused: PhantomData })
    Call(Fun(524), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = () fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:31 sig1
    fn2 = colocated u0:11 sig2

block0:
    v0 = iconst.i64 251
    v1 = iconst.i64 10
    v2 = global_value.i64 gv0
    call fn0(v0, v1, v2)
    jump block1

block1:
    v3 = iconst.i64 247
    v4 = iconst.i64 10
    v5 = global_value.i64 gv0
    call fn0(v3, v4, v5)
    call fn1()
    call fn2()
    jump block2

block2:
    call fn2()
    return
}

fun calls_b

  block2 []:
    v10 = Lit(Int(247, 0))
    v11 = Lit(Int(10, 0))
    v12 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 9, unused: PhantomData })
    Call(Fun(525), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = () fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:32 sig1
    fn2 = colocated u0:11 sig2

block0:
    v0 = iconst.i64 247
    v1 = iconst.i64 10
    v2 = global_value.i64 gv0
    call fn0(v0, v1, v2)
    jump block1

block1:
    v3 = iconst.i64 251
    v4 = iconst.i64 10
    v5 = global_value.i64 gv0
    call fn0(v3, v4, v5)
    call fn1()
    call fn2()
    jump block2

block2:
    call fn2()
    return
}

fun assert(cond: bool)

  block3 [v13]:
    Call(Fun(469), EntityList { index: 17, unused: PhantomData })
    v14 = Lit(String(Span { source: Source(0), hash: ID(31334373625102386), start: 339, end: 343, line: 0, column: 0 }))
    Call(Fun(482), EntityList { index: 21, unused: PhantomData })
    Return(None)

function u0:0(b1) fast {
    gv0 = symbol colocated u1:5
    gv1 = symbol colocated u1:9
    sig0 = (i64) fast
    sig1 = (i64) windows_fastcall
    fn0 = colocated u0:18 sig0
    fn1 = u0:1 sig1

block0(v0: b1):
    jump block1(v0)

block1(v1: b1):
    v2 = bint.i8 v1
    v3 = icmp_imm eq v2, 0
    brnz v3, block3
    jump block4

block3:
    v4 = global_value.i64 gv0
    call fn0(v4)
    jump block4

block4:
    jump block2

block2:
    v5 = global_value.i64 gv1
    call fn1(v5)
    return
}

fun test_case_15

  block4 []:
    v15 = Zeroed
    v16 = VarDecl(v15)
    v17 = Uninitialized
    v18 = VarDecl(v17)
    v19 = Offset(v18)
    v16 = Assign(v19)
    v20 = Offset(v18)
    v16 = Assign(v20)
    v21 = VarDecl(v18)
    v22 = Lit(Int(1, 0))
    v24 = Ref(v21)
    v23 = Call(Fun(526), EntityList { index: 25, unused: PhantomData })
    v25 = Deref(v23, true)
    v26 = Offset(v25)
    v27 = Lit(Uint(255, 8))
    v27 = Assign(v26)
    v28 = Lit(Int(0, 0))
    v30 = Ref(v21)
    v29 = Call(Fun(526), EntityList { index: 29, unused: PhantomData })
    v31 = Deref(v29, true)
    v16 = Assign(v31)
    v32 = Lit(String(Span { source: Source(0), hash: ID(7418309972045803131), start: 334, end: 339, line: 0, column: 0 }))
    Call(Fun(482), EntityList { index: 33, unused: PhantomData })
    v33 = Zeroed
    v34 = VarDecl(v33)
    v35 = Lit(Int(1, 0))
    v37 = Ref(v21)
    v36 = Call(Fun(526), EntityList { index: 37, unused: PhantomData })
    v38 = Deref(v36, false)
    v39 = Offset(v38)
    v40 = Call(Fun(158), EntityList { index: 41, unused: PhantomData })
    v41 = Ref(v34)
    Call(Fun(443), EntityList { index: 45, unused: PhantomData })
    v42 = Lit(Uint(0, 8))
    v43 = Ref(v34)
    Call(Fun(490), EntityList { index: 49, unused: PhantomData })
    v44 = Offset(v34)
    Call(Fun(482), EntityList { index: 53, unused: PhantomData })
    v45 = Lit(String(Span { source: Source(0), hash: ID(655990), start: 234, end: 236, line: 0, column: 0 }))
    Call(Fun(482), EntityList { index: 57, unused: PhantomData })
    v46 = Lit(Int(1, 0))
    v48 = Ref(v21)
    v47 = Call(Fun(526), EntityList { index: 61, unused: PhantomData })
    v49 = Deref(v47, false)
    v50 = Offset(v49)
    v51 = Lit(Uint(255, 8))
    v52 = Call(Fun(305), EntityList { index: 65, unused: PhantomData })
    v53 = Lit(Int(235, 0))
    v54 = Lit(Int(9, 0))
    v55 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 69, unused: PhantomData })
    Call(Fun(523), EntityList { index: 73, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v56 = Lit(String(Span { source: Source(0), hash: ID(7418309972045803131), start: 334, end: 339, line: 0, column: 0 }))
    Call(Fun(482), EntityList { index: 77, unused: PhantomData })
    Return(None)

function u0:0() fast {
    ss0 = explicit_slot 8
    ss1 = explicit_slot 24
    gv0 = symbol colocated u1:4
    gv1 = symbol colocated u1:10
    gv2 = symbol colocated u1:2
    gv3 = symbol colocated u1:8
    sig0 = (i64) fast
    sig1 = (i64) windows_fastcall
    sig2 = (i64, i64) fast
    sig3 = (i64, i64) -> i64 windows_fastcall
    sig4 = (i64, i64, i64) fast
    sig5 = (b1) fast
    sig6 = () fast
    fn0 = colocated u0:18 sig0
    fn1 = u0:1 sig1
    fn2 = colocated u0:29 sig2
    fn3 = u0:9 sig3
    fn4 = colocated u0:16 sig4
    fn5 = colocated u0:33 sig5
    fn6 = colocated u0:11 sig6

block0:
    v129 = iconst.i64 0
    v3 -> v129
    v128 = iconst.i64 0
    v1 -> v128
    v0 = iconst.i64 0
    v130 -> v0
    v131 -> v0
    v132 -> v0
    v47 -> v130
    v2 = iconst.i64 0
    v4 = iconst.i64 0xffff_ffff
    v5 = band v0, v4
    v6 = ushr_imm v5, 0
    v7 = ireduce.i32 v6
    stack_store v7, ss0
    v8 = iconst.i64 0xffff_ffff_0000
    v9 = band v0, v8
    v10 = ushr_imm v9, 16
    v11 = ireduce.i32 v10
    stack_store v11, ss0+2
    v12 = iconst.i64 1
    v13 = stack_addr.i64 ss0
    jump block1(v13, v12)

block1(v15: i64, v16: i64):
    v17 = iconst.i64 0
    v18 = icmp slt v16, v17
    v19 = iconst.i64 2
    v20 = icmp sge v16, v19
    v21 = bor v18, v20
    brnz v21, block3
    jump block4

block3:
    v22 = global_value.i64 gv0
    call fn0(v22)
    jump block4

block4:
    jump block5(v15, v16)

block5(v24: i64, v25: i64):
    v26 = iconst.i64 3
    v27 = imul v25, v26
    v28 = iadd v24, v27
    jump block6(v28)

block6(v23: i64):
    jump block2(v23)

block2(v14: i64):
    v29 = iconst.i8 255
    store v29, v14
    v30 = iconst.i64 0
    v31 = stack_addr.i64 ss0
    jump block7(v31, v30)

block7(v33: i64, v34: i64):
    v35 = iconst.i64 0
    v36 = icmp slt v34, v35
    v37 = iconst.i64 2
    v38 = icmp sge v34, v37
    v39 = bor v36, v38
    brnz v39, block9
    jump block10

block9:
    v40 = global_value.i64 gv0
    call fn0(v40)
    jump block10

block10:
    jump block11(v33, v34)

block11(v42: i64, v43: i64):
    v44 = iconst.i64 3
    v45 = imul v43, v44
    v46 = iadd v42, v45
    jump block12(v46)

block12(v41: i64):
    jump block8(v41)

block8(v32: i64):
    v48 = iconst.i64 0xffff
    v49 = band.i64 v47, v48
    v50 = ushr_imm v49, 0
    v51 = ireduce.i16 v50
    store v51, v32
    v52 = iconst.i64 0x00ff_ff00
    v53 = band.i64 v47, v52
    v54 = ushr_imm v53, 8
    v55 = ireduce.i16 v54
    store v55, v32+1
    v56 = global_value.i64 gv1
    call fn1(v56)
    v57 = iconst.i64 0
    stack_store v57, ss1
    stack_store v57, ss1+8
    stack_store v57, ss1+16
    v58 = iconst.i64 1
    v59 = stack_addr.i64 ss0
    jump block13(v59, v58)

block13(v61: i64, v62: i64):
    v63 = iconst.i64 0
    v64 = icmp slt v62, v63
    v65 = iconst.i64 2
    v66 = icmp sge v62, v65
    v67 = bor v64, v66
    brnz v67, block15
    jump block16

block15:
    v68 = global_value.i64 gv0
    call fn0(v68)
    jump block16

block16:
    jump block17(v61, v62)

block17(v70: i64, v71: i64):
    v72 = iconst.i64 3
    v73 = imul v71, v72
    v74 = iadd v70, v73
    jump block18(v74)

block18(v69: i64):
    jump block14(v69)

block14(v60: i64):
    v75 = load.i8 v60
    v76 = sextend.i64 v75
    v77 = stack_addr.i64 ss1
    call fn2(v77, v76)
    v78 = iconst.i8 0
    v79 = stack_addr.i64 ss1
    jump block19(v79, v78)

block19(v80: i64, v81: i8):
    v82 = iconst.i64 1
    v83 = load.i64 v80+8
    v84 = iadd v83, v82
    v85 = load.i64 v80+16
    v86 = icmp sgt v84, v85
    brnz v86, block21
    jump block22

block21:
    v87 = iconst.i64 2
    v88 = imul.i64 v84, v87
    store v88, v80+16
    v89 = iconst.i64 1
    v90 = load.i64 v80+16
    v91 = imul v90, v89
    v92 = load.i64 v80
    v93 = call fn3(v92, v91)
    store v93, v80
    jump block22

block22:
    v94 = load.i64 v80+8
    jump block23(v80, v94)

block23(v96: i64, v97: i64):
    v98 = iconst.i64 1
    v99 = imul v97, v98
    v100 = load.i64 v96
    v101 = iadd v100, v99
    jump block24(v101)

block24(v95: i64):
    store.i8 v81, v95
    store.i64 v84, v80+8
    jump block20

block20:
    v102 = stack_load.i64 ss1
    call fn1(v102)
    v103 = global_value.i64 gv2
    call fn1(v103)
    v104 = iconst.i64 1
    v105 = stack_addr.i64 ss0
    jump block25(v105, v104)

block25(v107: i64, v108: i64):
    v109 = iconst.i64 0
    v110 = icmp slt v108, v109
    v111 = iconst.i64 2
    v112 = icmp sge v108, v111
    v113 = bor v110, v112
    brnz v113, block27
    jump block28

block27:
    v114 = global_value.i64 gv0
    call fn0(v114)
    jump block28

block28:
    jump block29(v107, v108)

block29(v116: i64, v117: i64):
    v118 = iconst.i64 3
    v119 = imul v117, v118
    v120 = iadd v116, v119
    jump block30(v120)

block30(v115: i64):
    jump block26(v115)

block26(v106: i64):
    v121 = iconst.i8 255
    v122 = load.i8 v106
    v123 = icmp eq v122, v121
    v124 = iconst.i64 235
    v125 = iconst.i64 9
    v126 = global_value.i64 gv3
    call fn4(v124, v125, v126)
    call fn5(v123)
    call fn6()
    v127 = global_value.i64 gv1
    call fn1(v127)
    return
}

fun __index__(a: &Self, index: int) -> &T

  block49 [v312, v313]:
    v314 = Lit(Int(0, 0))
    v315 = Call(Fun(359), EntityList { index: 441, unused: PhantomData })
    v316 = Lit(Int(2, 0))
    v317 = Call(Fun(329), EntityList { index: 445, unused: PhantomData })
    v318 = Call(Fun(434), EntityList { index: 449, unused: PhantomData })
    JumpIfTrue(v318, block50, EntityList { index: 0, unused: PhantomData })
    Jump(block51, EntityList { index: 0, unused: PhantomData })
  block50 []:
    v319 = Lit(String(Span { source: Source(0), hash: ID(6484216913505728610), start: 88, end: 108, line: 0, column: 0 }))
    Call(Fun(470), EntityList { index: 453, unused: PhantomData })
    Jump(block51, EntityList { index: 0, unused: PhantomData })
  block51 []:
    v320 = Call(Fun(527), EntityList { index: 457, unused: PhantomData })
    Return(Some(v320))

function u0:0(i64, i64) -> i64 fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64) fast
    fn0 = colocated u0:18 sig0

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = icmp slt v1, v2
    v4 = iconst.i64 2
    v5 = icmp sge v1, v4
    v6 = bor v3, v5
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv0
    call fn0(v7)
    jump block2

block2:
    jump block3(v0, v1)

block3(v9: i64, v10: i64):
    v11 = iconst.i64 3
    v12 = imul v10, v11
    v13 = iadd v9, v12
    jump block4(v13)

block4(v8: i64):
    return v8
}

fun get_unchecked(a: &Self, index: int) -> &T

  block52 [v321, v322]:
    v323 = Cast(v321)
    v324 = Call(Fun(528), EntityList { index: 0, unused: PhantomData })
    v325 = Call(Fun(279), EntityList { index: 465, unused: PhantomData })
    v326 = Call(Fun(259), EntityList { index: 469, unused: PhantomData })
    v327 = Cast(v326)
    Return(Some(v327))

function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 3
    v3 = imul v1, v2
    v4 = iadd v0, v3
    return v4
}

fun pub sizeof[T] -> int


fun test_case_14

  block5 []:
    v57 = FunPointer(Fun(520))
    v58 = VarDecl(v57)
    v59 = Lit(Int(220, 0))
    v60 = Lit(Int(11, 0))
    v61 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 81, unused: PhantomData })
    v62 = FunPointerCall(v58, EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v63 = Lit(Int(1, 0))
    v64 = Call(Fun(309), EntityList { index: 85, unused: PhantomData })
    v65 = Lit(Int(220, 0))
    v66 = Lit(Int(9, 0))
    v67 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 89, unused: PhantomData })
    Call(Fun(523), EntityList { index: 93, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    gv0 = symbol colocated u1:8
    sig0 = () -> i64 fast
    sig1 = (i64, i64, i64) fast
    sig2 = () -> i64 fast
    sig3 = () fast
    sig4 = (b1) fast
    fn0 = colocated u0:39 sig0
    fn1 = colocated u0:16 sig1
    fn2 = colocated u0:11 sig3
    fn3 = colocated u0:33 sig4

block0:
    v0 = func_addr.i64 fn0
    v1 = iconst.i64 220
    v2 = iconst.i64 11
    v3 = global_value.i64 gv0
    call fn1(v1, v2, v3)
    v4 = call_indirect sig2, v0()
    call fn2()
    v5 = iconst.i64 1
    v6 = icmp eq v4, v5
    v7 = iconst.i64 220
    v8 = iconst.i64 9
    v9 = global_value.i64 gv0
    call fn1(v7, v8, v9)
    call fn3(v6)
    call fn2()
    return
}

fun test_fun -> int

  block6 []:
    v68 = Lit(Int(1, 0))
    Return(Some(v68))

function u0:0() -> i64 fast {
block0:
    v0 = iconst.i64 1
    return v0
}

fun test_case_13

  block7 []:
    v69 = Lit(Int(1, 0))
    v70 = Lit(Int(1, 0))
    v72 = Lit(Int(214, 0))
    v73 = Lit(Int(20, 0))
    v74 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 97, unused: PhantomData })
    v71 = Call(Fun(518), EntityList { index: 101, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v75 = Lit(Int(0, 0))
    v76 = Call(Fun(309), EntityList { index: 105, unused: PhantomData })
    v77 = Lit(Int(214, 0))
    v78 = Lit(Int(9, 0))
    v79 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 109, unused: PhantomData })
    Call(Fun(523), EntityList { index: 113, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = () fast
    sig2 = (b1) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:11 sig1
    fn2 = colocated u0:33 sig2

block0:
    v0 = iconst.i64 1
    v1 = iconst.i64 1
    v2 = iconst.i64 214
    v3 = iconst.i64 20
    v4 = global_value.i64 gv0
    call fn0(v2, v3, v4)
    jump block1(v0, v1)

block1(v6: i64, v7: i64):
    v8 = icmp sgt v6, v7
    brnz v8, block3
    jump block5

block3:
    v9 = iconst.i64 209
    v10 = iconst.i64 21
    v11 = global_value.i64 gv0
    call fn0(v9, v10, v11)
    jump block6(v6, v7)

block6(v13: i64, v14: i64):
    v15 = iadd v13, v14
    v16 = iconst.i64 2
    v17 = imul v16, v13
    v18 = isub v15, v17
    jump block7(v18)

block7(v12: i64):
    call fn1()
    jump block2(v12)

block4:
    v19 = iconst.i64 0
    jump block2(v19)

block5:
    v20 = iconst.i64 211
    v21 = iconst.i64 21
    v22 = global_value.i64 gv0
    call fn0(v20, v21, v22)
    jump block8(v7, v6)

block8(v24: i64, v25: i64):
    v26 = iadd v24, v25
    v27 = iconst.i64 2
    v28 = imul v27, v24
    v29 = isub v26, v28
    jump block9(v29)

block9(v23: i64):
    call fn1()
    jump block2(v23)

block2(v5: i64):
    call fn1()
    v30 = iconst.i64 0
    v31 = icmp eq v5, v30
    v32 = iconst.i64 214
    v33 = iconst.i64 9
    v34 = global_value.i64 gv0
    call fn0(v32, v33, v34)
    call fn2(v31)
    call fn1()
    return
}

fun even_worse(a, b: int) -> int

  block8 [v80, v81]:
    v82 = Call(Fun(349), EntityList { index: 121, unused: PhantomData })
    JumpIfTrue(v82, block9, EntityList { index: 0, unused: PhantomData })
    Jump(block11, EntityList { index: 0, unused: PhantomData })
  block9 []:
    v84 = Lit(Int(209, 0))
    v85 = Lit(Int(21, 0))
    v86 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 125, unused: PhantomData })
    v83 = Call(Fun(517), EntityList { index: 129, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(Some(v83))
  block10 []:
    v91 = Zeroed
    Return(Some(v91))
  block11 []:
    v88 = Lit(Int(211, 0))
    v89 = Lit(Int(21, 0))
    v90 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 133, unused: PhantomData })
    v87 = Call(Fun(517), EntityList { index: 137, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(Some(v87))

function u0:0(i64, i64) -> i64 fast {
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:11 sig1

block0(v0: i64, v1: i64):
    v2 = icmp sgt v0, v1
    brnz v2, block1
    jump block3

block1:
    v3 = iconst.i64 209
    v4 = iconst.i64 21
    v5 = global_value.i64 gv0
    call fn0(v3, v4, v5)
    jump block4(v0, v1)

block4(v7: i64, v8: i64):
    v9 = iadd v7, v8
    v10 = iconst.i64 2
    v11 = imul v10, v7
    v12 = isub v9, v11
    jump block5(v12)

block5(v6: i64):
    call fn1()
    return v6

block2:
    v13 = iconst.i64 0
    return v13

block3:
    v14 = iconst.i64 211
    v15 = iconst.i64 21
    v16 = global_value.i64 gv0
    call fn0(v14, v15, v16)
    jump block6(v1, v0)

block6(v18: i64, v19: i64):
    v20 = iadd v18, v19
    v21 = iconst.i64 2
    v22 = imul v21, v18
    v23 = isub v20, v22
    jump block7(v23)

block7(v17: i64):
    call fn1()
    return v17
}

fun something(a, b: int) -> int

  block12 [v92, v93]:
    v94 = Call(Fun(259), EntityList { index: 145, unused: PhantomData })
    v95 = Lit(Int(2, 0))
    v96 = Call(Fun(279), EntityList { index: 149, unused: PhantomData })
    v97 = Call(Fun(269), EntityList { index: 153, unused: PhantomData })
    Return(Some(v97))

function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iadd v0, v1
    v3 = iconst.i64 2
    v4 = imul v3, v0
    v5 = isub v2, v4
    return v5
}

fun test_case_12

  block13 []:
    v98 = GlobalLoad(gv2)
    v99 = Lit(Int(1, 0))
    v100 = Call(Fun(309), EntityList { index: 157, unused: PhantomData })
    v101 = Lit(Int(199, 0))
    v102 = Lit(Int(9, 0))
    v103 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 161, unused: PhantomData })
    Call(Fun(523), EntityList { index: 165, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    gv0 = symbol colocated u1:7
    gv1 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2

block0:
    v0 = global_value.i64 gv0
    v1 = iconst.i64 1
    v2 = load.i64 v0
    v3 = icmp eq v2, v1
    v4 = iconst.i64 199
    v5 = iconst.i64 9
    v6 = global_value.i64 gv1
    call fn0(v4, v5, v6)
    call fn1(v3)
    call fn2()
    return
}

fun test_case_11

  block14 []:
    v104 = Lit(Int(1, 0))
    v105 = VarDecl(v104)
    v106 = Ref(v105)
    v107 = VarDecl(v106)
    v108 = Deref(v107, true)
    v109 = Lit(Int(0, 0))
    v109 = Assign(v108)
    v110 = Lit(Int(0, 0))
    v111 = Call(Fun(309), EntityList { index: 169, unused: PhantomData })
    v112 = Lit(Int(194, 0))
    v113 = Lit(Int(9, 0))
    v114 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 173, unused: PhantomData })
    Call(Fun(523), EntityList { index: 177, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    ss0 = explicit_slot 8
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2

block0:
    v10 = iconst.i64 0
    v2 -> v10
    v0 = iconst.i64 1
    stack_store v0, ss0
    v1 = stack_addr.i64 ss0
    v3 = iconst.i64 0
    store v3, v1
    v4 = iconst.i64 0
    v5 = stack_load.i64 ss0
    v6 = icmp eq v5, v4
    v7 = iconst.i64 194
    v8 = iconst.i64 9
    v9 = global_value.i64 gv0
    call fn0(v7, v8, v9)
    call fn1(v6)
    call fn2()
    return
}

fun test_case_10

  block15 []:
    v115 = Lit(Int(1, 0))
    v116 = Lit(Int(2, 0))
    v117 = Lit(Int(3, 0))
    v118 = Lit(Int(4, 0))
    v119 = Lit(Int(5, 0))
    v120 = Lit(Int(6, 0))
    v121 = Lit(Int(7, 0))
    v122 = Lit(Int(8, 0))
    v123 = Lit(Int(9, 0))
    v124 = Lit(Int(10, 0))
    v125 = Uninitialized
    v126 = VarDecl(v125)
    v127 = Offset(v126)
    v115 = Assign(v127)
    v128 = Offset(v126)
    v116 = Assign(v128)
    v129 = Offset(v126)
    v117 = Assign(v129)
    v130 = Offset(v126)
    v118 = Assign(v130)
    v131 = Offset(v126)
    v119 = Assign(v131)
    v132 = Offset(v126)
    v120 = Assign(v132)
    v133 = Offset(v126)
    v121 = Assign(v133)
    v134 = Offset(v126)
    v122 = Assign(v134)
    v135 = Offset(v126)
    v123 = Assign(v135)
    v136 = Offset(v126)
    v124 = Assign(v136)
    v137 = VarDecl(v126)
    v138 = Lit(Int(0, 0))
    v139 = VarDecl(v138)
    v140 = Lit(Int(0, 0))
    v141 = VarDecl(v140)
    Jump(block16, EntityList { index: 0, unused: PhantomData })
  block16 []:
    v143 = Ref(v137)
    v142 = Call(Fun(529), EntityList { index: 181, unused: PhantomData })
    v144 = Call(Fun(329), EntityList { index: 185, unused: PhantomData })
    JumpIfTrue(v144, block18, EntityList { index: 0, unused: PhantomData })
    Jump(block19, EntityList { index: 0, unused: PhantomData })
  block17 []:
    v158 = Lit(Int(11, 0))
    v159 = Lit(Int(5, 0))
    v160 = Call(Fun(279), EntityList { index: 209, unused: PhantomData })
    v161 = Call(Fun(309), EntityList { index: 213, unused: PhantomData })
    v162 = Lit(Int(188, 0))
    v163 = Lit(Int(9, 0))
    v164 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 217, unused: PhantomData })
    Call(Fun(523), EntityList { index: 221, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)
  block18 []:
    Jump(block17, EntityList { index: 0, unused: PhantomData })
  block19 []:
    v146 = Ref(v137)
    v145 = Call(Fun(530), EntityList { index: 189, unused: PhantomData })
    v147 = Deref(v145, false)
    v148 = Call(Fun(259), EntityList { index: 193, unused: PhantomData })
    v148 = Assign(v141)
    v149 = GlobalLoad(gv1)
    v151 = Ref(v149)
    v150 = Call(Fun(530), EntityList { index: 197, unused: PhantomData })
    v152 = Deref(v150, true)
    v154 = Ref(v137)
    v153 = Call(Fun(530), EntityList { index: 201, unused: PhantomData })
    v155 = Deref(v153, false)
    v155 = Assign(v152)
    v156 = Lit(Int(1, 0))
    v157 = Call(Fun(259), EntityList { index: 205, unused: PhantomData })
    v157 = Assign(v139)
    Jump(block16, EntityList { index: 0, unused: PhantomData })

function u0:0() fast {
    ss0 = explicit_slot 80
    ss1 = explicit_slot 80
    ss2 = explicit_slot 80
    gv0 = symbol colocated u1:8
    gv1 = symbol colocated u1:4
    gv2 = symbol colocated u1:6
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    sig3 = (i64) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2
    fn3 = colocated u0:18 sig3

block0:
    v107 = iconst.i64 0
    v33 -> v107
    v106 = iconst.i64 0
    v31 -> v106
    v0 = iconst.i64 1
    v1 = iconst.i64 2
    v2 = iconst.i64 3
    v3 = iconst.i64 4
    v4 = iconst.i64 5
    v5 = iconst.i64 6
    v6 = iconst.i64 7
    v7 = iconst.i64 8
    v8 = iconst.i64 9
    v9 = iconst.i64 10
    v10 = stack_load.i64 ss0
    stack_store v10, ss1
    v11 = stack_load.i64 ss0+8
    stack_store v11, ss1+8
    v12 = stack_load.i64 ss0+16
    stack_store v12, ss1+16
    v13 = stack_load.i64 ss0+24
    stack_store v13, ss1+24
    v14 = stack_load.i64 ss0+32
    stack_store v14, ss1+32
    v15 = stack_load.i64 ss0+40
    stack_store v15, ss1+40
    v16 = stack_load.i64 ss0+48
    stack_store v16, ss1+48
    v17 = stack_load.i64 ss0+56
    stack_store v17, ss1+56
    v18 = stack_load.i64 ss0+64
    stack_store v18, ss1+64
    v19 = stack_load.i64 ss0+72
    stack_store v19, ss1+72
    stack_store v0, ss1
    stack_store v1, ss1+8
    stack_store v2, ss1+16
    stack_store v3, ss1+24
    stack_store v4, ss1+32
    stack_store v5, ss1+40
    stack_store v6, ss1+48
    stack_store v7, ss1+56
    stack_store v8, ss1+64
    stack_store v9, ss1+72
    v20 = stack_load.i64 ss1
    stack_store v20, ss2
    v21 = stack_load.i64 ss1+8
    stack_store v21, ss2+8
    v22 = stack_load.i64 ss1+16
    stack_store v22, ss2+16
    v23 = stack_load.i64 ss1+24
    stack_store v23, ss2+24
    v24 = stack_load.i64 ss1+32
    stack_store v24, ss2+32
    v25 = stack_load.i64 ss1+40
    stack_store v25, ss2+40
    v26 = stack_load.i64 ss1+48
    stack_store v26, ss2+48
    v27 = stack_load.i64 ss1+56
    stack_store v27, ss2+56
    v28 = stack_load.i64 ss1+64
    stack_store v28, ss2+64
    v29 = stack_load.i64 ss1+72
    stack_store v29, ss2+72
    v30 = iconst.i64 0
    v32 = iconst.i64 0
    jump block1(v30, v32)

block1(v110: i64, v111: i64):
    v38 -> v110
    v114 -> v110
    v116 -> v110
    v117 -> v110
    v118 -> v110
    v119 -> v110
    v121 -> v110
    v104 -> v119
    v86 -> v117
    v69 -> v114
    v49 -> v38
    v109 -> v111
    v113 -> v111
    v115 -> v111
    v65 -> v113
    v108 -> v109
    v43 -> v108
    v34 = stack_addr.i64 ss2
    jump block5(v34)

block5(v36: i64):
    v37 = iconst.i64 10
    jump block6(v37)

block6(v35: i64):
    v39 = icmp.i64 sge v38, v35
    brnz v39, block3
    jump block4

block2:
    v40 = iconst.i64 11
    v41 = iconst.i64 5
    v42 = imul v40, v41
    v44 = icmp.i64 eq v43, v42
    v45 = iconst.i64 188
    v46 = iconst.i64 9
    v47 = global_value.i64 gv0
    call fn0(v45, v46, v47)
    call fn1(v44)
    call fn2()
    return

block3:
    jump block2

block4:
    v48 = stack_addr.i64 ss2
    jump block7(v48, v49)

block7(v51: i64, v52: i64):
    v53 = iconst.i64 0
    v54 = icmp slt v52, v53
    v55 = iconst.i64 10
    v56 = icmp sge v52, v55
    v57 = bor v54, v56
    brnz v57, block9
    jump block10

block9:
    v58 = global_value.i64 gv1
    call fn3(v58)
    jump block10

block10:
    jump block11(v51, v52)

block11(v60: i64, v61: i64):
    v62 = iconst.i64 8
    v63 = imul v61, v62
    v64 = iadd v60, v63
    jump block12(v64)

block12(v59: i64):
    jump block8(v59)

block8(v50: i64):
    v66 = load.i64 v50
    v67 = iadd.i64 v65, v66
    v120 -> v67
    v122 -> v67
    v123 -> v67
    v112 -> v120
    v68 = global_value.i64 gv2
    jump block13(v68, v69)

block13(v71: i64, v72: i64):
    v73 = iconst.i64 0
    v74 = icmp slt v72, v73
    v75 = iconst.i64 10
    v76 = icmp sge v72, v75
    v77 = bor v74, v76
    brnz v77, block15
    jump block16

block15:
    v78 = global_value.i64 gv1
    call fn3(v78)
    jump block16

block16:
    jump block17(v71, v72)

block17(v80: i64, v81: i64):
    v82 = iconst.i64 8
    v83 = imul v81, v82
    v84 = iadd v80, v83
    jump block18(v84)

block18(v79: i64):
    jump block14(v79)

block14(v70: i64):
    v85 = stack_addr.i64 ss2
    jump block19(v85, v86)

block19(v88: i64, v89: i64):
    v90 = iconst.i64 0
    v91 = icmp slt v89, v90
    v92 = iconst.i64 10
    v93 = icmp sge v89, v92
    v94 = bor v91, v93
    brnz v94, block21
    jump block22

block21:
    v95 = global_value.i64 gv1
    call fn3(v95)
    jump block22

block22:
    jump block23(v88, v89)

block23(v97: i64, v98: i64):
    v99 = iconst.i64 8
    v100 = imul v98, v99
    v101 = iadd v97, v100
    jump block24(v101)

block24(v96: i64):
    jump block20(v96)

block20(v87: i64):
    v102 = load.i64 v87
    store v102, v70
    v103 = iconst.i64 1
    v105 = iadd.i64 v104, v103
    jump block1(v105, v112)
}

fun __index__(a: &Self, index: int) -> &T

  block53 [v328, v329]:
    v330 = Lit(Int(0, 0))
    v331 = Call(Fun(359), EntityList { index: 477, unused: PhantomData })
    v332 = Lit(Int(10, 0))
    v333 = Call(Fun(329), EntityList { index: 481, unused: PhantomData })
    v334 = Call(Fun(434), EntityList { index: 485, unused: PhantomData })
    JumpIfTrue(v334, block54, EntityList { index: 0, unused: PhantomData })
    Jump(block55, EntityList { index: 0, unused: PhantomData })
  block54 []:
    v335 = Lit(String(Span { source: Source(0), hash: ID(6484216913505728610), start: 88, end: 108, line: 0, column: 0 }))
    Call(Fun(470), EntityList { index: 489, unused: PhantomData })
    Jump(block55, EntityList { index: 0, unused: PhantomData })
  block55 []:
    v336 = Call(Fun(531), EntityList { index: 493, unused: PhantomData })
    Return(Some(v336))

function u0:0(i64, i64) -> i64 fast {
    gv0 = symbol colocated u1:4
    sig0 = (i64) fast
    fn0 = colocated u0:18 sig0

block0(v0: i64, v1: i64):
    v2 = iconst.i64 0
    v3 = icmp slt v1, v2
    v4 = iconst.i64 10
    v5 = icmp sge v1, v4
    v6 = bor v3, v5
    brnz v6, block1
    jump block2

block1:
    v7 = global_value.i64 gv0
    call fn0(v7)
    jump block2

block2:
    jump block3(v0, v1)

block3(v9: i64, v10: i64):
    v11 = iconst.i64 8
    v12 = imul v10, v11
    v13 = iadd v9, v12
    jump block4(v13)

block4(v8: i64):
    return v8
}

fun get_unchecked(a: &Self, index: int) -> &T

  block56 [v337, v338]:
    v339 = Cast(v337)
    v340 = Call(Fun(532), EntityList { index: 0, unused: PhantomData })
    v341 = Call(Fun(279), EntityList { index: 501, unused: PhantomData })
    v342 = Call(Fun(259), EntityList { index: 505, unused: PhantomData })
    v343 = Cast(v342)
    Return(Some(v343))

function u0:0(i64, i64) -> i64 fast {
block0(v0: i64, v1: i64):
    v2 = iconst.i64 8
    v3 = imul v1, v2
    v4 = iadd v0, v3
    return v4
}

fun pub sizeof[T] -> int


fun len(array: &Self) -> int

  block57 [v344]:
    v345 = Lit(Int(10, 0))
    Return(Some(v345))

function u0:0(i64) -> i64 fast {
block0(v0: i64):
    v1 = iconst.i64 10
    return v1
}

fun test_case_9

  block20 []:
    v165 = Lit(Int(1, 0))
    v166 = Lit(Int(2, 0))
    v167 = Lit(Int(3, 0))
    v168 = Lit(Int(4, 0))
    v169 = Lit(Int(5, 0))
    v170 = Lit(Int(6, 0))
    v171 = Lit(Int(7, 0))
    v172 = Lit(Int(8, 0))
    v173 = Lit(Int(9, 0))
    v174 = Lit(Int(10, 0))
    v175 = Uninitialized
    v176 = VarDecl(v175)
    v177 = Offset(v176)
    v165 = Assign(v177)
    v178 = Offset(v176)
    v166 = Assign(v178)
    v179 = Offset(v176)
    v167 = Assign(v179)
    v180 = Offset(v176)
    v168 = Assign(v180)
    v181 = Offset(v176)
    v169 = Assign(v181)
    v182 = Offset(v176)
    v170 = Assign(v182)
    v183 = Offset(v176)
    v171 = Assign(v183)
    v184 = Offset(v176)
    v172 = Assign(v184)
    v185 = Offset(v176)
    v173 = Assign(v185)
    v186 = Offset(v176)
    v174 = Assign(v186)
    v187 = VarDecl(v176)
    v188 = Lit(Int(0, 0))
    v189 = VarDecl(v188)
    v190 = Lit(Int(0, 0))
    v191 = VarDecl(v190)
    Jump(block21, EntityList { index: 0, unused: PhantomData })
  block21 []:
    v193 = Ref(v187)
    v192 = Call(Fun(529), EntityList { index: 225, unused: PhantomData })
    v194 = Call(Fun(329), EntityList { index: 229, unused: PhantomData })
    JumpIfTrue(v194, block23, EntityList { index: 0, unused: PhantomData })
    Jump(block24, EntityList { index: 0, unused: PhantomData })
  block22 []:
    v201 = Lit(Int(11, 0))
    v202 = Lit(Int(5, 0))
    v203 = Call(Fun(279), EntityList { index: 245, unused: PhantomData })
    v204 = Call(Fun(309), EntityList { index: 249, unused: PhantomData })
    v205 = Lit(Int(171, 0))
    v206 = Lit(Int(9, 0))
    v207 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 253, unused: PhantomData })
    Call(Fun(523), EntityList { index: 257, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)
  block23 []:
    Jump(block22, EntityList { index: 0, unused: PhantomData })
  block24 []:
    v196 = Ref(v187)
    v195 = Call(Fun(530), EntityList { index: 233, unused: PhantomData })
    v197 = Deref(v195, false)
    v198 = Call(Fun(259), EntityList { index: 237, unused: PhantomData })
    v198 = Assign(v191)
    v199 = Lit(Int(1, 0))
    v200 = Call(Fun(259), EntityList { index: 241, unused: PhantomData })
    v200 = Assign(v189)
    Jump(block21, EntityList { index: 0, unused: PhantomData })

function u0:0() fast {
    ss0 = explicit_slot 80
    ss1 = explicit_slot 80
    ss2 = explicit_slot 80
    gv0 = symbol colocated u1:8
    gv1 = symbol colocated u1:4
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    sig3 = (i64) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2
    fn3 = colocated u0:18 sig3

block0:
    v72 = iconst.i64 0
    v33 -> v72
    v71 = iconst.i64 0
    v31 -> v71
    v0 = iconst.i64 1
    v1 = iconst.i64 2
    v2 = iconst.i64 3
    v3 = iconst.i64 4
    v4 = iconst.i64 5
    v5 = iconst.i64 6
    v6 = iconst.i64 7
    v7 = iconst.i64 8
    v8 = iconst.i64 9
    v9 = iconst.i64 10
    v10 = stack_load.i64 ss0
    stack_store v10, ss1
    v11 = stack_load.i64 ss0+8
    stack_store v11, ss1+8
    v12 = stack_load.i64 ss0+16
    stack_store v12, ss1+16
    v13 = stack_load.i64 ss0+24
    stack_store v13, ss1+24
    v14 = stack_load.i64 ss0+32
    stack_store v14, ss1+32
    v15 = stack_load.i64 ss0+40
    stack_store v15, ss1+40
    v16 = stack_load.i64 ss0+48
    stack_store v16, ss1+48
    v17 = stack_load.i64 ss0+56
    stack_store v17, ss1+56
    v18 = stack_load.i64 ss0+64
    stack_store v18, ss1+64
    v19 = stack_load.i64 ss0+72
    stack_store v19, ss1+72
    stack_store v0, ss1
    stack_store v1, ss1+8
    stack_store v2, ss1+16
    stack_store v3, ss1+24
    stack_store v4, ss1+32
    stack_store v5, ss1+40
    stack_store v6, ss1+48
    stack_store v7, ss1+56
    stack_store v8, ss1+64
    stack_store v9, ss1+72
    v20 = stack_load.i64 ss1
    stack_store v20, ss2
    v21 = stack_load.i64 ss1+8
    stack_store v21, ss2+8
    v22 = stack_load.i64 ss1+16
    stack_store v22, ss2+16
    v23 = stack_load.i64 ss1+24
    stack_store v23, ss2+24
    v24 = stack_load.i64 ss1+32
    stack_store v24, ss2+32
    v25 = stack_load.i64 ss1+40
    stack_store v25, ss2+40
    v26 = stack_load.i64 ss1+48
    stack_store v26, ss2+48
    v27 = stack_load.i64 ss1+56
    stack_store v27, ss2+56
    v28 = stack_load.i64 ss1+64
    stack_store v28, ss2+64
    v29 = stack_load.i64 ss1+72
    stack_store v29, ss2+72
    v30 = iconst.i64 0
    v32 = iconst.i64 0
    jump block1(v30, v32)

block1(v75: i64, v76: i64):
    v38 -> v75
    v78 -> v75
    v80 -> v75
    v69 -> v78
    v49 -> v38
    v74 -> v76
    v77 -> v76
    v79 -> v76
    v65 -> v77
    v73 -> v74
    v43 -> v73
    v34 = stack_addr.i64 ss2
    jump block5(v34)

block5(v36: i64):
    v37 = iconst.i64 10
    jump block6(v37)

block6(v35: i64):
    v39 = icmp.i64 sge v38, v35
    brnz v39, block3
    jump block4

block2:
    v40 = iconst.i64 11
    v41 = iconst.i64 5
    v42 = imul v40, v41
    v44 = icmp.i64 eq v43, v42
    v45 = iconst.i64 171
    v46 = iconst.i64 9
    v47 = global_value.i64 gv0
    call fn0(v45, v46, v47)
    call fn1(v44)
    call fn2()
    return

block3:
    jump block2

block4:
    v48 = stack_addr.i64 ss2
    jump block7(v48, v49)

block7(v51: i64, v52: i64):
    v53 = iconst.i64 0
    v54 = icmp slt v52, v53
    v55 = iconst.i64 10
    v56 = icmp sge v52, v55
    v57 = bor v54, v56
    brnz v57, block9
    jump block10

block9:
    v58 = global_value.i64 gv1
    call fn3(v58)
    jump block10

block10:
    jump block11(v51, v52)

block11(v60: i64, v61: i64):
    v62 = iconst.i64 8
    v63 = imul v61, v62
    v64 = iadd v60, v63
    jump block12(v64)

block12(v59: i64):
    jump block8(v59)

block8(v50: i64):
    v66 = load.i64 v50
    v67 = iadd.i64 v65, v66
    v68 = iconst.i64 1
    v70 = iadd.i64 v69, v68
    jump block1(v70, v67)
}

fun test_case_8

  block25 []:
    v208 = Zeroed
    v209 = VarDecl(v208)
    v210 = Offset(v209)
    v211 = Lit(Int(1, 8))
    v211 = Assign(v210)
    v212 = Offset(v209)
    v213 = Lit(Int(2, 8))
    v213 = Assign(v212)
    v214 = Offset(v209)
    v215 = Lit(Int(3, 8))
    v215 = Assign(v214)
    v216 = Offset(v209)
    v217 = Lit(Int(4, 8))
    v217 = Assign(v216)
    v218 = Offset(v209)
    v219 = Lit(Int(5, 8))
    v219 = Assign(v218)
    v220 = Offset(v209)
    v221 = Lit(Int(6, 8))
    v221 = Assign(v220)
    v222 = Offset(v209)
    v223 = Lit(Int(7, 8))
    v223 = Assign(v222)
    v224 = Offset(v209)
    v225 = Lit(Int(8, 8))
    v225 = Assign(v224)
    v226 = Offset(v209)
    v227 = Offset(v209)
    v228 = Call(Fun(251), EntityList { index: 261, unused: PhantomData })
    v229 = Offset(v209)
    v230 = Call(Fun(251), EntityList { index: 265, unused: PhantomData })
    v231 = Offset(v209)
    v232 = Call(Fun(251), EntityList { index: 269, unused: PhantomData })
    v233 = Offset(v209)
    v234 = Call(Fun(251), EntityList { index: 273, unused: PhantomData })
    v235 = Offset(v209)
    v236 = Call(Fun(251), EntityList { index: 277, unused: PhantomData })
    v237 = Offset(v209)
    v238 = Call(Fun(251), EntityList { index: 281, unused: PhantomData })
    v239 = Offset(v209)
    v240 = Call(Fun(251), EntityList { index: 285, unused: PhantomData })
    v241 = Lit(Int(4, 8))
    v242 = Lit(Int(9, 8))
    v243 = Call(Fun(271), EntityList { index: 289, unused: PhantomData })
    v244 = Call(Fun(301), EntityList { index: 293, unused: PhantomData })
    v245 = Lit(Int(156, 0))
    v246 = Lit(Int(9, 0))
    v247 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 297, unused: PhantomData })
    Call(Fun(523), EntityList { index: 301, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2

block0:
    v80 = iconst.i64 0
    v1 -> v80
    v0 = iconst.i64 0
    v2 = iconst.i8 1
    v3 = iconst.i64 -256
    v4 = band v0, v3
    v5 = uextend.i64 v2
    v6 = ishl_imm v5, 0
    v7 = bor v4, v6
    v8 = iconst.i8 2
    v9 = iconst.i64 0xffff_ffff_ffff_00ff
    v10 = band v7, v9
    v11 = uextend.i64 v8
    v12 = ishl_imm v11, 8
    v13 = bor v10, v12
    v14 = iconst.i8 3
    v15 = iconst.i64 0xffff_ffff_ff00_ffff
    v16 = band v13, v15
    v17 = uextend.i64 v14
    v18 = ishl_imm v17, 16
    v19 = bor v16, v18
    v20 = iconst.i8 4
    v21 = iconst.i64 0xffff_ffff_00ff_ffff
    v22 = band v19, v21
    v23 = uextend.i64 v20
    v24 = ishl_imm v23, 24
    v25 = bor v22, v24
    v26 = iconst.i8 5
    v27 = iconst.i64 0xffff_ff00_ffff_ffff
    v28 = band v25, v27
    v29 = uextend.i64 v26
    v30 = ishl_imm v29, 32
    v31 = bor v28, v30
    v32 = iconst.i8 6
    v33 = iconst.i64 0xffff_00ff_ffff_ffff
    v34 = band v31, v33
    v35 = uextend.i64 v32
    v36 = ishl_imm v35, 40
    v37 = bor v34, v36
    v38 = iconst.i8 7
    v39 = iconst.i64 0xff00_ffff_ffff_ffff
    v40 = band v37, v39
    v41 = uextend.i64 v38
    v42 = ishl_imm v41, 48
    v43 = bor v40, v42
    v44 = iconst.i8 8
    v45 = iconst.i64 0x00ff_ffff_ffff_ffff
    v46 = band v43, v45
    v47 = uextend.i64 v44
    v48 = ishl_imm v47, 56
    v49 = bor v46, v48
    v50 = ushr_imm v49, 0
    v51 = ireduce.i8 v50
    v52 = ushr_imm v49, 56
    v53 = ireduce.i8 v52
    v54 = iadd v51, v53
    v55 = ushr_imm v49, 48
    v56 = ireduce.i8 v55
    v57 = iadd v54, v56
    v58 = ushr_imm v49, 40
    v59 = ireduce.i8 v58
    v60 = iadd v57, v59
    v61 = ushr_imm v49, 32
    v62 = ireduce.i8 v61
    v63 = iadd v60, v62
    v64 = ushr_imm v49, 24
    v65 = ireduce.i8 v64
    v66 = iadd v63, v65
    v67 = ushr_imm v49, 16
    v68 = ireduce.i8 v67
    v69 = iadd v66, v68
    v70 = ushr_imm v49, 8
    v71 = ireduce.i8 v70
    v72 = iadd v69, v71
    v73 = iconst.i8 4
    v74 = iconst.i8 9
    v75 = imul v73, v74
    v76 = icmp eq v72, v75
    v77 = iconst.i64 156
    v78 = iconst.i64 9
    v79 = global_value.i64 gv0
    call fn0(v77, v78, v79)
    call fn1(v76)
    call fn2()
    return
}

fun test_case_7

  block26 []:
    v248 = Zeroed
    v249 = VarDecl(v248)
    v250 = Zeroed
    v251 = VarDecl(v250)
    v252 = Offset(v251)
    v253 = Ref(v249)
    v253 = Assign(v252)
    v254 = Offset(v251)
    v255 = Deref(v254, true)
    v256 = Offset(v255)
    v257 = Lit(Int(1, 0))
    v257 = Assign(v256)
    v258 = Offset(v251)
    v259 = Deref(v258, true)
    v260 = Offset(v259)
    v261 = Lit(Int(2, 0))
    v261 = Assign(v260)
    v262 = Offset(v251)
    v263 = Deref(v262, false)
    v264 = Offset(v263)
    v265 = Offset(v251)
    v266 = Deref(v265, false)
    v267 = Offset(v266)
    v268 = Call(Fun(259), EntityList { index: 305, unused: PhantomData })
    v269 = Lit(Int(3, 0))
    v270 = Call(Fun(309), EntityList { index: 309, unused: PhantomData })
    v271 = Lit(Int(140, 0))
    v272 = Lit(Int(9, 0))
    v273 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 313, unused: PhantomData })
    Call(Fun(523), EntityList { index: 317, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    ss0 = explicit_slot 16
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2

block0:
    v14 = iconst.i64 0
    v2 -> v14
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 0
    v3 = stack_addr.i64 ss0
    v4 = iconst.i64 1
    store v4, v3
    v5 = iconst.i64 2
    store v5, v3+8
    v6 = load.i64 v3
    v7 = load.i64 v3+8
    v8 = iadd v6, v7
    v9 = iconst.i64 3
    v10 = icmp eq v8, v9
    v11 = iconst.i64 140
    v12 = iconst.i64 9
    v13 = global_value.i64 gv0
    call fn0(v11, v12, v13)
    call fn1(v10)
    call fn2()
    return
}

fun test_case_6

  block27 []:
    v274 = Zeroed
    v275 = VarDecl(v274)
    v276 = Lit(Int(2, 0))
    v277 = Lit(Int(2, 0))
    v279 = Ref(v275)
    v280 = Lit(Int(124, 0))
    v281 = Lit(Int(4, 0))
    v282 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 321, unused: PhantomData })
    v278 = Call(Fun(509), EntityList { index: 325, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v283 = Offset(v275)
    v284 = Offset(v275)
    v285 = Call(Fun(259), EntityList { index: 333, unused: PhantomData })
    v286 = Lit(Int(4, 0))
    v287 = Call(Fun(309), EntityList { index: 337, unused: PhantomData })
    v288 = Lit(Int(125, 0))
    v289 = Lit(Int(9, 0))
    v290 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 341, unused: PhantomData })
    Call(Fun(523), EntityList { index: 345, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 16
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (i64, i64, i64, i64 sret) -> i64 sret fast
    sig2 = () fast
    sig3 = (b1) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:54 sig1
    fn2 = colocated u0:11 sig2
    fn3 = colocated u0:33 sig3

block0:
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 2
    v2 = iconst.i64 2
    v3 = stack_addr.i64 ss0
    v4 = iconst.i64 124
    v5 = iconst.i64 4
    v6 = global_value.i64 gv0
    call fn0(v4, v5, v6)
    v7 = stack_addr.i64 ss1
    v8 = call fn1(v3, v1, v2, v7)
    call fn2()
    v9 = stack_load.i64 ss0
    v10 = stack_load.i64 ss0+8
    v11 = iadd v9, v10
    v12 = iconst.i64 4
    v13 = icmp eq v11, v12
    v14 = iconst.i64 125
    v15 = iconst.i64 9
    v16 = global_value.i64 gv0
    call fn0(v14, v15, v16)
    call fn3(v13)
    call fn2()
    return
}

fun init(v: &Point, x: int, y: int) -> Point

  block28 [v291, v292, v293, v294]:
    v295 = Deref(v291, true)
    v296 = Offset(v295)
    v292 = Assign(v296)
    v297 = Deref(v291, true)
    v298 = Offset(v297)
    v293 = Assign(v298)
    v299 = Zeroed
    v300 = Deref(v294, false)
    v299 = Assign(v300)
    Return(Some(v294))

function u0:0(i64, i64, i64, i64 sret) -> i64 sret fast {
block0(v0: i64, v1: i64, v2: i64, v3: i64):
    store v1, v0
    store v2, v0+8
    v4 = iconst.i64 0
    store v4, v3
    store v4, v3+8
    return v3
}

fun test_case_5

  block29 []:
    v301 = Lit(String(Span { source: Source(0), hash: ID(14798484927345966379), start: 320, end: 334, line: 0, column: 0 }))
    v302 = VarDecl(v301)
    v303 = Cast(v302)
    v304 = VarDecl(v303)
    Jump(block30, EntityList { index: 0, unused: PhantomData })
  block30 []:
    v305 = Cast(v304)
    v306 = Deref(v305, false)
    v307 = VarDecl(v306)
    v308 = Lit(Uint(0, 8))
    v309 = Call(Fun(305), EntityList { index: 349, unused: PhantomData })
    JumpIfTrue(v309, block32, EntityList { index: 0, unused: PhantomData })
    Jump(block33, EntityList { index: 0, unused: PhantomData })
  block31 []:
    Return(None)
  block32 []:
    Jump(block31, EntityList { index: 0, unused: PhantomData })
  block33 []:
    v310 = Call(Fun(32), EntityList { index: 361, unused: PhantomData })
    v311 = Lit(Int(113, 0))
    v312 = Lit(Int(12, 0))
    v313 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 365, unused: PhantomData })
    Call(Fun(507), EntityList { index: 369, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v314 = Lit(Int(1, 0))
    v315 = Cast(v314)
    v316 = Call(Fun(260), EntityList { index: 373, unused: PhantomData })
    v316 = Assign(v304)
    Jump(block30, EntityList { index: 0, unused: PhantomData })

function u0:0() fast {
    gv0 = symbol colocated u1:11
    gv1 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (i32) windows_fastcall
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = u0:7 sig1
    fn2 = colocated u0:11 sig2

block0:
    v15 = iconst.i64 0
    v2 -> v15
    v14 = iconst.i64 0
    v1 -> v14
    v0 = global_value.i64 gv0
    jump block1(v0)

block1(v3: i64):
    v12 -> v3
    v4 = load.i8 v3
    v5 = iconst.i8 0
    v6 = icmp eq v4, v5
    brnz v6, block3
    jump block4

block2:
    return

block3:
    jump block2

block4:
    v7 = sextend.i32 v4
    v8 = iconst.i64 113
    v9 = iconst.i64 12
    v10 = global_value.i64 gv1
    call fn0(v8, v9, v10)
    call fn1(v7)
    call fn2()
    v11 = iconst.i64 1
    v13 = iadd.i64 v12, v11
    jump block1(v13)
}

fun putchar(c: i32)


fun test_case_4

  block34 []:
    v317 = Lit(Float(1.0, 64))
    v318 = VarDecl(v317)
    Jump(block35, EntityList { index: 0, unused: PhantomData })
  block35 []:
    v319 = Lit(Float(1.0, 64))
    v320 = Call(Fun(412), EntityList { index: 377, unused: PhantomData })
    v320 = Assign(v318)
    v321 = Lit(Float(100.0, 64))
    v322 = Call(Fun(428), EntityList { index: 381, unused: PhantomData })
    JumpIfTrue(v322, block37, EntityList { index: 0, unused: PhantomData })
    Jump(block38, EntityList { index: 0, unused: PhantomData })
  block36 []:
    v323 = Call(Fun(163), EntityList { index: 385, unused: PhantomData })
    v324 = Lit(Int(101, 0))
    v325 = Call(Fun(309), EntityList { index: 389, unused: PhantomData })
    v326 = Lit(Int(99, 0))
    v327 = Lit(Int(9, 0))
    v328 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 393, unused: PhantomData })
    Call(Fun(523), EntityList { index: 397, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)
  block37 []:
    Jump(block36, EntityList { index: 0, unused: PhantomData })
  block38 []:
    Jump(block35, EntityList { index: 0, unused: PhantomData })

function u0:0() fast {
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2

block0:
    v14 = f64const 0.0
    v1 -> v14
    v0 = f64const 0x1.0000000000000p0
    jump block1(v0)

block1(v3: f64):
    v2 = f64const 0x1.0000000000000p0
    v4 = fadd v3, v2
    v15 -> v4
    v16 -> v4
    v7 -> v16
    v5 = f64const 0x1.9000000000000p6
    v6 = fcmp gt v4, v5
    brnz v6, block3
    jump block4

block2:
    v8 = fcvt_to_sint.i64 v7
    v9 = iconst.i64 101
    v10 = icmp eq v8, v9
    v11 = iconst.i64 99
    v12 = iconst.i64 9
    v13 = global_value.i64 gv0
    call fn0(v11, v12, v13)
    call fn1(v10)
    call fn2()
    return

block3:
    jump block2

block4:
    jump block1(v15)
}

fun test_case_3

  block39 []:
    v329 = Zeroed
    v330 = VarDecl(v329)
    v331 = Call(Fun(224), EntityList { index: 401, unused: PhantomData })
    v332 = Call(Fun(234), EntityList { index: 405, unused: PhantomData })
    v333 = Lit(Bool(true))
    v334 = Call(Fun(250), EntityList { index: 409, unused: PhantomData })
    v335 = Call(Fun(164), EntityList { index: 413, unused: PhantomData })
    v336 = Lit(Int(1, 0))
    v337 = Call(Fun(204), EntityList { index: 417, unused: PhantomData })
    v338 = Call(Fun(259), EntityList { index: 421, unused: PhantomData })
    v339 = Lit(Int(2, 0))
    v340 = Call(Fun(259), EntityList { index: 425, unused: PhantomData })
    v341 = Lit(Int(1, 0))
    v342 = Call(Fun(242), EntityList { index: 429, unused: PhantomData })
    v343 = Call(Fun(249), EntityList { index: 433, unused: PhantomData })
    v344 = Call(Fun(259), EntityList { index: 437, unused: PhantomData })
    v345 = Lit(Int(1, 0))
    v346 = Call(Fun(269), EntityList { index: 441, unused: PhantomData })
    v347 = Call(Fun(259), EntityList { index: 445, unused: PhantomData })
    v348 = Lit(Int(0, 0))
    v349 = Call(Fun(309), EntityList { index: 449, unused: PhantomData })
    v350 = Lit(Int(89, 0))
    v351 = Lit(Int(9, 0))
    v352 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 453, unused: PhantomData })
    Call(Fun(523), EntityList { index: 457, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2

block0:
    v27 = iconst.i64 0
    v1 -> v27
    v0 = iconst.i64 0
    v2 = iadd_imm v0, 1
    v3 = iadd_imm v2, -1
    v4 = bconst.b1 true
    v5 = bint.i8 v4
    v6 = icmp_imm eq v5, 0
    v7 = bint.i64 v6
    v8 = iconst.i64 1
    v9 = bnot v8
    v10 = iadd v7, v9
    v11 = iconst.i64 2
    v12 = iadd v10, v11
    v13 = iconst.i64 1
    v14 = ineg v13
    v15 = icmp_imm sgt v14, 0
    v16 = ineg v14
    v17 = select v15, v14, v16
    v18 = iadd v12, v17
    v19 = iconst.i64 1
    v20 = isub v18, v19
    v21 = iadd v20, v3
    v22 = iconst.i64 0
    v23 = icmp eq v21, v22
    v24 = iconst.i64 89
    v25 = iconst.i64 9
    v26 = global_value.i64 gv0
    call fn0(v24, v25, v26)
    call fn1(v23)
    call fn2()
    return
}

fun test_case_2

  block40 []:
    v353 = Zeroed
    v354 = VarDecl(v353)
    v355 = Zeroed
    v356 = VarDecl(v355)
    v357 = Lit(Int(1, 0))
    v358 = Lit(Int(2, 0))
    v360 = Lit(Int(82, 0))
    v361 = Lit(Int(8, 0))
    v362 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 461, unused: PhantomData })
    v359 = Call(Fun(503), EntityList { index: 465, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v359 = Assign(v354)
    v363 = Offset(v354)
    v364 = Offset(v354)
    v365 = Call(Fun(259), EntityList { index: 473, unused: PhantomData })
    v366 = Lit(Int(3, 0))
    v367 = Call(Fun(309), EntityList { index: 477, unused: PhantomData })
    v368 = Lit(Int(83, 0))
    v369 = Lit(Int(9, 0))
    v370 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 481, unused: PhantomData })
    Call(Fun(523), EntityList { index: 485, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 16
    ss2 = explicit_slot 16
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (i64, i64, i64, i64 sret) -> i64 sret fast
    sig2 = () fast
    sig3 = (b1) fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:59 sig1
    fn2 = colocated u0:11 sig2
    fn3 = colocated u0:33 sig3

block0:
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 0
    stack_store v1, ss1
    stack_store v1, ss1+8
    v2 = iconst.i64 1
    v3 = iconst.i64 2
    v4 = iconst.i64 82
    v5 = iconst.i64 8
    v6 = global_value.i64 gv0
    call fn0(v4, v5, v6)
    v7 = stack_addr.i64 ss0
    v8 = stack_addr.i64 ss2
    v9 = call fn1(v7, v2, v3, v8)
    call fn2()
    v10 = stack_load.i64 ss2
    stack_store v10, ss0
    v11 = stack_load.i64 ss2+8
    stack_store v11, ss0+8
    v12 = stack_load.i64 ss0
    v13 = stack_load.i64 ss0+8
    v14 = iadd v12, v13
    v15 = iconst.i64 3
    v16 = icmp eq v14, v15
    v17 = iconst.i64 83
    v18 = iconst.i64 9
    v19 = global_value.i64 gv0
    call fn0(v17, v18, v19)
    call fn3(v16)
    call fn2()
    return
}

fun set(p: Self, x: int, y: int) -> Self

  block41 [v371, v372, v373, v374]:
    v375 = VarDecl(v371)
    v376 = Offset(v375)
    v372 = Assign(v376)
    v377 = Offset(v375)
    v373 = Assign(v377)
    v378 = Deref(v374, false)
    v375 = Assign(v378)
    Return(Some(v374))

function u0:0(i64, i64, i64, i64 sret) -> i64 sret fast {
    ss0 = explicit_slot 16

block0(v0: i64, v1: i64, v2: i64, v3: i64):
    stack_store v0, ss0
    stack_store v0, ss0+8
    stack_store v1, ss0
    stack_store v2, ss0+8
    v4 = stack_addr.i64 ss0
    v5 = load.i64 v4
    store v5, v3
    v6 = load.i64 v4+8
    store v6, v3+8
    return v3
}

fun test_case_1

  block42 []:
    v379 = Zeroed
    v380 = VarDecl(v379)
    v381 = Zeroed
    v382 = VarDecl(v381)
    v383 = Zeroed
    v384 = VarDecl(v383)
    v385 = Offset(v380)
    v386 = Lit(Int(1, 0))
    v386 = Assign(v385)
    v387 = Offset(v382)
    v380 = Assign(v387)
    v388 = Offset(v382)
    v389 = Lit(Int(2, 0))
    v389 = Assign(v388)
    v390 = Offset(v384)
    v391 = Offset(v382)
    v391 = Assign(v390)
    v392 = Offset(v384)
    v393 = Offset(v392)
    v394 = Offset(v384)
    v395 = Offset(v394)
    v396 = Call(Fun(269), EntityList { index: 489, unused: PhantomData })
    v397 = Lit(Int(1, 0))
    v398 = Call(Fun(259), EntityList { index: 501, unused: PhantomData })
    v399 = Lit(Int(0, 0))
    v400 = Call(Fun(309), EntityList { index: 505, unused: PhantomData })
    v401 = Lit(Int(70, 0))
    v402 = Lit(Int(9, 0))
    v403 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 509, unused: PhantomData })
    Call(Fun(523), EntityList { index: 513, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    Return(None)

function u0:0() fast {
    ss0 = explicit_slot 16
    ss1 = explicit_slot 24
    ss2 = explicit_slot 32
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2

block0:
    v0 = iconst.i64 0
    stack_store v0, ss0
    stack_store v0, ss0+8
    v1 = iconst.i64 0
    stack_store v1, ss1
    stack_store v1, ss1+8
    stack_store v1, ss1+16
    v2 = iconst.i64 0
    stack_store v2, ss2
    stack_store v2, ss2+8
    stack_store v2, ss2+16
    stack_store v2, ss2+24
    v3 = iconst.i64 1
    stack_store v3, ss0
    v4 = stack_load.i64 ss0
    stack_store v4, ss1
    v5 = stack_load.i64 ss0+8
    stack_store v5, ss1+8
    v6 = iconst.i64 2
    stack_store v6, ss1+8
    v7 = stack_load.i64 ss1
    stack_store v7, ss2
    v8 = stack_load.i64 ss1+8
    stack_store v8, ss2+8
    v9 = stack_load.i64 ss2
    v10 = stack_load.i64 ss2+8
    v11 = isub v9, v10
    v12 = iconst.i64 1
    v13 = iadd v11, v12
    v14 = iconst.i64 0
    v15 = icmp eq v13, v14
    v16 = iconst.i64 70
    v17 = iconst.i64 9
    v18 = global_value.i64 gv0
    call fn0(v16, v17, v18)
    call fn1(v15)
    call fn2()
    return
}

fun fib_loop(v: int) -> int

  block43 [v404]:
    v405 = Lit(Int(1, 0))
    v406 = VarDecl(v405)
    v407 = VarDecl(v406)
    v408 = VarDecl(v406)
    v409 = VarDecl(v404)
    Jump(block44, EntityList { index: 0, unused: PhantomData })
  block44 []:
    v410 = Call(Fun(259), EntityList { index: 521, unused: PhantomData })
    v410 = Assign(v408)
    v407 = Assign(v406)
    v408 = Assign(v407)
    v411 = Lit(Int(1, 0))
    v412 = Call(Fun(269), EntityList { index: 525, unused: PhantomData })
    v412 = Assign(v409)
    v413 = Lit(Int(1, 0))
    v414 = Call(Fun(309), EntityList { index: 529, unused: PhantomData })
    JumpIfTrue(v414, block46, EntityList { index: 0, unused: PhantomData })
    Jump(block47, EntityList { index: 0, unused: PhantomData })
  block45 []:
    Return(Some(v408))
  block46 []:
    Jump(block45, EntityList { index: 0, unused: PhantomData })
  block47 []:
    Jump(block44, EntityList { index: 0, unused: PhantomData })

function u0:0(i64) -> i64 fast {
block0(v0: i64):
    v19 = iconst.i64 0
    v5 -> v19
    v18 = iconst.i64 0
    v4 -> v18
    v17 = iconst.i64 0
    v3 -> v17
    v16 = iconst.i64 0
    v2 -> v16
    v1 = iconst.i64 1
    jump block1(v1, v1, v1, v0)

block1(v6: i64, v7: i64, v9: i64, v11: i64):
    v20 -> v7
    v8 = iadd v6, v7
    v21 -> v8
    v22 -> v8
    v24 -> v8
    v15 -> v24
    v10 = iconst.i64 1
    v12 = isub v11, v10
    v23 -> v12
    v13 = iconst.i64 1
    v14 = icmp eq v12, v13
    brnz v14, block3
    jump block4

block2:
    return v15

block3:
    jump block2

block4:
    jump block1(v20, v21, v22, v23)
}

fun fib(v: int) -> int

  block48 [v415]:
    v416 = Lit(Int(2, 0))
    v417 = Call(Fun(359), EntityList { index: 537, unused: PhantomData })
    JumpIfTrue(v417, block49, EntityList { index: 0, unused: PhantomData })
    Jump(block51, EntityList { index: 0, unused: PhantomData })
  block49 []:
    v418 = Lit(Int(1, 0))
    Jump(block50, EntityList { index: 541, unused: PhantomData })
  block50 [v419]:
    Return(Some(v419))
  block51 []:
    v420 = Lit(Int(1, 0))
    v421 = Call(Fun(269), EntityList { index: 549, unused: PhantomData })
    v423 = Lit(Int(32, 0))
    v424 = Lit(Int(8, 0))
    v425 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 553, unused: PhantomData })
    v422 = Call(Fun(500), EntityList { index: 557, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v426 = Lit(Int(2, 0))
    v427 = Call(Fun(269), EntityList { index: 561, unused: PhantomData })
    v429 = Lit(Int(32, 0))
    v430 = Lit(Int(21, 0))
    v431 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 565, unused: PhantomData })
    v428 = Call(Fun(500), EntityList { index: 569, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v432 = Call(Fun(259), EntityList { index: 573, unused: PhantomData })
    Jump(block50, EntityList { index: 577, unused: PhantomData })

function u0:0(i64) -> i64 fast {
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (i64) -> i64 fast
    sig2 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:62 sig1
    fn2 = colocated u0:11 sig2

block0(v0: i64):
    v2 = iconst.i64 2
    v3 = icmp slt v0, v2
    brnz v3, block1
    jump block3

block1:
    v4 = iconst.i64 1
    jump block2(v4)

block2(v1: i64):
    return v1

block3:
    v5 = iconst.i64 1
    v6 = isub.i64 v0, v5
    v7 = iconst.i64 32
    v8 = iconst.i64 8
    v9 = global_value.i64 gv0
    call fn0(v7, v8, v9)
    v10 = call fn1(v6)
    call fn2()
    v11 = iconst.i64 2
    v12 = isub.i64 v0, v11
    v13 = iconst.i64 32
    v14 = iconst.i64 21
    v15 = global_value.i64 gv0
    call fn0(v13, v14, v15)
    v16 = call fn1(v12)
    call fn2()
    v17 = iadd v10, v16
    jump block2(v17)
}

fun foo()

  block52 []:
    Return(None)

function u0:0() fast {
block0:
    return
}

fun fine -> int

  block53 []:
    v433 = Lit(Int(1, 0))
    v434 = Lit(Int(1, 0))
    v435 = Call(Fun(269), EntityList { index: 581, unused: PhantomData })
    v436 = Lit(Int(0, 0))
    v437 = Call(Fun(309), EntityList { index: 585, unused: PhantomData })
    v438 = Lit(Int(3, 0))
    v439 = Lit(Int(9, 0))
    v440 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 589, unused: PhantomData })
    Call(Fun(523), EntityList { index: 593, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v441 = Lit(Int(1, 0))
    v442 = Lit(Int(1, 0))
    v443 = Call(Fun(259), EntityList { index: 597, unused: PhantomData })
    v444 = Lit(Int(2, 0))
    v445 = Call(Fun(309), EntityList { index: 601, unused: PhantomData })
    v446 = Lit(Int(4, 0))
    v447 = Lit(Int(9, 0))
    v448 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 605, unused: PhantomData })
    Call(Fun(523), EntityList { index: 609, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v449 = Lit(Int(1, 0))
    v450 = Lit(Int(1, 0))
    v451 = Call(Fun(309), EntityList { index: 613, unused: PhantomData })
    JumpIfTrue(v451, block54, EntityList { index: 0, unused: PhantomData })
    Jump(block56, EntityList { index: 0, unused: PhantomData })
  block54 []:
    v452 = Lit(Int(1, 0))
    Jump(block55, EntityList { index: 617, unused: PhantomData })
  block55 [v453]:
    v455 = Lit(Int(1, 0))
    v456 = Call(Fun(309), EntityList { index: 629, unused: PhantomData })
    v457 = Lit(Int(5, 0))
    v458 = Lit(Int(9, 0))
    v459 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 633, unused: PhantomData })
    Call(Fun(523), EntityList { index: 637, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v460 = Lit(Int(10, 0))
    v462 = Lit(Int(6, 0))
    v463 = Lit(Int(13, 0))
    v464 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 641, unused: PhantomData })
    v461 = Call(Fun(500), EntityList { index: 645, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v465 = Lit(Int(10, 0))
    v467 = Lit(Int(6, 0))
    v468 = Lit(Int(29, 0))
    v469 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 649, unused: PhantomData })
    v466 = Call(Fun(501), EntityList { index: 653, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v470 = Call(Fun(309), EntityList { index: 657, unused: PhantomData })
    v471 = Lit(Int(6, 0))
    v472 = Lit(Int(9, 0))
    v473 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 661, unused: PhantomData })
    Call(Fun(523), EntityList { index: 665, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v474 = Lit(Int(8, 0))
    v475 = Lit(Int(14, 0))
    v476 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 669, unused: PhantomData })
    Call(Fun(502), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v477 = Lit(Int(9, 0))
    v478 = Lit(Int(14, 0))
    v479 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 673, unused: PhantomData })
    Call(Fun(504), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v480 = Lit(Int(10, 0))
    v481 = Lit(Int(14, 0))
    v482 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 677, unused: PhantomData })
    Call(Fun(505), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v483 = Lit(Int(11, 0))
    v484 = Lit(Int(14, 0))
    v485 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 681, unused: PhantomData })
    Call(Fun(506), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v486 = Lit(Int(12, 0))
    v487 = Lit(Int(14, 0))
    v488 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 685, unused: PhantomData })
    Call(Fun(508), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v489 = Lit(Int(13, 0))
    v490 = Lit(Int(14, 0))
    v491 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 689, unused: PhantomData })
    Call(Fun(510), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v492 = Lit(Int(14, 0))
    v493 = Lit(Int(14, 0))
    v494 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 693, unused: PhantomData })
    Call(Fun(511), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v495 = Lit(Int(15, 0))
    v496 = Lit(Int(14, 0))
    v497 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 697, unused: PhantomData })
    Call(Fun(512), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v498 = Lit(Int(16, 0))
    v499 = Lit(Int(14, 0))
    v500 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 701, unused: PhantomData })
    Call(Fun(513), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v501 = Lit(Int(17, 0))
    v502 = Lit(Int(15, 0))
    v503 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 705, unused: PhantomData })
    Call(Fun(514), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v504 = Lit(Int(18, 0))
    v505 = Lit(Int(15, 0))
    v506 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 709, unused: PhantomData })
    Call(Fun(515), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v507 = Lit(Int(19, 0))
    v508 = Lit(Int(15, 0))
    v509 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 713, unused: PhantomData })
    Call(Fun(516), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v510 = Lit(Int(20, 0))
    v511 = Lit(Int(15, 0))
    v512 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 717, unused: PhantomData })
    Call(Fun(519), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v513 = Lit(Int(21, 0))
    v514 = Lit(Int(15, 0))
    v515 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 721, unused: PhantomData })
    Call(Fun(521), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v516 = Lit(Int(22, 0))
    v517 = Lit(Int(15, 0))
    v518 = Lit(String(Span { source: Source(0), hash: ID(14979365136090743649), start: 343, end: 372, line: 0, column: 0 }))
    Call(Fun(471), EntityList { index: 725, unused: PhantomData })
    Call(Fun(522), EntityList { index: 0, unused: PhantomData })
    Call(Fun(472), EntityList { index: 0, unused: PhantomData })
    v519 = Lit(Int(0, 0))
    Return(Some(v519))
  block56 []:
    v454 = Lit(Int(0, 0))
    Jump(block55, EntityList { index: 625, unused: PhantomData })

function u0:0() -> i64 fast {
    gv0 = symbol colocated u1:8
    sig0 = (i64, i64, i64) fast
    sig1 = (b1) fast
    sig2 = () fast
    sig3 = (i64) -> i64 fast
    sig4 = (i64) -> i64 fast
    sig5 = () fast
    sig6 = () fast
    sig7 = () fast
    sig8 = () fast
    sig9 = () fast
    sig10 = () fast
    sig11 = () fast
    sig12 = () fast
    sig13 = () fast
    sig14 = () fast
    sig15 = () fast
    sig16 = () fast
    sig17 = () fast
    sig18 = () fast
    sig19 = () fast
    fn0 = colocated u0:16 sig0
    fn1 = colocated u0:33 sig1
    fn2 = colocated u0:11 sig2
    fn3 = colocated u0:62 sig3
    fn4 = colocated u0:61 sig4
    fn5 = colocated u0:60 sig5
    fn6 = colocated u0:58 sig6
    fn7 = colocated u0:57 sig7
    fn8 = colocated u0:56 sig8
    fn9 = colocated u0:55 sig9
    fn10 = colocated u0:53 sig10
    fn11 = colocated u0:52 sig11
    fn12 = colocated u0:51 sig12
    fn13 = colocated u0:50 sig13
    fn14 = colocated u0:45 sig14
    fn15 = colocated u0:44 sig15
    fn16 = colocated u0:43 sig16
    fn17 = colocated u0:40 sig17
    fn18 = colocated u0:38 sig18
    fn19 = colocated u0:34 sig19

block0:
    v1 = iconst.i64 1
    v2 = iconst.i64 1
    v3 = isub v1, v2
    v4 = iconst.i64 0
    v5 = icmp eq v3, v4
    v6 = iconst.i64 3
    v7 = iconst.i64 9
    v8 = global_value.i64 gv0
    call fn0(v6, v7, v8)
    call fn1(v5)
    call fn2()
    v9 = iconst.i64 1
    v10 = iconst.i64 1
    v11 = iadd v9, v10
    v12 = iconst.i64 2
    v13 = icmp eq v11, v12
    v14 = iconst.i64 4
    v15 = iconst.i64 9
    v16 = global_value.i64 gv0
    call fn0(v14, v15, v16)
    call fn1(v13)
    call fn2()
    v17 = iconst.i64 1
    v18 = iconst.i64 1
    v19 = icmp eq v17, v18
    brnz v19, block1
    jump block3

block1:
    v20 = iconst.i64 1
    jump block2(v20)

block2(v0: i64):
    v21 = iconst.i64 1
    v22 = icmp eq v0, v21
    v23 = iconst.i64 5
    v24 = iconst.i64 9
    v25 = global_value.i64 gv0
    call fn0(v23, v24, v25)
    call fn1(v22)
    call fn2()
    v26 = iconst.i64 10
    v27 = iconst.i64 6
    v28 = iconst.i64 13
    v29 = global_value.i64 gv0
    call fn0(v27, v28, v29)
    v30 = call fn3(v26)
    call fn2()
    v31 = iconst.i64 10
    v32 = iconst.i64 6
    v33 = iconst.i64 29
    v34 = global_value.i64 gv0
    call fn0(v32, v33, v34)
    v35 = call fn4(v31)
    call fn2()
    v36 = icmp eq v30, v35
    v37 = iconst.i64 6
    v38 = iconst.i64 9
    v39 = global_value.i64 gv0
    call fn0(v37, v38, v39)
    call fn1(v36)
    call fn2()
    v40 = iconst.i64 8
    v41 = iconst.i64 14
    v42 = global_value.i64 gv0
    call fn0(v40, v41, v42)
    call fn5()
    call fn2()
    v43 = iconst.i64 9
    v44 = iconst.i64 14
    v45 = global_value.i64 gv0
    call fn0(v43, v44, v45)
    call fn6()
    call fn2()
    v46 = iconst.i64 10
    v47 = iconst.i64 14
    v48 = global_value.i64 gv0
    call fn0(v46, v47, v48)
    call fn7()
    call fn2()
    v49 = iconst.i64 11
    v50 = iconst.i64 14
    v51 = global_value.i64 gv0
    call fn0(v49, v50, v51)
    call fn8()
    call fn2()
    v52 = iconst.i64 12
    v53 = iconst.i64 14
    v54 = global_value.i64 gv0
    call fn0(v52, v53, v54)
    call fn9()
    call fn2()
    v55 = iconst.i64 13
    v56 = iconst.i64 14
    v57 = global_value.i64 gv0
    call fn0(v55, v56, v57)
    call fn10()
    call fn2()
    v58 = iconst.i64 14
    v59 = iconst.i64 14
    v60 = global_value.i64 gv0
    call fn0(v58, v59, v60)
    call fn11()
    call fn2()
    v61 = iconst.i64 15
    v62 = iconst.i64 14
    v63 = global_value.i64 gv0
    call fn0(v61, v62, v63)
    call fn12()
    call fn2()
    v64 = iconst.i64 16
    v65 = iconst.i64 14
    v66 = global_value.i64 gv0
    call fn0(v64, v65, v66)
    call fn13()
    call fn2()
    v67 = iconst.i64 17
    v68 = iconst.i64 15
    v69 = global_value.i64 gv0
    call fn0(v67, v68, v69)
    call fn14()
    call fn2()
    v70 = iconst.i64 18
    v71 = iconst.i64 15
    v72 = global_value.i64 gv0
    call fn0(v70, v71, v72)
    call fn15()
    call fn2()
    v73 = iconst.i64 19
    v74 = iconst.i64 15
    v75 = global_value.i64 gv0
    call fn0(v73, v74, v75)
    call fn16()
    call fn2()
    v76 = iconst.i64 20
    v77 = iconst.i64 15
    v78 = global_value.i64 gv0
    call fn0(v76, v77, v78)
    call fn17()
    call fn2()
    v79 = iconst.i64 21
    v80 = iconst.i64 15
    v81 = global_value.i64 gv0
    call fn0(v79, v80, v81)
    call fn18()
    call fn2()
    v82 = iconst.i64 22
    v83 = iconst.i64 15
    v84 = global_value.i64 gv0
    call fn0(v82, v83, v84)
    call fn19()
    call fn2()
    v85 = iconst.i64 0
    return v85

block3:
    v86 = iconst.i64 0
    jump block2(v86)
}



  block0 [v0, v1]:
    v2 = Zeroed
    v3 = VarDecl(v2)
    v4 = Lit(Int(1, 0))
    v5 = GlobalLoad(gv2)
    v4 = Assign(v5)
    v6 = Call(Fun(498), EntityList { index: 0, unused: PhantomData })
    v6 = Assign(v3)
    Return(Some(v3))

function u0:0(i64, i64) -> i64 fast {
    gv0 = symbol colocated u1:7
    sig0 = () -> i64 fast
    fn0 = colocated u0:64 sig0

block0(v0: i64, v1: i64):
    v7 = iconst.i64 0
    v3 -> v7
    v2 = iconst.i64 0
    v4 = iconst.i64 1
    v5 = global_value.i64 gv0
    store v4, v5
    v6 = call fn0()
    return v6
}

output:
ok
ok
ok
ok
ok
ok
ok
ok
Hello, World!ok
ok
ok
ok
ok
ok
ok
ok
ok
hmmm-1
ok
hmmm
:end
